
FREERTOS Project Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08007e98  08007e98  00017e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800813c  0800813c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800813c  0800813c  0001813c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008144  08008144  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008144  08008144  00018144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800814c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004c68  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004cc8  20004cc8  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001900c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000362a  00000000  00000000  000390df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015d0  00000000  00000000  0003c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010f7  00000000  00000000  0003dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000039d5  00000000  00000000  0003edd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000190cd  00000000  00000000  000427ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1c05  00000000  00000000  0005b879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006160  00000000  00000000  0013d480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001435e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e80 	.word	0x08007e80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007e80 	.word	0x08007e80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f023 030f 	bic.w	r3, r3, #15
 800057c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	011b      	lsls	r3, r3, #4
 8000582:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000598:	7bbb      	ldrb	r3, [r7, #14]
 800059a:	f043 030c 	orr.w	r3, r3, #12
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005a2:	7bbb      	ldrb	r3, [r7, #14]
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005ac:	f107 0208 	add.w	r2, r7, #8
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2304      	movs	r3, #4
 80005b6:	214e      	movs	r1, #78	; 0x4e
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <lcd_send_cmd+0x5c>)
 80005ba:	f001 febf 	bl	800233c <HAL_I2C_Master_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000c4 	.word	0x200000c4

080005cc <lcd_send_data>:

void lcd_send_data (char data)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f023 030f 	bic.w	r3, r3, #15
 80005dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	f043 030d 	orr.w	r3, r3, #13
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	f043 0309 	orr.w	r3, r3, #9
 8000608:	b2db      	uxtb	r3, r3
 800060a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800060c:	f107 0208 	add.w	r2, r7, #8
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2304      	movs	r3, #4
 8000616:	214e      	movs	r1, #78	; 0x4e
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <lcd_send_data+0x5c>)
 800061a:	f001 fe8f 	bl	800233c <HAL_I2C_Master_Transmit>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000c4 	.word	0x200000c4

0800062c <lcd_clear>:

void lcd_clear (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000632:	2080      	movs	r0, #128	; 0x80
 8000634:	f7ff ff9a 	bl	800056c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	e005      	b.n	800064a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800063e:	2020      	movs	r0, #32
 8000640:	f7ff ffc4 	bl	80005cc <lcd_send_data>
	for (int i=0; i<70; i++)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b45      	cmp	r3, #69	; 0x45
 800064e:	ddf6      	ble.n	800063e <lcd_clear+0x12>
	}
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	6039      	str	r1, [r7, #0]
    switch (row)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d003      	beq.n	8000672 <lcd_put_cur+0x18>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d005      	beq.n	800067c <lcd_put_cur+0x22>
 8000670:	e009      	b.n	8000686 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000678:	603b      	str	r3, [r7, #0]
            break;
 800067a:	e004      	b.n	8000686 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000682:	603b      	str	r3, [r7, #0]
            break;
 8000684:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff6e 	bl	800056c <lcd_send_cmd>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <lcd_init>:


void lcd_init (void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800069c:	2032      	movs	r0, #50	; 0x32
 800069e:	f000 fe03 	bl	80012a8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006a2:	2030      	movs	r0, #48	; 0x30
 80006a4:	f7ff ff62 	bl	800056c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006a8:	2005      	movs	r0, #5
 80006aa:	f000 fdfd 	bl	80012a8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006ae:	2030      	movs	r0, #48	; 0x30
 80006b0:	f7ff ff5c 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fdf7 	bl	80012a8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006ba:	2030      	movs	r0, #48	; 0x30
 80006bc:	f7ff ff56 	bl	800056c <lcd_send_cmd>
	HAL_Delay(10);
 80006c0:	200a      	movs	r0, #10
 80006c2:	f000 fdf1 	bl	80012a8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006c6:	2020      	movs	r0, #32
 80006c8:	f7ff ff50 	bl	800056c <lcd_send_cmd>
	HAL_Delay(10);
 80006cc:	200a      	movs	r0, #10
 80006ce:	f000 fdeb 	bl	80012a8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006d2:	2028      	movs	r0, #40	; 0x28
 80006d4:	f7ff ff4a 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 fde5 	bl	80012a8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006de:	2008      	movs	r0, #8
 80006e0:	f7ff ff44 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 fddf 	bl	80012a8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ff3e 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 fdd9 	bl	80012a8 <HAL_Delay>
	HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 fdd6 	bl	80012a8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006fc:	2006      	movs	r0, #6
 80006fe:	f7ff ff35 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fdd0 	bl	80012a8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000708:	200c      	movs	r0, #12
 800070a:	f7ff ff2f 	bl	800056c <lcd_send_cmd>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}

08000712 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800071a:	e006      	b.n	800072a <lcd_send_string+0x18>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff51 	bl	80005cc <lcd_send_data>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f4      	bne.n	800071c <lcd_send_string+0xa>
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d104      	bne.n	8000756 <HAL_GPIO_EXTI_Callback+0x1a>
	{
      osSemaphoreRelease(PushButtonGreenLedSemHandle);
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <HAL_GPIO_EXTI_Callback+0x24>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f003 fb49 	bl	8003de8 <osSemaphoreRelease>
	}
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000140 	.word	0x20000140

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 fd5c 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f8a8 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f000 f984 	bl	8000a7c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000774:	f000 f954 	bl	8000a20 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000778:	f000 f900 	bl	800097c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800077c:	f003 f84e 	bl	800381c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of LCDMutex */
  LCDMutexHandle = osMutexNew(&LCDMutex_attributes);
 8000780:	4830      	ldr	r0, [pc, #192]	; (8000844 <main+0xe0>)
 8000782:	f003 f948 	bl	8003a16 <osMutexNew>
 8000786:	4603      	mov	r3, r0
 8000788:	4a2f      	ldr	r2, [pc, #188]	; (8000848 <main+0xe4>)
 800078a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PushButtonGreenLedSem */
  PushButtonGreenLedSemHandle = osSemaphoreNew(1, 0, &PushButtonGreenLedSem_attributes);
 800078c:	4a2f      	ldr	r2, [pc, #188]	; (800084c <main+0xe8>)
 800078e:	2100      	movs	r1, #0
 8000790:	2001      	movs	r0, #1
 8000792:	f003 fa4e 	bl	8003c32 <osSemaphoreNew>
 8000796:	4603      	mov	r3, r0
 8000798:	4a2d      	ldr	r2, [pc, #180]	; (8000850 <main+0xec>)
 800079a:	6013      	str	r3, [r2, #0]

  /* creation of GreenLedConversionSem */
  GreenLedConversionSemHandle = osSemaphoreNew(1, 0, &GreenLedConversionSem_attributes);
 800079c:	4a2d      	ldr	r2, [pc, #180]	; (8000854 <main+0xf0>)
 800079e:	2100      	movs	r1, #0
 80007a0:	2001      	movs	r0, #1
 80007a2:	f003 fa46 	bl	8003c32 <osSemaphoreNew>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a2b      	ldr	r2, [pc, #172]	; (8000858 <main+0xf4>)
 80007aa:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LEDQueue */
  LEDQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &LEDQueue_attributes);
 80007ac:	4a2b      	ldr	r2, [pc, #172]	; (800085c <main+0xf8>)
 80007ae:	2102      	movs	r1, #2
 80007b0:	2010      	movs	r0, #16
 80007b2:	f003 fb5d 	bl	8003e70 <osMessageQueueNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a29      	ldr	r2, [pc, #164]	; (8000860 <main+0xfc>)
 80007ba:	6013      	str	r3, [r2, #0]

  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &LCDQueue_attributes);
 80007bc:	4a29      	ldr	r2, [pc, #164]	; (8000864 <main+0x100>)
 80007be:	2102      	movs	r1, #2
 80007c0:	2010      	movs	r0, #16
 80007c2:	f003 fb55 	bl	8003e70 <osMessageQueueNew>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a27      	ldr	r2, [pc, #156]	; (8000868 <main+0x104>)
 80007ca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007cc:	4a27      	ldr	r2, [pc, #156]	; (800086c <main+0x108>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <main+0x10c>)
 80007d2:	f003 f86d 	bl	80038b0 <osThreadNew>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a26      	ldr	r2, [pc, #152]	; (8000874 <main+0x110>)
 80007da:	6013      	str	r3, [r2, #0]

  /* creation of BlueLedTask */
  BlueLedTaskHandle = osThreadNew(StartBlueLedTask, NULL, &BlueLedTask_attributes);
 80007dc:	4a26      	ldr	r2, [pc, #152]	; (8000878 <main+0x114>)
 80007de:	2100      	movs	r1, #0
 80007e0:	4826      	ldr	r0, [pc, #152]	; (800087c <main+0x118>)
 80007e2:	f003 f865 	bl	80038b0 <osThreadNew>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4a25      	ldr	r2, [pc, #148]	; (8000880 <main+0x11c>)
 80007ea:	6013      	str	r3, [r2, #0]

  /* creation of GreenLedTask */
  GreenLedTaskHandle = osThreadNew(StartGreenLedTask, NULL, &GreenLedTask_attributes);
 80007ec:	4a25      	ldr	r2, [pc, #148]	; (8000884 <main+0x120>)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4825      	ldr	r0, [pc, #148]	; (8000888 <main+0x124>)
 80007f2:	f003 f85d 	bl	80038b0 <osThreadNew>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a24      	ldr	r2, [pc, #144]	; (800088c <main+0x128>)
 80007fa:	6013      	str	r3, [r2, #0]

  /* creation of ConversionTask */
  ConversionTaskHandle = osThreadNew(StartConversionTask, NULL, &ConversionTask_attributes);
 80007fc:	4a24      	ldr	r2, [pc, #144]	; (8000890 <main+0x12c>)
 80007fe:	2100      	movs	r1, #0
 8000800:	4824      	ldr	r0, [pc, #144]	; (8000894 <main+0x130>)
 8000802:	f003 f855 	bl	80038b0 <osThreadNew>
 8000806:	4603      	mov	r3, r0
 8000808:	4a23      	ldr	r2, [pc, #140]	; (8000898 <main+0x134>)
 800080a:	6013      	str	r3, [r2, #0]

  /* creation of LedControlTask */
  LedControlTaskHandle = osThreadNew(StartLedControlTask, NULL, &LedControlTask_attributes);
 800080c:	4a23      	ldr	r2, [pc, #140]	; (800089c <main+0x138>)
 800080e:	2100      	movs	r1, #0
 8000810:	4823      	ldr	r0, [pc, #140]	; (80008a0 <main+0x13c>)
 8000812:	f003 f84d 	bl	80038b0 <osThreadNew>
 8000816:	4603      	mov	r3, r0
 8000818:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <main+0x140>)
 800081a:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(StartLCDTask, NULL, &LCDTask_attributes);
 800081c:	4a22      	ldr	r2, [pc, #136]	; (80008a8 <main+0x144>)
 800081e:	2100      	movs	r1, #0
 8000820:	4822      	ldr	r0, [pc, #136]	; (80008ac <main+0x148>)
 8000822:	f003 f845 	bl	80038b0 <osThreadNew>
 8000826:	4603      	mov	r3, r0
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <main+0x14c>)
 800082a:	6013      	str	r3, [r2, #0]

  /* creation of PA2Task */
  PA2TaskHandle = osThreadNew(StartPA2Task, NULL, &PA2Task_attributes);
 800082c:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <main+0x150>)
 800082e:	2100      	movs	r1, #0
 8000830:	4821      	ldr	r0, [pc, #132]	; (80008b8 <main+0x154>)
 8000832:	f003 f83d 	bl	80038b0 <osThreadNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a20      	ldr	r2, [pc, #128]	; (80008bc <main+0x158>)
 800083a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800083c:	f003 f812 	bl	8003864 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000840:	e7fe      	b.n	8000840 <main+0xdc>
 8000842:	bf00      	nop
 8000844:	080080c0 	.word	0x080080c0
 8000848:	2000013c 	.word	0x2000013c
 800084c:	080080d0 	.word	0x080080d0
 8000850:	20000140 	.word	0x20000140
 8000854:	080080e0 	.word	0x080080e0
 8000858:	20000144 	.word	0x20000144
 800085c:	08008090 	.word	0x08008090
 8000860:	20000134 	.word	0x20000134
 8000864:	080080a8 	.word	0x080080a8
 8000868:	20000138 	.word	0x20000138
 800086c:	08007f94 	.word	0x08007f94
 8000870:	08000b69 	.word	0x08000b69
 8000874:	20000118 	.word	0x20000118
 8000878:	08007fb8 	.word	0x08007fb8
 800087c:	08000b79 	.word	0x08000b79
 8000880:	2000011c 	.word	0x2000011c
 8000884:	08007fdc 	.word	0x08007fdc
 8000888:	08000b99 	.word	0x08000b99
 800088c:	20000120 	.word	0x20000120
 8000890:	08008000 	.word	0x08008000
 8000894:	08000c19 	.word	0x08000c19
 8000898:	20000124 	.word	0x20000124
 800089c:	08008024 	.word	0x08008024
 80008a0:	08000cad 	.word	0x08000cad
 80008a4:	20000128 	.word	0x20000128
 80008a8:	08008048 	.word	0x08008048
 80008ac:	08000d59 	.word	0x08000d59
 80008b0:	2000012c 	.word	0x2000012c
 80008b4:	0800806c 	.word	0x0800806c
 80008b8:	08000ded 	.word	0x08000ded
 80008bc:	20000130 	.word	0x20000130

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	; 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2230      	movs	r2, #48	; 0x30
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f006 fdfc 	bl	80074cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <SystemClock_Config+0xb4>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a21      	ldr	r2, [pc, #132]	; (8000974 <SystemClock_Config+0xb4>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <SystemClock_Config+0xb4>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <SystemClock_Config+0xb8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <SystemClock_Config+0xb8>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <SystemClock_Config+0xb8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000924:	2310      	movs	r3, #16
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000928:	2300      	movs	r3, #0
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	4618      	mov	r0, r3
 8000932:	f002 f80b 	bl	800294c <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800093c:	f000 fa9e 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	230f      	movs	r3, #15
 8000942:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fa6e 	bl	8002e3c <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000966:	f000 fa89 	bl	8000e7c <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3750      	adds	r7, #80	; 0x50
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000982:	463b      	mov	r3, r7
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_ADC1_Init+0x98>)
 8000990:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <MX_ADC1_Init+0x9c>)
 8000992:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_ADC1_Init+0x98>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_ADC1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_ADC1_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_ADC1_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_ADC1_Init+0x98>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_ADC1_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_ADC1_Init+0x98>)
 80009bc:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <MX_ADC1_Init+0xa0>)
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_ADC1_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_ADC1_Init+0x98>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_ADC1_Init+0x98>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_ADC1_Init+0x98>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009da:	480e      	ldr	r0, [pc, #56]	; (8000a14 <MX_ADC1_Init+0x98>)
 80009dc:	f000 fc88 	bl	80012f0 <HAL_ADC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009e6:	f000 fa49 	bl	8000e7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_ADC1_Init+0x98>)
 80009fc:	f000 fe5a 	bl	80016b4 <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a06:	f000 fa39 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000007c 	.word	0x2000007c
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	0f000001 	.word	0x0f000001

08000a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a26:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <MX_I2C1_Init+0x54>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x58>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a5e:	f001 fb29 	bl	80020b4 <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fa08 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000c4 	.word	0x200000c4
 8000a74:	40005400 	.word	0x40005400
 8000a78:	000186a0 	.word	0x000186a0

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <MX_GPIO_Init+0xe0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a30      	ldr	r2, [pc, #192]	; (8000b5c <MX_GPIO_Init+0xe0>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <MX_GPIO_Init+0xe0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <MX_GPIO_Init+0xe0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a29      	ldr	r2, [pc, #164]	; (8000b5c <MX_GPIO_Init+0xe0>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <MX_GPIO_Init+0xe0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <MX_GPIO_Init+0xe0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <MX_GPIO_Init+0xe0>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <MX_GPIO_Init+0xe0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GreenLed_Pin|OrangeLed_Pin|RedLed_Pin|BlueLed_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000aec:	481c      	ldr	r0, [pc, #112]	; (8000b60 <MX_GPIO_Init+0xe4>)
 8000aee:	f001 fa95 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af2:	2301      	movs	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4619      	mov	r1, r3
 8000b06:	4817      	ldr	r0, [pc, #92]	; (8000b64 <MX_GPIO_Init+0xe8>)
 8000b08:	f001 f8d4 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_GPIO_Init+0xe8>)
 8000b20:	f001 f8c8 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GreenLed_Pin OrangeLed_Pin RedLed_Pin BlueLed_Pin */
  GPIO_InitStruct.Pin = GreenLed_Pin|OrangeLed_Pin|RedLed_Pin|BlueLed_Pin;
 8000b24:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <MX_GPIO_Init+0xe4>)
 8000b3e:	f001 f8b9 	bl	8001cb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2105      	movs	r1, #5
 8000b46:	2006      	movs	r0, #6
 8000b48:	f001 f88a 	bl	8001c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b4c:	2006      	movs	r0, #6
 8000b4e:	f001 f8a3 	bl	8001c98 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b52:	bf00      	nop
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	40020000 	.word	0x40020000

08000b68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f002 ff35 	bl	80039e0 <osDelay>
 8000b76:	e7fb      	b.n	8000b70 <StartDefaultTask+0x8>

08000b78 <StartBlueLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlueLedTask */
void StartBlueLedTask(void *argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlueLedTask */
  /* Infinite loop */
  for(;;)
  { HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <StartBlueLedTask+0x1c>)
 8000b86:	f001 fa62 	bl	800204e <HAL_GPIO_TogglePin>
    osDelay(500);
 8000b8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b8e:	f002 ff27 	bl	80039e0 <osDelay>
  { HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b92:	e7f5      	b.n	8000b80 <StartBlueLedTask+0x8>
 8000b94:	40020c00 	.word	0x40020c00

08000b98 <StartGreenLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGreenLedTask */
void StartGreenLedTask(void *argument)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGreenLedTask */
	uint8_t counter=0x00;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  { if(counter==0)
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d11e      	bne.n	8000be8 <StartGreenLedTask+0x50>
  {
	osSemaphoreAcquire(PushButtonGreenLedSemHandle, osWaitForever);
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <StartGreenLedTask+0x70>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 f8c6 	bl	8003d44 <osSemaphoreAcquire>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <StartGreenLedTask+0x74>)
 8000bbe:	f001 fa46 	bl	800204e <HAL_GPIO_TogglePin>
    lcd_init();
 8000bc2:	f7ff fd69 	bl	8000698 <lcd_init>
    lcd_clear();
 8000bc6:	f7ff fd31 	bl	800062c <lcd_clear>
    lcd_put_cur(0, 0);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff fd44 	bl	800065a <lcd_put_cur>
    lcd_send_string("FREERTOS Project");
 8000bd2:	480f      	ldr	r0, [pc, #60]	; (8000c10 <StartGreenLedTask+0x78>)
 8000bd4:	f7ff fd9d 	bl	8000712 <lcd_send_string>
    lcd_put_cur(1, 0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f7ff fd3d 	bl	800065a <lcd_put_cur>
    counter++;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	3301      	adds	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	e004      	b.n	8000bf2 <StartGreenLedTask+0x5a>
  }
  else
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000be8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bec:	4807      	ldr	r0, [pc, #28]	; (8000c0c <StartGreenLedTask+0x74>)
 8000bee:	f001 fa2e 	bl	800204e <HAL_GPIO_TogglePin>
  }
  osSemaphoreRelease(GreenLedConversionSemHandle);
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <StartGreenLedTask+0x7c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 f8f6 	bl	8003de8 <osSemaphoreRelease>
  osDelay(500);
 8000bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c00:	f002 feee 	bl	80039e0 <osDelay>
  { if(counter==0)
 8000c04:	e7ce      	b.n	8000ba4 <StartGreenLedTask+0xc>
 8000c06:	bf00      	nop
 8000c08:	20000140 	.word	0x20000140
 8000c0c:	40020c00 	.word	0x40020c00
 8000c10:	08007f44 	.word	0x08007f44
 8000c14:	20000144 	.word	0x20000144

08000c18 <StartConversionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConversionTask */
void StartConversionTask(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConversionTask */
	uint16_t adc_val =0x00;
 8000c20:	2300      	movs	r3, #0
 8000c22:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  { osSemaphoreAcquire(GreenLedConversionSemHandle,osWaitForever);
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <StartConversionTask+0x84>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 f889 	bl	8003d44 <osSemaphoreAcquire>
    if (HAL_ADC_Start(&hadc1)!=HAL_OK)
 8000c32:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <StartConversionTask+0x88>)
 8000c34:	f000 fba0 	bl	8001378 <HAL_ADC_Start>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <StartConversionTask+0x2a>
    {
    	osThreadExit();
 8000c3e:	f002 fec9 	bl	80039d4 <osThreadExit>
    }
    if(HAL_ADC_PollForConversion(&hadc1, 1)!=HAL_OK)
 8000c42:	2101      	movs	r1, #1
 8000c44:	4816      	ldr	r0, [pc, #88]	; (8000ca0 <StartConversionTask+0x88>)
 8000c46:	f000 fc9c 	bl	8001582 <HAL_ADC_PollForConversion>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <StartConversionTask+0x3c>
    {
    	osThreadExit();
 8000c50:	f002 fec0 	bl	80039d4 <osThreadExit>
    }
    adc_val=HAL_ADC_GetValue(&hadc1);
 8000c54:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <StartConversionTask+0x88>)
 8000c56:	f000 fd1f 	bl	8001698 <HAL_ADC_GetValue>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	81fb      	strh	r3, [r7, #14]
    osMessageQueuePut(LEDQueueHandle, &adc_val, 0, osWaitForever);
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <StartConversionTask+0x8c>)
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	f107 010e 	add.w	r1, r7, #14
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f003 f973 	bl	8003f58 <osMessageQueuePut>
    osMessageQueuePut(LCDQueueHandle, &adc_val, 0, 200);
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <StartConversionTask+0x90>)
 8000c74:	6818      	ldr	r0, [r3, #0]
 8000c76:	f107 010e 	add.w	r1, r7, #14
 8000c7a:	23c8      	movs	r3, #200	; 0xc8
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f003 f96b 	bl	8003f58 <osMessageQueuePut>
    if (HAL_ADC_Stop(&hadc1)!=HAL_OK)
 8000c82:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <StartConversionTask+0x88>)
 8000c84:	f000 fc4a 	bl	800151c <HAL_ADC_Stop>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <StartConversionTask+0x7a>
    	{
    	  osThreadExit();
 8000c8e:	f002 fea1 	bl	80039d4 <osThreadExit>
    	}
        osDelay(1);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f002 fea4 	bl	80039e0 <osDelay>
  { osSemaphoreAcquire(GreenLedConversionSemHandle,osWaitForever);
 8000c98:	e7c4      	b.n	8000c24 <StartConversionTask+0xc>
 8000c9a:	bf00      	nop
 8000c9c:	20000144 	.word	0x20000144
 8000ca0:	2000007c 	.word	0x2000007c
 8000ca4:	20000134 	.word	0x20000134
 8000ca8:	20000138 	.word	0x20000138

08000cac <StartLedControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedControlTask */
void StartLedControlTask(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedControlTask */
	uint16_t get_adc2leds =0x00;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
   osMessageQueueGet(LEDQueueHandle, &get_adc2leds, 0, osWaitForever);
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <StartLedControlTask+0xa4>)
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	f107 010e 	add.w	r1, r7, #14
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f003 f9a7 	bl	8004018 <osMessageQueueGet>
   if (get_adc2leds >4000)
 8000cca:	89fb      	ldrh	r3, [r7, #14]
 8000ccc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000cd0:	d90c      	bls.n	8000cec <StartLedControlTask+0x40>
   	  {
   	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd8:	481e      	ldr	r0, [pc, #120]	; (8000d54 <StartLedControlTask+0xa8>)
 8000cda:	f001 f99f 	bl	800201c <HAL_GPIO_WritePin>
   	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce4:	481b      	ldr	r0, [pc, #108]	; (8000d54 <StartLedControlTask+0xa8>)
 8000ce6:	f001 f999 	bl	800201c <HAL_GPIO_WritePin>
 8000cea:	e7e5      	b.n	8000cb8 <StartLedControlTask+0xc>
   	  }
   	  else
   	  {
   		if (get_adc2leds >2500)
 8000cec:	89fb      	ldrh	r3, [r7, #14]
 8000cee:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d90c      	bls.n	8000d10 <StartLedControlTask+0x64>
   		{
   		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfc:	4815      	ldr	r0, [pc, #84]	; (8000d54 <StartLedControlTask+0xa8>)
 8000cfe:	f001 f98d 	bl	800201c <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d08:	4812      	ldr	r0, [pc, #72]	; (8000d54 <StartLedControlTask+0xa8>)
 8000d0a:	f001 f987 	bl	800201c <HAL_GPIO_WritePin>
 8000d0e:	e7d3      	b.n	8000cb8 <StartLedControlTask+0xc>
   		}
   		else
   		{
   		  if (get_adc2leds >1500)
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d90c      	bls.n	8000d34 <StartLedControlTask+0x88>
   		  {
   			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <StartLedControlTask+0xa8>)
 8000d22:	f001 f97b 	bl	800201c <HAL_GPIO_WritePin>
   			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <StartLedControlTask+0xa8>)
 8000d2e:	f001 f975 	bl	800201c <HAL_GPIO_WritePin>
 8000d32:	e7c1      	b.n	8000cb8 <StartLedControlTask+0xc>
   		  }
   		  else
   		  {
   			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <StartLedControlTask+0xa8>)
 8000d3c:	f001 f96e 	bl	800201c <HAL_GPIO_WritePin>
   			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d46:	4803      	ldr	r0, [pc, #12]	; (8000d54 <StartLedControlTask+0xa8>)
 8000d48:	f001 f968 	bl	800201c <HAL_GPIO_WritePin>
   osMessageQueueGet(LEDQueueHandle, &get_adc2leds, 0, osWaitForever);
 8000d4c:	e7b4      	b.n	8000cb8 <StartLedControlTask+0xc>
 8000d4e:	bf00      	nop
 8000d50:	20000134 	.word	0x20000134
 8000d54:	40020c00 	.word	0x40020c00

08000d58 <StartLCDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDTask */
	uint16_t get_adc2lcd = 0x00;
 8000d60:	2300      	movs	r3, #0
 8000d62:	83fb      	strh	r3, [r7, #30]
	uint8_t buffer[20];
  /* Infinite loop */
  for(;;)
  {
    if(osMutexAcquire(LCDMutexHandle, osWaitForever)==osOK)
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <StartLCDTask+0x88>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 fed8 	bl	8003b22 <osMutexAcquire>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d12e      	bne.n	8000dd6 <StartLCDTask+0x7e>
    {
    	osMessageQueueGet(LCDQueueHandle, &get_adc2lcd, 0, osWaitForever);
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <StartLCDTask+0x8c>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	f107 011e 	add.w	r1, r7, #30
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	2200      	movs	r2, #0
 8000d86:	f003 f947 	bl	8004018 <osMessageQueueGet>
    	lcd_put_cur(1, 0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fc64 	bl	800065a <lcd_put_cur>
    	memset(buffer,' ', sizeof(buffer));
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2214      	movs	r2, #20
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f006 fb96 	bl	80074cc <memset>
    	lcd_send_string(buffer);
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fcb4 	bl	8000712 <lcd_send_string>
    	sprintf(buffer,"La valeur: %d",get_adc2lcd);
 8000daa:	8bfb      	ldrh	r3, [r7, #30]
 8000dac:	461a      	mov	r2, r3
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <StartLCDTask+0x90>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 fb69 	bl	800748c <siprintf>
    	lcd_put_cur(1, 0);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff fc4c 	bl	800065a <lcd_put_cur>
    	lcd_send_string(buffer);
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fca3 	bl	8000712 <lcd_send_string>
    	osMutexRelease(LCDMutexHandle);
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <StartLCDTask+0x88>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fef1 	bl	8003bb8 <osMutexRelease>
    }
    osDelay(50);
 8000dd6:	2032      	movs	r0, #50	; 0x32
 8000dd8:	f002 fe02 	bl	80039e0 <osDelay>
    if(osMutexAcquire(LCDMutexHandle, osWaitForever)==osOK)
 8000ddc:	e7c2      	b.n	8000d64 <StartLCDTask+0xc>
 8000dde:	bf00      	nop
 8000de0:	2000013c 	.word	0x2000013c
 8000de4:	20000138 	.word	0x20000138
 8000de8:	08007f58 	.word	0x08007f58

08000dec <StartPA2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPA2Task */
void StartPA2Task(void *argument)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	uint8_t buffer_urg[16];
	uint8_t count_lcd;
  /* Infinite loop */
  for(;;)
  {
	  if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)==GPIO_PIN_SET)
 8000df4:	2104      	movs	r1, #4
 8000df6:	4815      	ldr	r0, [pc, #84]	; (8000e4c <StartPA2Task+0x60>)
 8000df8:	f001 f8f8 	bl	8001fec <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d120      	bne.n	8000e44 <StartPA2Task+0x58>
	  	  {
	  		 if (osMutexAcquire(LCDMutexHandle, osWaitForever) == osOK)
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <StartPA2Task+0x64>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 fe89 	bl	8003b22 <osMutexAcquire>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10a      	bne.n	8000e2c <StartPA2Task+0x40>
	  	    {
	  	      	lcd_put_cur(1,0);
 8000e16:	2100      	movs	r1, #0
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff fc1e 	bl	800065a <lcd_put_cur>
	  	        lcd_send_string(" ...Urgence...  ");
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <StartPA2Task+0x68>)
 8000e20:	f7ff fc77 	bl	8000712 <lcd_send_string>
	  	    }
	  		while( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)==GPIO_PIN_SET)
 8000e24:	e002      	b.n	8000e2c <StartPA2Task+0x40>
	  		 {
	  			  osDelay(100);
 8000e26:	2064      	movs	r0, #100	; 0x64
 8000e28:	f002 fdda 	bl	80039e0 <osDelay>
	  		while( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)==GPIO_PIN_SET)
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <StartPA2Task+0x60>)
 8000e30:	f001 f8dc 	bl	8001fec <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d0f5      	beq.n	8000e26 <StartPA2Task+0x3a>
	  	     }
	  		 osMutexRelease(LCDMutexHandle);
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <StartPA2Task+0x64>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 feba 	bl	8003bb8 <osMutexRelease>
	  	  }

	      osDelay(100);
 8000e44:	2064      	movs	r0, #100	; 0x64
 8000e46:	f002 fdcb 	bl	80039e0 <osDelay>
	  if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)==GPIO_PIN_SET)
 8000e4a:	e7d3      	b.n	8000df4 <StartPA2Task+0x8>
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	2000013c 	.word	0x2000013c
 8000e54:	08007f68 	.word	0x08007f68

08000e58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e6a:	f000 f9fd 	bl	8001268 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40000c00 	.word	0x40000c00

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_MspInit+0x54>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_MspInit+0x54>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_MspInit+0x54>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_MspInit+0x54>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_MspInit+0x54>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_MspInit+0x54>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	210f      	movs	r1, #15
 8000eca:	f06f 0001 	mvn.w	r0, #1
 8000ece:	f000 fec7 	bl	8001c60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <HAL_ADC_MspInit+0x7c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d127      	bne.n	8000f52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_ADC_MspInit+0x84>)
 8000f4e:	f000 feb1 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	; 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40012000 	.word	0x40012000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000

08000f68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_I2C_MspInit+0x84>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d12c      	bne.n	8000fe4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000fa6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fac:	2312      	movs	r3, #18
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <HAL_I2C_MspInit+0x8c>)
 8000fc4:	f000 fe76 	bl	8001cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08e      	sub	sp, #56	; 0x38
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <HAL_InitTick+0xe4>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a32      	ldr	r2, [pc, #200]	; (80010dc <HAL_InitTick+0xe4>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <HAL_InitTick+0xe4>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001024:	f107 0210 	add.w	r2, r7, #16
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f002 f8d0 	bl	80031d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103a:	2b00      	cmp	r3, #0
 800103c:	d103      	bne.n	8001046 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800103e:	f002 f8b5 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8001042:	6378      	str	r0, [r7, #52]	; 0x34
 8001044:	e004      	b.n	8001050 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001046:	f002 f8b1 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 800104a:	4603      	mov	r3, r0
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <HAL_InitTick+0xe8>)
 8001054:	fba2 2303 	umull	r2, r3, r2, r3
 8001058:	0c9b      	lsrs	r3, r3, #18
 800105a:	3b01      	subs	r3, #1
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_InitTick+0xec>)
 8001060:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <HAL_InitTick+0xf0>)
 8001062:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_InitTick+0xec>)
 8001066:	f240 32e7 	movw	r2, #999	; 0x3e7
 800106a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_InitTick+0xec>)
 800106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001070:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_InitTick+0xec>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_InitTick+0xec>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_InitTick+0xec>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001084:	4817      	ldr	r0, [pc, #92]	; (80010e4 <HAL_InitTick+0xec>)
 8001086:	f002 f8d7 	bl	8003238 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001090:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001094:	2b00      	cmp	r3, #0
 8001096:	d11b      	bne.n	80010d0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001098:	4812      	ldr	r0, [pc, #72]	; (80010e4 <HAL_InitTick+0xec>)
 800109a:	f002 f927 	bl	80032ec <HAL_TIM_Base_Start_IT>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d111      	bne.n	80010d0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80010ac:	2032      	movs	r0, #50	; 0x32
 80010ae:	f000 fdf3 	bl	8001c98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d808      	bhi.n	80010ca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	2032      	movs	r0, #50	; 0x32
 80010be:	f000 fdcf 	bl	8001c60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_InitTick+0xf4>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	e002      	b.n	80010d0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3738      	adds	r7, #56	; 0x38
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	431bde83 	.word	0x431bde83
 80010e4:	20000148 	.word	0x20000148
 80010e8:	40000c00 	.word	0x40000c00
 80010ec:	20000004 	.word	0x20000004

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001120:	2001      	movs	r0, #1
 8001122:	f000 ffaf 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM5_IRQHandler+0x10>)
 8001132:	f002 f94b 	bl	80033cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000148 	.word	0x20000148

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f006 fa0a 	bl	8007588 <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	220c      	movs	r2, #12
 8001178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20020000 	.word	0x20020000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	20000190 	.word	0x20000190
 80011a8:	20004cc8 	.word	0x20004cc8

080011ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011d6:	490e      	ldr	r1, [pc, #56]	; (8001210 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011ec:	4c0b      	ldr	r4, [pc, #44]	; (800121c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fa:	f7ff ffd7 	bl	80011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f006 f9c9 	bl	8007594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001202:	f7ff faaf 	bl	8000764 <main>
  bx  lr    
 8001206:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001208:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001214:	0800814c 	.word	0x0800814c
  ldr r2, =_sbss
 8001218:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800121c:	20004cc8 	.word	0x20004cc8

08001220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_Init+0x40>)
 800122e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_Init+0x40>)
 800123a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_Init+0x40>)
 8001246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 fcfc 	bl	8001c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	200f      	movs	r0, #15
 8001254:	f7ff fed0 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fe16 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008
 800128c:	20000194 	.word	0x20000194

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000194 	.word	0x20000194

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008

080012f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e033      	b.n	800136e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fde6 	bl	8000ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	2b00      	cmp	r3, #0
 800132c:	d118      	bne.n	8001360 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001336:	f023 0302 	bic.w	r3, r3, #2
 800133a:	f043 0202 	orr.w	r2, r3, #2
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fad8 	bl	80018f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f023 0303 	bic.w	r3, r3, #3
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
 800135e:	e001      	b.n	8001364 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_ADC_Start+0x1a>
 800138e:	2302      	movs	r3, #2
 8001390:	e0b2      	b.n	80014f8 <HAL_ADC_Start+0x180>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d018      	beq.n	80013da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013b8:	4b52      	ldr	r3, [pc, #328]	; (8001504 <HAL_ADC_Start+0x18c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_ADC_Start+0x190>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0c9a      	lsrs	r2, r3, #18
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f9      	bne.n	80013ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d17a      	bne.n	80014de <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001412:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001426:	d106      	bne.n	8001436 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	f023 0206 	bic.w	r2, r3, #6
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	645a      	str	r2, [r3, #68]	; 0x44
 8001434:	e002      	b.n	800143c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_ADC_Start+0x194>)
 8001446:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001450:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	2b00      	cmp	r3, #0
 800145c:	d12a      	bne.n	80014b4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <HAL_ADC_Start+0x198>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d015      	beq.n	8001494 <HAL_ADC_Start+0x11c>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a29      	ldr	r2, [pc, #164]	; (8001514 <HAL_ADC_Start+0x19c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d105      	bne.n	800147e <HAL_ADC_Start+0x106>
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_ADC_Start+0x194>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00a      	beq.n	8001494 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <HAL_ADC_Start+0x1a0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d136      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_ADC_Start+0x194>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	d130      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d129      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	e020      	b.n	80014f6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_ADC_Start+0x198>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d11b      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d114      	bne.n	80014f6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	e00b      	b.n	80014f6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f043 0210 	orr.w	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	20000000 	.word	0x20000000
 8001508:	431bde83 	.word	0x431bde83
 800150c:	40012300 	.word	0x40012300
 8001510:	40012000 	.word	0x40012000
 8001514:	40012100 	.word	0x40012100
 8001518:	40012200 	.word	0x40012200

0800151c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_ADC_Stop+0x16>
 800152e:	2302      	movs	r3, #2
 8001530:	e021      	b.n	8001576 <HAL_ADC_Stop+0x5a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d109      	bne.n	800156c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159e:	d113      	bne.n	80015c8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015ae:	d10b      	bne.n	80015c8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f043 0220 	orr.w	r2, r3, #32
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e063      	b.n	8001690 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015c8:	f7ff fe62 	bl	8001290 <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015ce:	e021      	b.n	8001614 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d6:	d01d      	beq.n	8001614 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <HAL_ADC_PollForConversion+0x6c>
 80015de:	f7ff fe57 	bl	8001290 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d212      	bcs.n	8001614 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d00b      	beq.n	8001614 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f043 0204 	orr.w	r2, r3, #4
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e03d      	b.n	8001690 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b02      	cmp	r3, #2
 8001620:	d1d6      	bne.n	80015d0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f06f 0212 	mvn.w	r2, #18
 800162a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d123      	bne.n	800168e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800164a:	2b00      	cmp	r3, #0
 800164c:	d11f      	bne.n	800168e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001666:	2b00      	cmp	r3, #0
 8001668:	d111      	bne.n	800168e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d105      	bne.n	800168e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f043 0201 	orr.w	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1c>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e105      	b.n	80018dc <HAL_ADC_ConfigChannel+0x228>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d925      	bls.n	800172c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68d9      	ldr	r1, [r3, #12]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	3b1e      	subs	r3, #30
 80016f6:	2207      	movs	r2, #7
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43da      	mvns	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	400a      	ands	r2, r1
 8001704:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68d9      	ldr	r1, [r3, #12]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	4618      	mov	r0, r3
 8001718:	4603      	mov	r3, r0
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4403      	add	r3, r0
 800171e:	3b1e      	subs	r3, #30
 8001720:	409a      	lsls	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	e022      	b.n	8001772 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6919      	ldr	r1, [r3, #16]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	2207      	movs	r2, #7
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	400a      	ands	r2, r1
 800174e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6919      	ldr	r1, [r3, #16]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	4603      	mov	r3, r0
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4403      	add	r3, r0
 8001768:	409a      	lsls	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b06      	cmp	r3, #6
 8001778:	d824      	bhi.n	80017c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3b05      	subs	r3, #5
 800178c:	221f      	movs	r2, #31
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	400a      	ands	r2, r1
 800179a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	3b05      	subs	r3, #5
 80017b6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34
 80017c2:	e04c      	b.n	800185e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	d824      	bhi.n	8001816 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	3b23      	subs	r3, #35	; 0x23
 80017de:	221f      	movs	r2, #31
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43da      	mvns	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	400a      	ands	r2, r1
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	3b23      	subs	r3, #35	; 0x23
 8001808:	fa00 f203 	lsl.w	r2, r0, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
 8001814:	e023      	b.n	800185e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b41      	subs	r3, #65	; 0x41
 8001828:	221f      	movs	r2, #31
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	400a      	ands	r2, r1
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3b41      	subs	r3, #65	; 0x41
 8001852:	fa00 f203 	lsl.w	r2, r0, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800185e:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_ADC_ConfigChannel+0x234>)
 8001860:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_ADC_ConfigChannel+0x238>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d109      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1cc>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b12      	cmp	r3, #18
 8001872:	d105      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <HAL_ADC_ConfigChannel+0x238>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d123      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x21e>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b10      	cmp	r3, #16
 8001890:	d003      	beq.n	800189a <HAL_ADC_ConfigChannel+0x1e6>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b11      	cmp	r3, #17
 8001898:	d11b      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d111      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_ADC_ConfigChannel+0x23c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <HAL_ADC_ConfigChannel+0x240>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	0c9a      	lsrs	r2, r3, #18
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018c4:	e002      	b.n	80018cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f9      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	40012300 	.word	0x40012300
 80018ec:	40012000 	.word	0x40012000
 80018f0:	20000000 	.word	0x20000000
 80018f4:	431bde83 	.word	0x431bde83

080018f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001900:	4b79      	ldr	r3, [pc, #484]	; (8001ae8 <ADC_Init+0x1f0>)
 8001902:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	431a      	orrs	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800192c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	021a      	lsls	r2, r3, #8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6899      	ldr	r1, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	4a58      	ldr	r2, [pc, #352]	; (8001aec <ADC_Init+0x1f4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d022      	beq.n	80019d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800199e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6899      	ldr	r1, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6899      	ldr	r1, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	e00f      	b.n	80019f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0202 	bic.w	r2, r2, #2
 8001a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6899      	ldr	r1, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e1b      	ldrb	r3, [r3, #24]
 8001a10:	005a      	lsls	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d01b      	beq.n	8001a5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6859      	ldr	r1, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	035a      	lsls	r2, r3, #13
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	e007      	b.n	8001a6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	051a      	lsls	r2, r3, #20
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6899      	ldr	r1, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aae:	025a      	lsls	r2, r3, #9
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6899      	ldr	r1, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	029a      	lsls	r2, r3, #10
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	609a      	str	r2, [r3, #8]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40012300 	.word	0x40012300
 8001aec:	0f000001 	.word	0x0f000001

08001af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <__NVIC_GetPriorityGrouping+0x18>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 0307 	and.w	r3, r3, #7
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db0b      	blt.n	8001b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <__NVIC_EnableIRQ+0x38>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2001      	movs	r0, #1
 8001b76:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ff4c 	bl	8001af0 <__NVIC_SetPriorityGrouping>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c72:	f7ff ff61 	bl	8001b38 <__NVIC_GetPriorityGrouping>
 8001c76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	6978      	ldr	r0, [r7, #20]
 8001c7e:	f7ff ffb1 	bl	8001be4 <NVIC_EncodePriority>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff80 	bl	8001b90 <__NVIC_SetPriority>
}
 8001c90:	bf00      	nop
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff54 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e16b      	b.n	8001fa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f040 815a 	bne.w	8001fa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d005      	beq.n	8001d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d130      	bne.n	8001d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2203      	movs	r2, #3
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 0201 	and.w	r2, r3, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d017      	beq.n	8001da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d123      	bne.n	8001df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3208      	adds	r2, #8
 8001df2:	69b9      	ldr	r1, [r7, #24]
 8001df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80b4 	beq.w	8001fa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b60      	ldr	r3, [pc, #384]	; (8001fc0 <HAL_GPIO_Init+0x30c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a5f      	ldr	r2, [pc, #380]	; (8001fc0 <HAL_GPIO_Init+0x30c>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <HAL_GPIO_Init+0x30c>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e56:	4a5b      	ldr	r2, [pc, #364]	; (8001fc4 <HAL_GPIO_Init+0x310>)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_GPIO_Init+0x314>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d02b      	beq.n	8001eda <HAL_GPIO_Init+0x226>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a51      	ldr	r2, [pc, #324]	; (8001fcc <HAL_GPIO_Init+0x318>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d025      	beq.n	8001ed6 <HAL_GPIO_Init+0x222>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a50      	ldr	r2, [pc, #320]	; (8001fd0 <HAL_GPIO_Init+0x31c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01f      	beq.n	8001ed2 <HAL_GPIO_Init+0x21e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <HAL_GPIO_Init+0x320>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x21a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <HAL_GPIO_Init+0x324>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x216>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4d      	ldr	r2, [pc, #308]	; (8001fdc <HAL_GPIO_Init+0x328>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x212>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_GPIO_Init+0x32c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x20e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <HAL_GPIO_Init+0x330>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x20a>
 8001eba:	2307      	movs	r3, #7
 8001ebc:	e00e      	b.n	8001edc <HAL_GPIO_Init+0x228>
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	e00c      	b.n	8001edc <HAL_GPIO_Init+0x228>
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	e00a      	b.n	8001edc <HAL_GPIO_Init+0x228>
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	e008      	b.n	8001edc <HAL_GPIO_Init+0x228>
 8001eca:	2304      	movs	r3, #4
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x228>
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e004      	b.n	8001edc <HAL_GPIO_Init+0x228>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e002      	b.n	8001edc <HAL_GPIO_Init+0x228>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x228>
 8001eda:	2300      	movs	r3, #0
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f002 0203 	and.w	r2, r2, #3
 8001ee2:	0092      	lsls	r2, r2, #2
 8001ee4:	4093      	lsls	r3, r2
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eec:	4935      	ldr	r1, [pc, #212]	; (8001fc4 <HAL_GPIO_Init+0x310>)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efa:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f1e:	4a32      	ldr	r2, [pc, #200]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f24:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f48:	4a27      	ldr	r2, [pc, #156]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f72:	4a1d      	ldr	r2, [pc, #116]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	f67f ae90 	bls.w	8001cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40021400 	.word	0x40021400
 8001fe0:	40021800 	.word	0x40021800
 8001fe4:	40021c00 	.word	0x40021c00
 8001fe8:	40013c00 	.word	0x40013c00

08001fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e001      	b.n	800200e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002038:	e003      	b.n	8002042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	041a      	lsls	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	619a      	str	r2, [r3, #24]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002060:	887a      	ldrh	r2, [r7, #2]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4013      	ands	r3, r2
 8002066:	041a      	lsls	r2, r3, #16
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43d9      	mvns	r1, r3
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	400b      	ands	r3, r1
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	619a      	str	r2, [r3, #24]
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fb4a 	bl	800073c <HAL_GPIO_EXTI_Callback>
  }
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40013c00 	.word	0x40013c00

080020b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e12b      	b.n	800231e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe ff44 	bl	8000f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2224      	movs	r2, #36	; 0x24
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002106:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002116:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002118:	f001 f848 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 800211c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a81      	ldr	r2, [pc, #516]	; (8002328 <HAL_I2C_Init+0x274>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d807      	bhi.n	8002138 <HAL_I2C_Init+0x84>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4a80      	ldr	r2, [pc, #512]	; (800232c <HAL_I2C_Init+0x278>)
 800212c:	4293      	cmp	r3, r2
 800212e:	bf94      	ite	ls
 8002130:	2301      	movls	r3, #1
 8002132:	2300      	movhi	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e006      	b.n	8002146 <HAL_I2C_Init+0x92>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4a7d      	ldr	r2, [pc, #500]	; (8002330 <HAL_I2C_Init+0x27c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	bf94      	ite	ls
 8002140:	2301      	movls	r3, #1
 8002142:	2300      	movhi	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0e7      	b.n	800231e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a78      	ldr	r2, [pc, #480]	; (8002334 <HAL_I2C_Init+0x280>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0c9b      	lsrs	r3, r3, #18
 8002158:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	430a      	orrs	r2, r1
 800216c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a6a      	ldr	r2, [pc, #424]	; (8002328 <HAL_I2C_Init+0x274>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d802      	bhi.n	8002188 <HAL_I2C_Init+0xd4>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3301      	adds	r3, #1
 8002186:	e009      	b.n	800219c <HAL_I2C_Init+0xe8>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	4a69      	ldr	r2, [pc, #420]	; (8002338 <HAL_I2C_Init+0x284>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	3301      	adds	r3, #1
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	495c      	ldr	r1, [pc, #368]	; (8002328 <HAL_I2C_Init+0x274>)
 80021b8:	428b      	cmp	r3, r1
 80021ba:	d819      	bhi.n	80021f0 <HAL_I2C_Init+0x13c>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1e59      	subs	r1, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ca:	1c59      	adds	r1, r3, #1
 80021cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021d0:	400b      	ands	r3, r1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_I2C_Init+0x138>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1e59      	subs	r1, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ea:	e051      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 80021ec:	2304      	movs	r3, #4
 80021ee:	e04f      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d111      	bne.n	800221c <HAL_I2C_Init+0x168>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1e58      	subs	r0, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	440b      	add	r3, r1
 8002206:	fbb0 f3f3 	udiv	r3, r0, r3
 800220a:	3301      	adds	r3, #1
 800220c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e012      	b.n	8002242 <HAL_I2C_Init+0x18e>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1e58      	subs	r0, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	0099      	lsls	r1, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002232:	3301      	adds	r3, #1
 8002234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Init+0x196>
 8002246:	2301      	movs	r3, #1
 8002248:	e022      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10e      	bne.n	8002270 <HAL_I2C_Init+0x1bc>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1e58      	subs	r0, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	440b      	add	r3, r1
 8002260:	fbb0 f3f3 	udiv	r3, r0, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226e:	e00f      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1e58      	subs	r0, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	0099      	lsls	r1, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	fbb0 f3f3 	udiv	r3, r0, r3
 8002286:	3301      	adds	r3, #1
 8002288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	6809      	ldr	r1, [r1, #0]
 8002294:	4313      	orrs	r3, r2
 8002296:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6911      	ldr	r1, [r2, #16]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68d2      	ldr	r2, [r2, #12]
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	000186a0 	.word	0x000186a0
 800232c:	001e847f 	.word	0x001e847f
 8002330:	003d08ff 	.word	0x003d08ff
 8002334:	431bde83 	.word	0x431bde83
 8002338:	10624dd3 	.word	0x10624dd3

0800233c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	461a      	mov	r2, r3
 8002348:	460b      	mov	r3, r1
 800234a:	817b      	strh	r3, [r7, #10]
 800234c:	4613      	mov	r3, r2
 800234e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7fe ff9e 	bl	8001290 <HAL_GetTick>
 8002354:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b20      	cmp	r3, #32
 8002360:	f040 80e0 	bne.w	8002524 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2319      	movs	r3, #25
 800236a:	2201      	movs	r2, #1
 800236c:	4970      	ldr	r1, [pc, #448]	; (8002530 <HAL_I2C_Master_Transmit+0x1f4>)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f964 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800237a:	2302      	movs	r3, #2
 800237c:	e0d3      	b.n	8002526 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_I2C_Master_Transmit+0x50>
 8002388:	2302      	movs	r3, #2
 800238a:	e0cc      	b.n	8002526 <HAL_I2C_Master_Transmit+0x1ea>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d007      	beq.n	80023b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0201 	orr.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2221      	movs	r2, #33	; 0x21
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2210      	movs	r2, #16
 80023ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	893a      	ldrh	r2, [r7, #8]
 80023e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4a50      	ldr	r2, [pc, #320]	; (8002534 <HAL_I2C_Master_Transmit+0x1f8>)
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023f4:	8979      	ldrh	r1, [r7, #10]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	6a3a      	ldr	r2, [r7, #32]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f89c 	bl	8002538 <I2C_MasterRequestWrite>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e08d      	b.n	8002526 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002420:	e066      	b.n	80024f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	6a39      	ldr	r1, [r7, #32]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f9de 	bl	80027e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00d      	beq.n	800244e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	2b04      	cmp	r3, #4
 8002438:	d107      	bne.n	800244a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002448:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e06b      	b.n	8002526 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b04      	cmp	r3, #4
 800248a:	d11b      	bne.n	80024c4 <HAL_I2C_Master_Transmit+0x188>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	d017      	beq.n	80024c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	6a39      	ldr	r1, [r7, #32]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f9ce 	bl	800286a <I2C_WaitOnBTFFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00d      	beq.n	80024f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d107      	bne.n	80024ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e01a      	b.n	8002526 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d194      	bne.n	8002422 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	e000      	b.n	8002526 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002524:	2302      	movs	r3, #2
  }
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	00100002 	.word	0x00100002
 8002534:	ffff0000 	.word	0xffff0000

08002538 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	460b      	mov	r3, r1
 8002546:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b08      	cmp	r3, #8
 8002552:	d006      	beq.n	8002562 <I2C_MasterRequestWrite+0x2a>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d003      	beq.n	8002562 <I2C_MasterRequestWrite+0x2a>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002560:	d108      	bne.n	8002574 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e00b      	b.n	800258c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	2b12      	cmp	r3, #18
 800257a:	d107      	bne.n	800258c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800258a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f84f 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00d      	beq.n	80025c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b2:	d103      	bne.n	80025bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e035      	b.n	800262c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025c8:	d108      	bne.n	80025dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ca:	897b      	ldrh	r3, [r7, #10]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025d8:	611a      	str	r2, [r3, #16]
 80025da:	e01b      	b.n	8002614 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025dc:	897b      	ldrh	r3, [r7, #10]
 80025de:	11db      	asrs	r3, r3, #7
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f003 0306 	and.w	r3, r3, #6
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f063 030f 	orn	r3, r3, #15
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <I2C_MasterRequestWrite+0xfc>)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f875 	bl	80026ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e010      	b.n	800262c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800260a:	897b      	ldrh	r3, [r7, #10]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <I2C_MasterRequestWrite+0x100>)
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f865 	bl	80026ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	00010008 	.word	0x00010008
 8002638:	00010002 	.word	0x00010002

0800263c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264c:	e025      	b.n	800269a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d021      	beq.n	800269a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002656:	f7fe fe1b 	bl	8001290 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d302      	bcc.n	800266c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d116      	bne.n	800269a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e023      	b.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d10d      	bne.n	80026c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4013      	ands	r3, r2
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	e00c      	b.n	80026da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4013      	ands	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d0b6      	beq.n	800264e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026f8:	e051      	b.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002708:	d123      	bne.n	8002752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002718:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002722:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f043 0204 	orr.w	r2, r3, #4
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e046      	b.n	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d021      	beq.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275a:	f7fe fd99 	bl	8001290 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d116      	bne.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f043 0220 	orr.w	r2, r3, #32
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e020      	b.n	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	0c1b      	lsrs	r3, r3, #16
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10c      	bne.n	80027c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4013      	ands	r3, r2
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bf14      	ite	ne
 80027ba:	2301      	movne	r3, #1
 80027bc:	2300      	moveq	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	e00b      	b.n	80027da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	43da      	mvns	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4013      	ands	r3, r2
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf14      	ite	ne
 80027d4:	2301      	movne	r3, #1
 80027d6:	2300      	moveq	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d18d      	bne.n	80026fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027f4:	e02d      	b.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f878 	bl	80028ec <I2C_IsAcknowledgeFailed>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e02d      	b.n	8002862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d021      	beq.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7fe fd3f 	bl	8001290 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d116      	bne.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f043 0220 	orr.w	r2, r3, #32
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e007      	b.n	8002862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285c:	2b80      	cmp	r3, #128	; 0x80
 800285e:	d1ca      	bne.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002876:	e02d      	b.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f837 	bl	80028ec <I2C_IsAcknowledgeFailed>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e02d      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288e:	d021      	beq.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002890:	f7fe fcfe 	bl	8001290 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	d302      	bcc.n	80028a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e007      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d1ca      	bne.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002902:	d11b      	bne.n	800293c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800290c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e267      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d075      	beq.n	8002a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800296a:	4b88      	ldr	r3, [pc, #544]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b04      	cmp	r3, #4
 8002974:	d00c      	beq.n	8002990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002976:	4b85      	ldr	r3, [pc, #532]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800297e:	2b08      	cmp	r3, #8
 8002980:	d112      	bne.n	80029a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002982:	4b82      	ldr	r3, [pc, #520]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298e:	d10b      	bne.n	80029a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	4b7e      	ldr	r3, [pc, #504]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d05b      	beq.n	8002a54 <HAL_RCC_OscConfig+0x108>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d157      	bne.n	8002a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e242      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b0:	d106      	bne.n	80029c0 <HAL_RCC_OscConfig+0x74>
 80029b2:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a75      	ldr	r2, [pc, #468]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e01d      	b.n	80029fc <HAL_RCC_OscConfig+0xb0>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x98>
 80029ca:	4b70      	ldr	r3, [pc, #448]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6f      	ldr	r2, [pc, #444]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b6d      	ldr	r3, [pc, #436]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6c      	ldr	r2, [pc, #432]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0xb0>
 80029e4:	4b69      	ldr	r3, [pc, #420]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a68      	ldr	r2, [pc, #416]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b66      	ldr	r3, [pc, #408]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a65      	ldr	r2, [pc, #404]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe fc44 	bl	8001290 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fc40 	bl	8001290 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e207      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b5b      	ldr	r3, [pc, #364]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0xc0>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fc30 	bl	8001290 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fe fc2c 	bl	8001290 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1f3      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0xe8>
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d063      	beq.n	8002b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a62:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d11c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7a:	4b44      	ldr	r3, [pc, #272]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d116      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_OscConfig+0x152>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e1c7      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4937      	ldr	r1, [pc, #220]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	e03a      	b.n	8002b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abc:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <HAL_RCC_OscConfig+0x244>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fbe5 	bl	8001290 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aca:	f7fe fbe1 	bl	8001290 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1a8      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4925      	ldr	r1, [pc, #148]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
 8002afc:	e015      	b.n	8002b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afe:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x244>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fbc4 	bl	8001290 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fbc0 	bl	8001290 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e187      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d036      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d016      	beq.n	8002b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <HAL_RCC_OscConfig+0x248>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7fe fba4 	bl	8001290 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fba0 	bl	8001290 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e167      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x200>
 8002b6a:	e01b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_OscConfig+0x248>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b72:	f7fe fb8d 	bl	8001290 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	e00e      	b.n	8002b98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fb89 	bl	8001290 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d907      	bls.n	8002b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e150      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	42470000 	.word	0x42470000
 8002b94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	4b88      	ldr	r3, [pc, #544]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ea      	bne.n	8002b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8097 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb6:	4b81      	ldr	r3, [pc, #516]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b7d      	ldr	r3, [pc, #500]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a7c      	ldr	r2, [pc, #496]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b7a      	ldr	r3, [pc, #488]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b77      	ldr	r3, [pc, #476]	; (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d118      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bee:	4b74      	ldr	r3, [pc, #464]	; (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a73      	ldr	r2, [pc, #460]	; (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fb49 	bl	8001290 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c02:	f7fe fb45 	bl	8001290 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e10c      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x2ea>
 8002c28:	4b64      	ldr	r3, [pc, #400]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a63      	ldr	r2, [pc, #396]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
 8002c34:	e01c      	b.n	8002c70 <HAL_RCC_OscConfig+0x324>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x30c>
 8002c3e:	4b5f      	ldr	r3, [pc, #380]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a5e      	ldr	r2, [pc, #376]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	4b5c      	ldr	r3, [pc, #368]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a5b      	ldr	r2, [pc, #364]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0x324>
 8002c58:	4b58      	ldr	r3, [pc, #352]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	4a57      	ldr	r2, [pc, #348]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6713      	str	r3, [r2, #112]	; 0x70
 8002c64:	4b55      	ldr	r3, [pc, #340]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a54      	ldr	r2, [pc, #336]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c6a:	f023 0304 	bic.w	r3, r3, #4
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d015      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe fb0a 	bl	8001290 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f7fe fb06 	bl	8001290 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0cb      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	4b49      	ldr	r3, [pc, #292]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0ee      	beq.n	8002c80 <HAL_RCC_OscConfig+0x334>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca4:	f7fe faf4 	bl	8001290 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fe faf0 	bl	8001290 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0b5      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc2:	4b3e      	ldr	r3, [pc, #248]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1ee      	bne.n	8002cac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd4:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	4a38      	ldr	r2, [pc, #224]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a1 	beq.w	8002e2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cea:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d05c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d141      	bne.n	8002d82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_RCC_OscConfig+0x478>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fac4 	bl	8001290 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe fac0 	bl	8001290 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e087      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	019b      	lsls	r3, r3, #6
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	491b      	ldr	r1, [pc, #108]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x478>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7fe fa99 	bl	8001290 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d62:	f7fe fa95 	bl	8001290 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e05c      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x416>
 8002d80:	e054      	b.n	8002e2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_RCC_OscConfig+0x478>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fa82 	bl	8001290 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe fa7e 	bl	8001290 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e045      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x444>
 8002dae:	e03d      	b.n	8002e2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e038      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d028      	beq.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d121      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d11a      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d111      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	3b01      	subs	r3, #1
 8002e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0cc      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d90c      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b65      	ldr	r3, [pc, #404]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b63      	ldr	r3, [pc, #396]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0b8      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a58      	ldr	r2, [pc, #352]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea8:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a52      	ldr	r2, [pc, #328]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	494d      	ldr	r1, [pc, #308]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d044      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d119      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e07f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e067      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4934      	ldr	r1, [pc, #208]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f2c:	f7fe f9b0 	bl	8001290 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fe f9ac 	bl	8001290 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e04f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d20c      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e032      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4916      	ldr	r1, [pc, #88]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fae:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fc2:	f000 f821 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	490a      	ldr	r1, [pc, #40]	; (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	5ccb      	ldrb	r3, [r1, r3]
 8002fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe f808 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023c00 	.word	0x40023c00
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	080080f0 	.word	0x080080f0
 8003000:	20000000 	.word	0x20000000
 8003004:	20000004 	.word	0x20000004

08003008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800300c:	b090      	sub	sp, #64	; 0x40
 800300e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
 8003014:	2300      	movs	r3, #0
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003018:	2300      	movs	r3, #0
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b08      	cmp	r3, #8
 800302a:	d00d      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x40>
 800302c:	2b08      	cmp	r3, #8
 800302e:	f200 80a1 	bhi.w	8003174 <HAL_RCC_GetSysClockFreq+0x16c>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x34>
 8003036:	2b04      	cmp	r3, #4
 8003038:	d003      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x3a>
 800303a:	e09b      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b53      	ldr	r3, [pc, #332]	; (800318c <HAL_RCC_GetSysClockFreq+0x184>)
 800303e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003040:	e09b      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003042:	4b53      	ldr	r3, [pc, #332]	; (8003190 <HAL_RCC_GetSysClockFreq+0x188>)
 8003044:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003046:	e098      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003048:	4b4f      	ldr	r3, [pc, #316]	; (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003052:	4b4d      	ldr	r3, [pc, #308]	; (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d028      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305e:	4b4a      	ldr	r3, [pc, #296]	; (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	2200      	movs	r2, #0
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	627a      	str	r2, [r7, #36]	; 0x24
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003070:	2100      	movs	r1, #0
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCC_GetSysClockFreq+0x188>)
 8003074:	fb03 f201 	mul.w	r2, r3, r1
 8003078:	2300      	movs	r3, #0
 800307a:	fb00 f303 	mul.w	r3, r0, r3
 800307e:	4413      	add	r3, r2
 8003080:	4a43      	ldr	r2, [pc, #268]	; (8003190 <HAL_RCC_GetSysClockFreq+0x188>)
 8003082:	fba0 1202 	umull	r1, r2, r0, r2
 8003086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003088:	460a      	mov	r2, r1
 800308a:	62ba      	str	r2, [r7, #40]	; 0x28
 800308c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800308e:	4413      	add	r3, r2
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003094:	2200      	movs	r2, #0
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	61fa      	str	r2, [r7, #28]
 800309a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800309e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030a2:	f7fd f8e5 	bl	8000270 <__aeabi_uldivmod>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4613      	mov	r3, r2
 80030ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ae:	e053      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b0:	4b35      	ldr	r3, [pc, #212]	; (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	2200      	movs	r2, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	617a      	str	r2, [r7, #20]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030c2:	f04f 0b00 	mov.w	fp, #0
 80030c6:	4652      	mov	r2, sl
 80030c8:	465b      	mov	r3, fp
 80030ca:	f04f 0000 	mov.w	r0, #0
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	0159      	lsls	r1, r3, #5
 80030d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d8:	0150      	lsls	r0, r2, #5
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	ebb2 080a 	subs.w	r8, r2, sl
 80030e2:	eb63 090b 	sbc.w	r9, r3, fp
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030fa:	ebb2 0408 	subs.w	r4, r2, r8
 80030fe:	eb63 0509 	sbc.w	r5, r3, r9
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	00eb      	lsls	r3, r5, #3
 800310c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003110:	00e2      	lsls	r2, r4, #3
 8003112:	4614      	mov	r4, r2
 8003114:	461d      	mov	r5, r3
 8003116:	eb14 030a 	adds.w	r3, r4, sl
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	eb45 030b 	adc.w	r3, r5, fp
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800312e:	4629      	mov	r1, r5
 8003130:	028b      	lsls	r3, r1, #10
 8003132:	4621      	mov	r1, r4
 8003134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003138:	4621      	mov	r1, r4
 800313a:	028a      	lsls	r2, r1, #10
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003142:	2200      	movs	r2, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	60fa      	str	r2, [r7, #12]
 8003148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800314c:	f7fd f890 	bl	8000270 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	3301      	adds	r3, #1
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003172:	e002      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCC_GetSysClockFreq+0x184>)
 8003176:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800317c:	4618      	mov	r0, r3
 800317e:	3740      	adds	r7, #64	; 0x40
 8003180:	46bd      	mov	sp, r7
 8003182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	00f42400 	.word	0x00f42400
 8003190:	017d7840 	.word	0x017d7840

08003194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000000 	.word	0x20000000

080031ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031b0:	f7ff fff0 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0a9b      	lsrs	r3, r3, #10
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4903      	ldr	r1, [pc, #12]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40023800 	.word	0x40023800
 80031d0:	08008100 	.word	0x08008100

080031d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	220f      	movs	r2, #15
 80031e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031e4:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_RCC_GetClockConfig+0x5c>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0203 	and.w	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <HAL_RCC_GetClockConfig+0x5c>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <HAL_RCC_GetClockConfig+0x5c>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_RCC_GetClockConfig+0x5c>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	08db      	lsrs	r3, r3, #3
 800320e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_RCC_GetClockConfig+0x60>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0207 	and.w	r2, r3, #7
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	601a      	str	r2, [r3, #0]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	40023c00 	.word	0x40023c00

08003238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e041      	b.n	80032ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f839 	bl	80032d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f000 f9d8 	bl	800362c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d001      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e04e      	b.n	80033a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a23      	ldr	r2, [pc, #140]	; (80033b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d022      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332e:	d01d      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d018      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <HAL_TIM_Base_Start_IT+0xd0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d111      	bne.n	8003390 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b06      	cmp	r3, #6
 800337c:	d010      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	e007      	b.n	80033a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40010000 	.word	0x40010000
 80033b4:	40000400 	.word	0x40000400
 80033b8:	40000800 	.word	0x40000800
 80033bc:	40000c00 	.word	0x40000c00
 80033c0:	40010400 	.word	0x40010400
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40001800 	.word	0x40001800

080033cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d122      	bne.n	8003428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d11b      	bne.n	8003428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0202 	mvn.w	r2, #2
 80033f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f8ee 	bl	80035f0 <HAL_TIM_IC_CaptureCallback>
 8003414:	e005      	b.n	8003422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f8e0 	bl	80035dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f8f1 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b04      	cmp	r3, #4
 8003434:	d122      	bne.n	800347c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b04      	cmp	r3, #4
 8003442:	d11b      	bne.n	800347c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0204 	mvn.w	r2, #4
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f8c4 	bl	80035f0 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8b6 	bl	80035dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8c7 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b08      	cmp	r3, #8
 8003488:	d122      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b08      	cmp	r3, #8
 8003496:	d11b      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0208 	mvn.w	r2, #8
 80034a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2204      	movs	r2, #4
 80034a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f89a 	bl	80035f0 <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f88c 	bl	80035dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f89d 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b10      	cmp	r3, #16
 80034dc:	d122      	bne.n	8003524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d11b      	bne.n	8003524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0210 	mvn.w	r2, #16
 80034f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2208      	movs	r2, #8
 80034fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f870 	bl	80035f0 <HAL_TIM_IC_CaptureCallback>
 8003510:	e005      	b.n	800351e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f862 	bl	80035dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f873 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d107      	bne.n	8003550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0201 	mvn.w	r2, #1
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd fc84 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355a:	2b80      	cmp	r3, #128	; 0x80
 800355c:	d10e      	bne.n	800357c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d107      	bne.n	800357c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f902 	bl	8003780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d10e      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d107      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f838 	bl	8003618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d10e      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d107      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0220 	mvn.w	r2, #32
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8cc 	bl	800376c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a40      	ldr	r2, [pc, #256]	; (8003740 <TIM_Base_SetConfig+0x114>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d013      	beq.n	800366c <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364a:	d00f      	beq.n	800366c <TIM_Base_SetConfig+0x40>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a3d      	ldr	r2, [pc, #244]	; (8003744 <TIM_Base_SetConfig+0x118>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00b      	beq.n	800366c <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a3c      	ldr	r2, [pc, #240]	; (8003748 <TIM_Base_SetConfig+0x11c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <TIM_Base_SetConfig+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a3b      	ldr	r2, [pc, #236]	; (800374c <TIM_Base_SetConfig+0x120>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_Base_SetConfig+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a3a      	ldr	r2, [pc, #232]	; (8003750 <TIM_Base_SetConfig+0x124>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d108      	bne.n	800367e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a2f      	ldr	r2, [pc, #188]	; (8003740 <TIM_Base_SetConfig+0x114>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d02b      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d027      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a2c      	ldr	r2, [pc, #176]	; (8003744 <TIM_Base_SetConfig+0x118>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d023      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <TIM_Base_SetConfig+0x11c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d01f      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2a      	ldr	r2, [pc, #168]	; (800374c <TIM_Base_SetConfig+0x120>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d01b      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a29      	ldr	r2, [pc, #164]	; (8003750 <TIM_Base_SetConfig+0x124>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d017      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a28      	ldr	r2, [pc, #160]	; (8003754 <TIM_Base_SetConfig+0x128>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a27      	ldr	r2, [pc, #156]	; (8003758 <TIM_Base_SetConfig+0x12c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00f      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a26      	ldr	r2, [pc, #152]	; (800375c <TIM_Base_SetConfig+0x130>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00b      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a25      	ldr	r2, [pc, #148]	; (8003760 <TIM_Base_SetConfig+0x134>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d007      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a24      	ldr	r2, [pc, #144]	; (8003764 <TIM_Base_SetConfig+0x138>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d003      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a23      	ldr	r2, [pc, #140]	; (8003768 <TIM_Base_SetConfig+0x13c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d108      	bne.n	80036f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <TIM_Base_SetConfig+0x114>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_Base_SetConfig+0xf8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <TIM_Base_SetConfig+0x124>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d103      	bne.n	800372c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	615a      	str	r2, [r3, #20]
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40010000 	.word	0x40010000
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800
 800374c:	40000c00 	.word	0x40000c00
 8003750:	40010400 	.word	0x40010400
 8003754:	40014000 	.word	0x40014000
 8003758:	40014400 	.word	0x40014400
 800375c:	40014800 	.word	0x40014800
 8003760:	40001800 	.word	0x40001800
 8003764:	40001c00 	.word	0x40001c00
 8003768:	40002000 	.word	0x40002000

0800376c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <__NVIC_SetPriority>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db0a      	blt.n	80037be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	490c      	ldr	r1, [pc, #48]	; (80037e0 <__NVIC_SetPriority+0x4c>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037bc:	e00a      	b.n	80037d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4908      	ldr	r1, [pc, #32]	; (80037e4 <__NVIC_SetPriority+0x50>)
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3b04      	subs	r3, #4
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	761a      	strb	r2, [r3, #24]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <SysTick_Handler+0x1c>)
 80037ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80037f0:	f002 fce6 	bl	80061c0 <xTaskGetSchedulerState>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d001      	beq.n	80037fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80037fa:	f003 fbcd 	bl	8006f98 <xPortSysTickHandler>
  }
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	e000e010 	.word	0xe000e010

08003808 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800380c:	2100      	movs	r1, #0
 800380e:	f06f 0004 	mvn.w	r0, #4
 8003812:	f7ff ffbf 	bl	8003794 <__NVIC_SetPriority>
#endif
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003822:	f3ef 8305 	mrs	r3, IPSR
 8003826:	603b      	str	r3, [r7, #0]
  return(result);
 8003828:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800382e:	f06f 0305 	mvn.w	r3, #5
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	e00c      	b.n	8003850 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <osKernelInitialize+0x44>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <osKernelInitialize+0x44>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003844:	2300      	movs	r3, #0
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	e002      	b.n	8003850 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003850:	687b      	ldr	r3, [r7, #4]
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000198 	.word	0x20000198

08003864 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800386a:	f3ef 8305 	mrs	r3, IPSR
 800386e:	603b      	str	r3, [r7, #0]
  return(result);
 8003870:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003876:	f06f 0305 	mvn.w	r3, #5
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	e010      	b.n	80038a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <osKernelStart+0x48>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d109      	bne.n	800389a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003886:	f7ff ffbf 	bl	8003808 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800388a:	4b08      	ldr	r3, [pc, #32]	; (80038ac <osKernelStart+0x48>)
 800388c:	2202      	movs	r2, #2
 800388e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003890:	f002 f82a 	bl	80058e8 <vTaskStartScheduler>
      stat = osOK;
 8003894:	2300      	movs	r3, #0
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	e002      	b.n	80038a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038a0:	687b      	ldr	r3, [r7, #4]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000198 	.word	0x20000198

080038b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08e      	sub	sp, #56	; 0x38
 80038b4:	af04      	add	r7, sp, #16
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038c0:	f3ef 8305 	mrs	r3, IPSR
 80038c4:	617b      	str	r3, [r7, #20]
  return(result);
 80038c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d17e      	bne.n	80039ca <osThreadNew+0x11a>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d07b      	beq.n	80039ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038d6:	2318      	movs	r3, #24
 80038d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d045      	beq.n	8003976 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <osThreadNew+0x48>
        name = attr->name;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <osThreadNew+0x6e>
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b38      	cmp	r3, #56	; 0x38
 8003910:	d805      	bhi.n	800391e <osThreadNew+0x6e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <osThreadNew+0x72>
        return (NULL);
 800391e:	2300      	movs	r3, #0
 8003920:	e054      	b.n	80039cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	089b      	lsrs	r3, r3, #2
 8003930:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00e      	beq.n	8003958 <osThreadNew+0xa8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2ba7      	cmp	r3, #167	; 0xa7
 8003940:	d90a      	bls.n	8003958 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003946:	2b00      	cmp	r3, #0
 8003948:	d006      	beq.n	8003958 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <osThreadNew+0xa8>
        mem = 1;
 8003952:	2301      	movs	r3, #1
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e010      	b.n	800397a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10c      	bne.n	800397a <osThreadNew+0xca>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d108      	bne.n	800397a <osThreadNew+0xca>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d104      	bne.n	800397a <osThreadNew+0xca>
          mem = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e001      	b.n	800397a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d110      	bne.n	80039a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003988:	9202      	str	r2, [sp, #8]
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f001 fd48 	bl	800542c <xTaskCreateStatic>
 800399c:	4603      	mov	r3, r0
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	e013      	b.n	80039ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d110      	bne.n	80039ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f001 fd93 	bl	80054e6 <xTaskCreate>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d001      	beq.n	80039ca <osThreadNew+0x11a>
            hTask = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039ca:	693b      	ldr	r3, [r7, #16]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80039d8:	2000      	movs	r0, #0
 80039da:	f001 fedf 	bl	800579c <vTaskDelete>
#endif
  for (;;);
 80039de:	e7fe      	b.n	80039de <osThreadExit+0xa>

080039e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e8:	f3ef 8305 	mrs	r3, IPSR
 80039ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80039ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <osDelay+0x1c>
    stat = osErrorISR;
 80039f4:	f06f 0305 	mvn.w	r3, #5
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	e007      	b.n	8003a0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f001 ff3a 	bl	8005880 <vTaskDelay>
    }
  }

  return (stat);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b088      	sub	sp, #32
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a22:	f3ef 8305 	mrs	r3, IPSR
 8003a26:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a28:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d174      	bne.n	8003b18 <osMutexNew+0x102>
    if (attr != NULL) {
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <osMutexNew+0x26>
      type = attr->attr_bits;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e001      	b.n	8003a40 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <osMutexNew+0x3a>
      rmtx = 1U;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e001      	b.n	8003a54 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d15c      	bne.n	8003b18 <osMutexNew+0x102>
      mem = -1;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d015      	beq.n	8003a96 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d006      	beq.n	8003a80 <osMutexNew+0x6a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b4f      	cmp	r3, #79	; 0x4f
 8003a78:	d902      	bls.n	8003a80 <osMutexNew+0x6a>
          mem = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	e00c      	b.n	8003a9a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d108      	bne.n	8003a9a <osMutexNew+0x84>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d104      	bne.n	8003a9a <osMutexNew+0x84>
            mem = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	e001      	b.n	8003a9a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d112      	bne.n	8003ac6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	2004      	movs	r0, #4
 8003aae:	f000 fd68 	bl	8004582 <xQueueCreateMutexStatic>
 8003ab2:	61f8      	str	r0, [r7, #28]
 8003ab4:	e016      	b.n	8003ae4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	4619      	mov	r1, r3
 8003abc:	2001      	movs	r0, #1
 8003abe:	f000 fd60 	bl	8004582 <xQueueCreateMutexStatic>
 8003ac2:	61f8      	str	r0, [r7, #28]
 8003ac4:	e00e      	b.n	8003ae4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d004      	beq.n	8003adc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003ad2:	2004      	movs	r0, #4
 8003ad4:	f000 fd3d 	bl	8004552 <xQueueCreateMutex>
 8003ad8:	61f8      	str	r0, [r7, #28]
 8003ada:	e003      	b.n	8003ae4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003adc:	2001      	movs	r0, #1
 8003ade:	f000 fd38 	bl	8004552 <xQueueCreateMutex>
 8003ae2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00c      	beq.n	8003b04 <osMutexNew+0xee>
        if (attr != NULL) {
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <osMutexNew+0xe2>
          name = attr->name;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e001      	b.n	8003afc <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003afc:	68f9      	ldr	r1, [r7, #12]
 8003afe:	69f8      	ldr	r0, [r7, #28]
 8003b00:	f001 fc0c 	bl	800531c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <osMutexNew+0x102>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003b18:	69fb      	ldr	r3, [r7, #28]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b086      	sub	sp, #24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b40:	f3ef 8305 	mrs	r3, IPSR
 8003b44:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b46:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003b4c:	f06f 0305 	mvn.w	r3, #5
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e02c      	b.n	8003bae <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003b5a:	f06f 0303 	mvn.w	r3, #3
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	e025      	b.n	8003bae <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d011      	beq.n	8003b8c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003b68:	6839      	ldr	r1, [r7, #0]
 8003b6a:	6938      	ldr	r0, [r7, #16]
 8003b6c:	f000 fd58 	bl	8004620 <xQueueTakeMutexRecursive>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d01b      	beq.n	8003bae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003b7c:	f06f 0301 	mvn.w	r3, #1
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	e014      	b.n	8003bae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003b84:	f06f 0302 	mvn.w	r3, #2
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	e010      	b.n	8003bae <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003b8c:	6839      	ldr	r1, [r7, #0]
 8003b8e:	6938      	ldr	r0, [r7, #16]
 8003b90:	f001 f8ec 	bl	8004d6c <xQueueSemaphoreTake>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d009      	beq.n	8003bae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003ba0:	f06f 0301 	mvn.w	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e002      	b.n	8003bae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003ba8:	f06f 0302 	mvn.w	r3, #2
 8003bac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003bae:	697b      	ldr	r3, [r7, #20]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bd4:	f3ef 8305 	mrs	r3, IPSR
 8003bd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bda:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003be0:	f06f 0305 	mvn.w	r3, #5
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e01f      	b.n	8003c28 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d103      	bne.n	8003bf6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003bee:	f06f 0303 	mvn.w	r3, #3
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	e018      	b.n	8003c28 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003bfc:	6938      	ldr	r0, [r7, #16]
 8003bfe:	f000 fcdb 	bl	80045b8 <xQueueGiveMutexRecursive>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d00f      	beq.n	8003c28 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003c08:	f06f 0302 	mvn.w	r3, #2
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	e00b      	b.n	8003c28 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003c10:	2300      	movs	r3, #0
 8003c12:	2200      	movs	r2, #0
 8003c14:	2100      	movs	r1, #0
 8003c16:	6938      	ldr	r0, [r7, #16]
 8003c18:	f000 fda2 	bl	8004760 <xQueueGenericSend>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d002      	beq.n	8003c28 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003c22:	f06f 0302 	mvn.w	r3, #2
 8003c26:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003c28:	697b      	ldr	r3, [r7, #20]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b08a      	sub	sp, #40	; 0x28
 8003c36:	af02      	add	r7, sp, #8
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c42:	f3ef 8305 	mrs	r3, IPSR
 8003c46:	613b      	str	r3, [r7, #16]
  return(result);
 8003c48:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d175      	bne.n	8003d3a <osSemaphoreNew+0x108>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d072      	beq.n	8003d3a <osSemaphoreNew+0x108>
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d86e      	bhi.n	8003d3a <osSemaphoreNew+0x108>
    mem = -1;
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d006      	beq.n	8003c7e <osSemaphoreNew+0x4c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b4f      	cmp	r3, #79	; 0x4f
 8003c76:	d902      	bls.n	8003c7e <osSemaphoreNew+0x4c>
        mem = 1;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	e00c      	b.n	8003c98 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d108      	bne.n	8003c98 <osSemaphoreNew+0x66>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d104      	bne.n	8003c98 <osSemaphoreNew+0x66>
          mem = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	e001      	b.n	8003c98 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d04c      	beq.n	8003d3a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d128      	bne.n	8003cf8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d10a      	bne.n	8003cc2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	9200      	str	r2, [sp, #0]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	2001      	movs	r0, #1
 8003cba:	f000 fb5b 	bl	8004374 <xQueueGenericCreateStatic>
 8003cbe:	61f8      	str	r0, [r7, #28]
 8003cc0:	e005      	b.n	8003cce <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f000 fbcc 	bl	8004464 <xQueueGenericCreate>
 8003ccc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d022      	beq.n	8003d1a <osSemaphoreNew+0xe8>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01f      	beq.n	8003d1a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2100      	movs	r1, #0
 8003ce0:	69f8      	ldr	r0, [r7, #28]
 8003ce2:	f000 fd3d 	bl	8004760 <xQueueGenericSend>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d016      	beq.n	8003d1a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003cec:	69f8      	ldr	r0, [r7, #28]
 8003cee:	f001 f9c9 	bl	8005084 <vQueueDelete>
            hSemaphore = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e010      	b.n	8003d1a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d108      	bne.n	8003d10 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fcc0 	bl	800468c <xQueueCreateCountingSemaphoreStatic>
 8003d0c:	61f8      	str	r0, [r7, #28]
 8003d0e:	e004      	b.n	8003d1a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fcf1 	bl	80046fa <xQueueCreateCountingSemaphore>
 8003d18:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00c      	beq.n	8003d3a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <osSemaphoreNew+0xfc>
          name = attr->name;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	e001      	b.n	8003d32 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003d32:	6979      	ldr	r1, [r7, #20]
 8003d34:	69f8      	ldr	r0, [r7, #28]
 8003d36:	f001 faf1 	bl	800531c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003d3a:	69fb      	ldr	r3, [r7, #28]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d103      	bne.n	8003d64 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003d5c:	f06f 0303 	mvn.w	r3, #3
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e039      	b.n	8003dd8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d64:	f3ef 8305 	mrs	r3, IPSR
 8003d68:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d022      	beq.n	8003db6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003d76:	f06f 0303 	mvn.w	r3, #3
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e02c      	b.n	8003dd8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003d82:	f107 0308 	add.w	r3, r7, #8
 8003d86:	461a      	mov	r2, r3
 8003d88:	2100      	movs	r1, #0
 8003d8a:	6938      	ldr	r0, [r7, #16]
 8003d8c:	f001 f8fa 	bl	8004f84 <xQueueReceiveFromISR>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d003      	beq.n	8003d9e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003d96:	f06f 0302 	mvn.w	r3, #2
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e01c      	b.n	8003dd8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d019      	beq.n	8003dd8 <osSemaphoreAcquire+0x94>
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <osSemaphoreAcquire+0xa0>)
 8003da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	e010      	b.n	8003dd8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003db6:	6839      	ldr	r1, [r7, #0]
 8003db8:	6938      	ldr	r0, [r7, #16]
 8003dba:	f000 ffd7 	bl	8004d6c <xQueueSemaphoreTake>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d009      	beq.n	8003dd8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003dca:	f06f 0301 	mvn.w	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e002      	b.n	8003dd8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003dd2:	f06f 0302 	mvn.w	r3, #2
 8003dd6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003dd8:	697b      	ldr	r3, [r7, #20]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003dfe:	f06f 0303 	mvn.w	r3, #3
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e02c      	b.n	8003e60 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e06:	f3ef 8305 	mrs	r3, IPSR
 8003e0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01a      	beq.n	8003e48 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e16:	f107 0308 	add.w	r3, r7, #8
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6938      	ldr	r0, [r7, #16]
 8003e1e:	f000 fe38 	bl	8004a92 <xQueueGiveFromISR>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d003      	beq.n	8003e30 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003e28:	f06f 0302 	mvn.w	r3, #2
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e017      	b.n	8003e60 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d014      	beq.n	8003e60 <osSemaphoreRelease+0x78>
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <osSemaphoreRelease+0x84>)
 8003e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	e00b      	b.n	8003e60 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	6938      	ldr	r0, [r7, #16]
 8003e50:	f000 fc86 	bl	8004760 <xQueueGenericSend>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d002      	beq.n	8003e60 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003e5a:	f06f 0302 	mvn.w	r3, #2
 8003e5e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003e60:	697b      	ldr	r3, [r7, #20]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e80:	f3ef 8305 	mrs	r3, IPSR
 8003e84:	613b      	str	r3, [r7, #16]
  return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d15f      	bne.n	8003f4c <osMessageQueueNew+0xdc>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d05c      	beq.n	8003f4c <osMessageQueueNew+0xdc>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d059      	beq.n	8003f4c <osMessageQueueNew+0xdc>
    mem = -1;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d029      	beq.n	8003ef8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d012      	beq.n	8003ed2 <osMessageQueueNew+0x62>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b4f      	cmp	r3, #79	; 0x4f
 8003eb2:	d90e      	bls.n	8003ed2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d302      	bcc.n	8003ed2 <osMessageQueueNew+0x62>
        mem = 1;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e014      	b.n	8003efc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d110      	bne.n	8003efc <osMessageQueueNew+0x8c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10c      	bne.n	8003efc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d108      	bne.n	8003efc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <osMessageQueueNew+0x8c>
          mem = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	e001      	b.n	8003efc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d10b      	bne.n	8003f1a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	9100      	str	r1, [sp, #0]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fa2f 	bl	8004374 <xQueueGenericCreateStatic>
 8003f16:	61f8      	str	r0, [r7, #28]
 8003f18:	e008      	b.n	8003f2c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d105      	bne.n	8003f2c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003f20:	2200      	movs	r2, #0
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fa9d 	bl	8004464 <xQueueGenericCreate>
 8003f2a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	e001      	b.n	8003f44 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003f44:	6979      	ldr	r1, [r7, #20]
 8003f46:	69f8      	ldr	r0, [r7, #28]
 8003f48:	f001 f9e8 	bl	800531c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003f4c:	69fb      	ldr	r3, [r7, #28]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f70:	f3ef 8305 	mrs	r3, IPSR
 8003f74:	617b      	str	r3, [r7, #20]
  return(result);
 8003f76:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d028      	beq.n	8003fce <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <osMessageQueuePut+0x36>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <osMessageQueuePut+0x36>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003f8e:	f06f 0303 	mvn.w	r3, #3
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e038      	b.n	8004008 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003f9a:	f107 0210 	add.w	r2, r7, #16
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	69b8      	ldr	r0, [r7, #24]
 8003fa4:	f000 fcda 	bl	800495c <xQueueGenericSendFromISR>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d003      	beq.n	8003fb6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003fae:	f06f 0302 	mvn.w	r3, #2
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e028      	b.n	8004008 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d025      	beq.n	8004008 <osMessageQueuePut+0xb0>
 8003fbc:	4b15      	ldr	r3, [pc, #84]	; (8004014 <osMessageQueuePut+0xbc>)
 8003fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	e01c      	b.n	8004008 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <osMessageQueuePut+0x82>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003fda:	f06f 0303 	mvn.w	r3, #3
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	e012      	b.n	8004008 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	69b8      	ldr	r0, [r7, #24]
 8003fea:	f000 fbb9 	bl	8004760 <xQueueGenericSend>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d009      	beq.n	8004008 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003ffa:	f06f 0301 	mvn.w	r3, #1
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	e002      	b.n	8004008 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004002:	f06f 0302 	mvn.w	r3, #2
 8004006:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004008:	69fb      	ldr	r3, [r7, #28]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800402e:	f3ef 8305 	mrs	r3, IPSR
 8004032:	617b      	str	r3, [r7, #20]
  return(result);
 8004034:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004036:	2b00      	cmp	r3, #0
 8004038:	d028      	beq.n	800408c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <osMessageQueueGet+0x34>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <osMessageQueueGet+0x34>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800404c:	f06f 0303 	mvn.w	r3, #3
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e037      	b.n	80040c4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004058:	f107 0310 	add.w	r3, r7, #16
 800405c:	461a      	mov	r2, r3
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	69b8      	ldr	r0, [r7, #24]
 8004062:	f000 ff8f 	bl	8004f84 <xQueueReceiveFromISR>
 8004066:	4603      	mov	r3, r0
 8004068:	2b01      	cmp	r3, #1
 800406a:	d003      	beq.n	8004074 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800406c:	f06f 0302 	mvn.w	r3, #2
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	e027      	b.n	80040c4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d024      	beq.n	80040c4 <osMessageQueueGet+0xac>
 800407a:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <osMessageQueueGet+0xb8>)
 800407c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	e01b      	b.n	80040c4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <osMessageQueueGet+0x80>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004098:	f06f 0303 	mvn.w	r3, #3
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	e011      	b.n	80040c4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	69b8      	ldr	r0, [r7, #24]
 80040a6:	f000 fd81 	bl	8004bac <xQueueReceive>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d009      	beq.n	80040c4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80040b6:	f06f 0301 	mvn.w	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	e002      	b.n	80040c4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80040be:	f06f 0302 	mvn.w	r3, #2
 80040c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80040c4:	69fb      	ldr	r3, [r7, #28]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	e000ed04 	.word	0xe000ed04

080040d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a07      	ldr	r2, [pc, #28]	; (8004100 <vApplicationGetIdleTaskMemory+0x2c>)
 80040e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4a06      	ldr	r2, [pc, #24]	; (8004104 <vApplicationGetIdleTaskMemory+0x30>)
 80040ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2280      	movs	r2, #128	; 0x80
 80040f0:	601a      	str	r2, [r3, #0]
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	2000019c 	.word	0x2000019c
 8004104:	20000244 	.word	0x20000244

08004108 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4a07      	ldr	r2, [pc, #28]	; (8004134 <vApplicationGetTimerTaskMemory+0x2c>)
 8004118:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	4a06      	ldr	r2, [pc, #24]	; (8004138 <vApplicationGetTimerTaskMemory+0x30>)
 800411e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004126:	601a      	str	r2, [r3, #0]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	20000444 	.word	0x20000444
 8004138:	200004ec 	.word	0x200004ec

0800413c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f103 0208 	add.w	r2, r3, #8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f04f 32ff 	mov.w	r2, #4294967295
 8004154:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f103 0208 	add.w	r2, r3, #8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f103 0208 	add.w	r2, r3, #8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004196:	b480      	push	{r7}
 8004198:	b085      	sub	sp, #20
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	601a      	str	r2, [r3, #0]
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d103      	bne.n	80041fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e00c      	b.n	8004218 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3308      	adds	r3, #8
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e002      	b.n	800420c <vListInsert+0x2e>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	d2f6      	bcs.n	8004206 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	601a      	str	r2, [r3, #0]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6892      	ldr	r2, [r2, #8]
 8004266:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6852      	ldr	r2, [r2, #4]
 8004270:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	d103      	bne.n	8004284 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1e5a      	subs	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80042ce:	f002 fdd1 	bl	8006e74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	68f9      	ldr	r1, [r7, #12]
 80042dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	441a      	add	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	3b01      	subs	r3, #1
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	441a      	add	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	22ff      	movs	r2, #255	; 0xff
 8004312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	22ff      	movs	r2, #255	; 0xff
 800431a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d114      	bne.n	800434e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01a      	beq.n	8004362 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3310      	adds	r3, #16
 8004330:	4618      	mov	r0, r3
 8004332:	f001 fd73 	bl	8005e1c <xTaskRemoveFromEventList>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d012      	beq.n	8004362 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <xQueueGenericReset+0xcc>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	e009      	b.n	8004362 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3310      	adds	r3, #16
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff fef2 	bl	800413c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3324      	adds	r3, #36	; 0x24
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff feed 	bl	800413c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004362:	f002 fdb7 	bl	8006ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004366:	2301      	movs	r3, #1
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08e      	sub	sp, #56	; 0x38
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10a      	bne.n	800439e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800439a:	bf00      	nop
 800439c:	e7fe      	b.n	800439c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043b6:	bf00      	nop
 80043b8:	e7fe      	b.n	80043b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <xQueueGenericCreateStatic+0x52>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <xQueueGenericCreateStatic+0x56>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <xQueueGenericCreateStatic+0x58>
 80043ca:	2300      	movs	r3, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	623b      	str	r3, [r7, #32]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <xQueueGenericCreateStatic+0x7e>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <xQueueGenericCreateStatic+0x82>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <xQueueGenericCreateStatic+0x84>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	61fb      	str	r3, [r7, #28]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004412:	2350      	movs	r3, #80	; 0x50
 8004414:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b50      	cmp	r3, #80	; 0x50
 800441a:	d00a      	beq.n	8004432 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	61bb      	str	r3, [r7, #24]
}
 800442e:	bf00      	nop
 8004430:	e7fe      	b.n	8004430 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004432:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004446:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f83f 	bl	80044d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800445c:	4618      	mov	r0, r3
 800445e:	3730      	adds	r7, #48	; 0x30
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	4613      	mov	r3, r2
 8004470:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	613b      	str	r3, [r7, #16]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	3350      	adds	r3, #80	; 0x50
 800449c:	4618      	mov	r0, r3
 800449e:	f002 fe0b 	bl	80070b8 <pvPortMalloc>
 80044a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d011      	beq.n	80044ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	3350      	adds	r3, #80	; 0x50
 80044b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044bc:	79fa      	ldrb	r2, [r7, #7]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f805 	bl	80044d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044ce:	69bb      	ldr	r3, [r7, #24]
	}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d103      	bne.n	80044f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e002      	b.n	80044fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004506:	2101      	movs	r1, #1
 8004508:	69b8      	ldr	r0, [r7, #24]
 800450a:	f7ff fecb 	bl	80042a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00e      	beq.n	800454a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800453e:	2300      	movs	r3, #0
 8004540:	2200      	movs	r2, #0
 8004542:	2100      	movs	r1, #0
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f90b 	bl	8004760 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004552:	b580      	push	{r7, lr}
 8004554:	b086      	sub	sp, #24
 8004556:	af00      	add	r7, sp, #0
 8004558:	4603      	mov	r3, r0
 800455a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800455c:	2301      	movs	r3, #1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	461a      	mov	r2, r3
 8004568:	6939      	ldr	r1, [r7, #16]
 800456a:	6978      	ldr	r0, [r7, #20]
 800456c:	f7ff ff7a 	bl	8004464 <xQueueGenericCreate>
 8004570:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff ffd3 	bl	800451e <prvInitialiseMutex>

		return xNewQueue;
 8004578:	68fb      	ldr	r3, [r7, #12]
	}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004582:	b580      	push	{r7, lr}
 8004584:	b088      	sub	sp, #32
 8004586:	af02      	add	r7, sp, #8
 8004588:	4603      	mov	r3, r0
 800458a:	6039      	str	r1, [r7, #0]
 800458c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2200      	movs	r2, #0
 800459e:	6939      	ldr	r1, [r7, #16]
 80045a0:	6978      	ldr	r0, [r7, #20]
 80045a2:	f7ff fee7 	bl	8004374 <xQueueGenericCreateStatic>
 80045a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7ff ffb8 	bl	800451e <prvInitialiseMutex>

		return xNewQueue;
 80045ae:	68fb      	ldr	r3, [r7, #12]
	}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	60fb      	str	r3, [r7, #12]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	689c      	ldr	r4, [r3, #8]
 80045e4:	f001 fddc 	bl	80061a0 <xTaskGetCurrentTaskHandle>
 80045e8:	4603      	mov	r3, r0
 80045ea:	429c      	cmp	r4, r3
 80045ec:	d111      	bne.n	8004612 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	1e5a      	subs	r2, r3, #1
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004600:	2300      	movs	r3, #0
 8004602:	2200      	movs	r2, #0
 8004604:	2100      	movs	r1, #0
 8004606:	6938      	ldr	r0, [r7, #16]
 8004608:	f000 f8aa 	bl	8004760 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800460c:	2301      	movs	r3, #1
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e001      	b.n	8004616 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004616:	697b      	ldr	r3, [r7, #20]
	}
 8004618:	4618      	mov	r0, r3
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}

08004620 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	60fb      	str	r3, [r7, #12]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	689c      	ldr	r4, [r3, #8]
 800464e:	f001 fda7 	bl	80061a0 <xTaskGetCurrentTaskHandle>
 8004652:	4603      	mov	r3, r0
 8004654:	429c      	cmp	r4, r3
 8004656:	d107      	bne.n	8004668 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004662:	2301      	movs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e00c      	b.n	8004682 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	6938      	ldr	r0, [r7, #16]
 800466c:	f000 fb7e 	bl	8004d6c <xQueueSemaphoreTake>
 8004670:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004682:	697b      	ldr	r3, [r7, #20]
	}
 8004684:	4618      	mov	r0, r3
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	bd90      	pop	{r4, r7, pc}

0800468c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	61bb      	str	r3, [r7, #24]
}
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d90a      	bls.n	80046d2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	617b      	str	r3, [r7, #20]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80046d2:	2302      	movs	r3, #2
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	2100      	movs	r1, #0
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7ff fe49 	bl	8004374 <xQueueGenericCreateStatic>
 80046e2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80046f0:	69fb      	ldr	r3, [r7, #28]
	}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	613b      	str	r3, [r7, #16]
}
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	429a      	cmp	r2, r3
 8004726:	d90a      	bls.n	800473e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	60fb      	str	r3, [r7, #12]
}
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800473e:	2202      	movs	r2, #2
 8004740:	2100      	movs	r1, #0
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fe8e 	bl	8004464 <xQueueGenericCreate>
 8004748:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004756:	697b      	ldr	r3, [r7, #20]
	}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08e      	sub	sp, #56	; 0x38
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800476e:	2300      	movs	r3, #0
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <xQueueGenericSend+0x32>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <xQueueGenericSend+0x40>
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <xQueueGenericSend+0x44>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <xQueueGenericSend+0x46>
 80047a4:	2300      	movs	r3, #0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <xQueueGenericSend+0x60>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d103      	bne.n	80047ce <xQueueGenericSend+0x6e>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <xQueueGenericSend+0x72>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <xQueueGenericSend+0x74>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <xQueueGenericSend+0x8e>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	623b      	str	r3, [r7, #32]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047ee:	f001 fce7 	bl	80061c0 <xTaskGetSchedulerState>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <xQueueGenericSend+0x9e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <xQueueGenericSend+0xa2>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <xQueueGenericSend+0xa4>
 8004802:	2300      	movs	r3, #0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <xQueueGenericSend+0xbe>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	61fb      	str	r3, [r7, #28]
}
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800481e:	f002 fb29 	bl	8006e74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <xQueueGenericSend+0xd4>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d129      	bne.n	8004888 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800483a:	f000 fc5e 	bl	80050fa <prvCopyDataToQueue>
 800483e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	3324      	adds	r3, #36	; 0x24
 800484c:	4618      	mov	r0, r3
 800484e:	f001 fae5 	bl	8005e1c <xTaskRemoveFromEventList>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d013      	beq.n	8004880 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004858:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <xQueueGenericSend+0x1f8>)
 800485a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	e00a      	b.n	8004880 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004870:	4b39      	ldr	r3, [pc, #228]	; (8004958 <xQueueGenericSend+0x1f8>)
 8004872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004880:	f002 fb28 	bl	8006ed4 <vPortExitCritical>
				return pdPASS;
 8004884:	2301      	movs	r3, #1
 8004886:	e063      	b.n	8004950 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800488e:	f002 fb21 	bl	8006ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004892:	2300      	movs	r3, #0
 8004894:	e05c      	b.n	8004950 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800489c:	f107 0314 	add.w	r3, r7, #20
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fb1f 	bl	8005ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048a6:	2301      	movs	r3, #1
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048aa:	f002 fb13 	bl	8006ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048ae:	f001 f88b 	bl	80059c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048b2:	f002 fadf 	bl	8006e74 <vPortEnterCritical>
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048bc:	b25b      	sxtb	r3, r3
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d103      	bne.n	80048cc <xQueueGenericSend+0x16c>
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d2:	b25b      	sxtb	r3, r3
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d103      	bne.n	80048e2 <xQueueGenericSend+0x182>
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048e2:	f002 faf7 	bl	8006ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048e6:	1d3a      	adds	r2, r7, #4
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	4611      	mov	r1, r2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 fb0e 	bl	8005f10 <xTaskCheckForTimeOut>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d124      	bne.n	8004944 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048fc:	f000 fcf5 	bl	80052ea <prvIsQueueFull>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d018      	beq.n	8004938 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	3310      	adds	r3, #16
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f001 fa34 	bl	8005d7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004916:	f000 fc80 	bl	800521a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800491a:	f001 f863 	bl	80059e4 <xTaskResumeAll>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	f47f af7c 	bne.w	800481e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <xQueueGenericSend+0x1f8>)
 8004928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	e772      	b.n	800481e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800493a:	f000 fc6e 	bl	800521a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800493e:	f001 f851 	bl	80059e4 <xTaskResumeAll>
 8004942:	e76c      	b.n	800481e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004946:	f000 fc68 	bl	800521a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800494a:	f001 f84b 	bl	80059e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800494e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004950:	4618      	mov	r0, r3
 8004952:	3738      	adds	r7, #56	; 0x38
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b090      	sub	sp, #64	; 0x40
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d103      	bne.n	8004998 <xQueueGenericSendFromISR+0x3c>
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <xQueueGenericSendFromISR+0x40>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <xQueueGenericSendFromISR+0x42>
 800499c:	2300      	movs	r3, #0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d103      	bne.n	80049c6 <xQueueGenericSendFromISR+0x6a>
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <xQueueGenericSendFromISR+0x6e>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <xQueueGenericSendFromISR+0x70>
 80049ca:	2300      	movs	r3, #0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	623b      	str	r3, [r7, #32]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049e6:	f002 fb27 	bl	8007038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049ea:	f3ef 8211 	mrs	r2, BASEPRI
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	61fa      	str	r2, [r7, #28]
 8004a00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d302      	bcc.n	8004a18 <xQueueGenericSendFromISR+0xbc>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d12f      	bne.n	8004a78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a2e:	f000 fb64 	bl	80050fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d112      	bne.n	8004a62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d016      	beq.n	8004a72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	3324      	adds	r3, #36	; 0x24
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 f9e7 	bl	8005e1c <xTaskRemoveFromEventList>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00e      	beq.n	8004a72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00b      	beq.n	8004a72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e007      	b.n	8004a72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a66:	3301      	adds	r3, #1
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	b25a      	sxtb	r2, r3
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a72:	2301      	movs	r3, #1
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004a76:	e001      	b.n	8004a7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3740      	adds	r7, #64	; 0x40
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b08e      	sub	sp, #56	; 0x38
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	623b      	str	r3, [r7, #32]
}
 8004ab8:	bf00      	nop
 8004aba:	e7fe      	b.n	8004aba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <xQueueGiveFromISR+0x48>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	61fb      	str	r3, [r7, #28]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <xQueueGiveFromISR+0x58>
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <xQueueGiveFromISR+0x5c>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <xQueueGiveFromISR+0x5e>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <xQueueGiveFromISR+0x78>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	61bb      	str	r3, [r7, #24]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b0a:	f002 fa95 	bl	8007038 <vPortValidateInterruptPriority>
	__asm volatile
 8004b0e:	f3ef 8211 	mrs	r2, BASEPRI
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	617a      	str	r2, [r7, #20]
 8004b24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004b26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d22b      	bcs.n	8004b92 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d112      	bne.n	8004b7c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d016      	beq.n	8004b8c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	3324      	adds	r3, #36	; 0x24
 8004b62:	4618      	mov	r0, r3
 8004b64:	f001 f95a 	bl	8005e1c <xTaskRemoveFromEventList>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00e      	beq.n	8004b8c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00b      	beq.n	8004b8c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	e007      	b.n	8004b8c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b80:	3301      	adds	r3, #1
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	b25a      	sxtb	r2, r3
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b90:	e001      	b.n	8004b96 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f383 8811 	msr	BASEPRI, r3
}
 8004ba0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3738      	adds	r7, #56	; 0x38
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08c      	sub	sp, #48	; 0x30
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <xQueueReceive+0x30>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	623b      	str	r3, [r7, #32]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <xQueueReceive+0x3e>
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <xQueueReceive+0x42>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <xQueueReceive+0x44>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <xQueueReceive+0x5e>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	61fb      	str	r3, [r7, #28]
}
 8004c06:	bf00      	nop
 8004c08:	e7fe      	b.n	8004c08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c0a:	f001 fad9 	bl	80061c0 <xTaskGetSchedulerState>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <xQueueReceive+0x6e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <xQueueReceive+0x72>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <xQueueReceive+0x74>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <xQueueReceive+0x8e>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	61bb      	str	r3, [r7, #24]
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c3a:	f002 f91b 	bl	8006e74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01f      	beq.n	8004c8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c4e:	f000 fabe 	bl	80051ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00f      	beq.n	8004c82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	3310      	adds	r3, #16
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 f8d8 	bl	8005e1c <xTaskRemoveFromEventList>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c72:	4b3d      	ldr	r3, [pc, #244]	; (8004d68 <xQueueReceive+0x1bc>)
 8004c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c82:	f002 f927 	bl	8006ed4 <vPortExitCritical>
				return pdPASS;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e069      	b.n	8004d5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c90:	f002 f920 	bl	8006ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c94:	2300      	movs	r3, #0
 8004c96:	e062      	b.n	8004d5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c9e:	f107 0310 	add.w	r3, r7, #16
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 f91e 	bl	8005ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cac:	f002 f912 	bl	8006ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cb0:	f000 fe8a 	bl	80059c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cb4:	f002 f8de 	bl	8006e74 <vPortEnterCritical>
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cbe:	b25b      	sxtb	r3, r3
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d103      	bne.n	8004cce <xQueueReceive+0x122>
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd4:	b25b      	sxtb	r3, r3
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d103      	bne.n	8004ce4 <xQueueReceive+0x138>
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce4:	f002 f8f6 	bl	8006ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ce8:	1d3a      	adds	r2, r7, #4
 8004cea:	f107 0310 	add.w	r3, r7, #16
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f001 f90d 	bl	8005f10 <xTaskCheckForTimeOut>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d123      	bne.n	8004d44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfe:	f000 fade 	bl	80052be <prvIsQueueEmpty>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d017      	beq.n	8004d38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	3324      	adds	r3, #36	; 0x24
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 f833 	bl	8005d7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d18:	f000 fa7f 	bl	800521a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d1c:	f000 fe62 	bl	80059e4 <xTaskResumeAll>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d189      	bne.n	8004c3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <xQueueReceive+0x1bc>)
 8004d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	e780      	b.n	8004c3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3a:	f000 fa6e 	bl	800521a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d3e:	f000 fe51 	bl	80059e4 <xTaskResumeAll>
 8004d42:	e77a      	b.n	8004c3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d46:	f000 fa68 	bl	800521a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d4a:	f000 fe4b 	bl	80059e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d50:	f000 fab5 	bl	80052be <prvIsQueueEmpty>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f43f af6f 	beq.w	8004c3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3730      	adds	r7, #48	; 0x30
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08e      	sub	sp, #56	; 0x38
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	623b      	str	r3, [r7, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	61fb      	str	r3, [r7, #28]
}
 8004db8:	bf00      	nop
 8004dba:	e7fe      	b.n	8004dba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dbc:	f001 fa00 	bl	80061c0 <xTaskGetSchedulerState>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <xQueueSemaphoreTake+0x60>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <xQueueSemaphoreTake+0x64>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <xQueueSemaphoreTake+0x66>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	61bb      	str	r3, [r7, #24]
}
 8004de8:	bf00      	nop
 8004dea:	e7fe      	b.n	8004dea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dec:	f002 f842 	bl	8006e74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d024      	beq.n	8004e46 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	1e5a      	subs	r2, r3, #1
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004e0c:	f001 fb4e 	bl	80064ac <pvTaskIncrementMutexHeldCount>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00f      	beq.n	8004e3e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	3310      	adds	r3, #16
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fffa 	bl	8005e1c <xTaskRemoveFromEventList>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e2e:	4b54      	ldr	r3, [pc, #336]	; (8004f80 <xQueueSemaphoreTake+0x214>)
 8004e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e3e:	f002 f849 	bl	8006ed4 <vPortExitCritical>
				return pdPASS;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e097      	b.n	8004f76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d111      	bne.n	8004e70 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	617b      	str	r3, [r7, #20]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e68:	f002 f834 	bl	8006ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e082      	b.n	8004f76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e76:	f107 030c 	add.w	r3, r7, #12
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f001 f832 	bl	8005ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e84:	f002 f826 	bl	8006ed4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e88:	f000 fd9e 	bl	80059c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e8c:	f001 fff2 	bl	8006e74 <vPortEnterCritical>
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d103      	bne.n	8004ea6 <xQueueSemaphoreTake+0x13a>
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eac:	b25b      	sxtb	r3, r3
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb2:	d103      	bne.n	8004ebc <xQueueSemaphoreTake+0x150>
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ebc:	f002 f80a 	bl	8006ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ec0:	463a      	mov	r2, r7
 8004ec2:	f107 030c 	add.w	r3, r7, #12
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 f821 	bl	8005f10 <xTaskCheckForTimeOut>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d132      	bne.n	8004f3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ed6:	f000 f9f2 	bl	80052be <prvIsQueueEmpty>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d026      	beq.n	8004f2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004ee8:	f001 ffc4 	bl	8006e74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 f983 	bl	80061fc <xTaskPriorityInherit>
 8004ef6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004ef8:	f001 ffec 	bl	8006ed4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	3324      	adds	r3, #36	; 0x24
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 ff39 	bl	8005d7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f0c:	f000 f985 	bl	800521a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f10:	f000 fd68 	bl	80059e4 <xTaskResumeAll>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f47f af68 	bne.w	8004dec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004f1c:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <xQueueSemaphoreTake+0x214>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	e75e      	b.n	8004dec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f30:	f000 f973 	bl	800521a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f34:	f000 fd56 	bl	80059e4 <xTaskResumeAll>
 8004f38:	e758      	b.n	8004dec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f3c:	f000 f96d 	bl	800521a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f40:	f000 fd50 	bl	80059e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f46:	f000 f9ba 	bl	80052be <prvIsQueueEmpty>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f43f af4d 	beq.w	8004dec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00d      	beq.n	8004f74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004f58:	f001 ff8c 	bl	8006e74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f5e:	f000 f8b4 	bl	80050ca <prvGetDisinheritPriorityAfterTimeout>
 8004f62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 fa1c 	bl	80063a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f70:	f001 ffb0 	bl	8006ed4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3738      	adds	r7, #56	; 0x38
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08e      	sub	sp, #56	; 0x38
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	623b      	str	r3, [r7, #32]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <xQueueReceiveFromISR+0x3a>
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <xQueueReceiveFromISR+0x3e>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <xQueueReceiveFromISR+0x40>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	61fb      	str	r3, [r7, #28]
}
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fde:	f002 f82b 	bl	8007038 <vPortValidateInterruptPriority>
	__asm volatile
 8004fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	61ba      	str	r2, [r7, #24]
 8004ff8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ffa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	2b00      	cmp	r3, #0
 8005008:	d02f      	beq.n	800506a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005018:	f000 f8d9 	bl	80051ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	1e5a      	subs	r2, r3, #1
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005024:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d112      	bne.n	8005054 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d016      	beq.n	8005064 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	3310      	adds	r3, #16
 800503a:	4618      	mov	r0, r3
 800503c:	f000 feee 	bl	8005e1c <xTaskRemoveFromEventList>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00e      	beq.n	8005064 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e007      	b.n	8005064 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005058:	3301      	adds	r3, #1
 800505a:	b2db      	uxtb	r3, r3
 800505c:	b25a      	sxtb	r2, r3
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005064:	2301      	movs	r3, #1
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
 8005068:	e001      	b.n	800506e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f383 8811 	msr	BASEPRI, r3
}
 8005078:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800507a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800507c:	4618      	mov	r0, r3
 800507e:	3738      	adds	r7, #56	; 0x38
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <vQueueDelete+0x28>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60bb      	str	r3, [r7, #8]
}
 80050a8:	bf00      	nop
 80050aa:	e7fe      	b.n	80050aa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f95f 	bl	8005370 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f002 f8c7 	bl	8007250 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d006      	beq.n	80050e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	e001      	b.n	80050ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80050ec:	68fb      	ldr	r3, [r7, #12]
	}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b086      	sub	sp, #24
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10d      	bne.n	8005134 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d14d      	bne.n	80051bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f001 f8d1 	bl	80062cc <xTaskPriorityDisinherit>
 800512a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	609a      	str	r2, [r3, #8]
 8005132:	e043      	b.n	80051bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d119      	bne.n	800516e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6858      	ldr	r0, [r3, #4]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	461a      	mov	r2, r3
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	f002 fa4b 	bl	80075e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	441a      	add	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	d32b      	bcc.n	80051bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	605a      	str	r2, [r3, #4]
 800516c:	e026      	b.n	80051bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68d8      	ldr	r0, [r3, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	461a      	mov	r2, r3
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	f002 fa31 	bl	80075e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	425b      	negs	r3, r3
 8005188:	441a      	add	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d207      	bcs.n	80051aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	425b      	negs	r3, r3
 80051a4:	441a      	add	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d105      	bne.n	80051bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051c4:	697b      	ldr	r3, [r7, #20]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d018      	beq.n	8005212 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	441a      	add	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d303      	bcc.n	8005202 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68d9      	ldr	r1, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	461a      	mov	r2, r3
 800520c:	6838      	ldr	r0, [r7, #0]
 800520e:	f002 f9e7 	bl	80075e0 <memcpy>
	}
}
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005222:	f001 fe27 	bl	8006e74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800522c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800522e:	e011      	b.n	8005254 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	d012      	beq.n	800525e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3324      	adds	r3, #36	; 0x24
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fded 	bl	8005e1c <xTaskRemoveFromEventList>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005248:	f000 fec4 	bl	8005fd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	3b01      	subs	r3, #1
 8005250:	b2db      	uxtb	r3, r3
 8005252:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005258:	2b00      	cmp	r3, #0
 800525a:	dce9      	bgt.n	8005230 <prvUnlockQueue+0x16>
 800525c:	e000      	b.n	8005260 <prvUnlockQueue+0x46>
					break;
 800525e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	22ff      	movs	r2, #255	; 0xff
 8005264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005268:	f001 fe34 	bl	8006ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800526c:	f001 fe02 	bl	8006e74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005276:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005278:	e011      	b.n	800529e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d012      	beq.n	80052a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3310      	adds	r3, #16
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fdc8 	bl	8005e1c <xTaskRemoveFromEventList>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005292:	f000 fe9f 	bl	8005fd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005296:	7bbb      	ldrb	r3, [r7, #14]
 8005298:	3b01      	subs	r3, #1
 800529a:	b2db      	uxtb	r3, r3
 800529c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800529e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	dce9      	bgt.n	800527a <prvUnlockQueue+0x60>
 80052a6:	e000      	b.n	80052aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	22ff      	movs	r2, #255	; 0xff
 80052ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052b2:	f001 fe0f 	bl	8006ed4 <vPortExitCritical>
}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052c6:	f001 fdd5 	bl	8006e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d102      	bne.n	80052d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052d2:	2301      	movs	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e001      	b.n	80052dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052dc:	f001 fdfa 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 80052e0:	68fb      	ldr	r3, [r7, #12]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052f2:	f001 fdbf 	bl	8006e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	429a      	cmp	r2, r3
 8005300:	d102      	bne.n	8005308 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005302:	2301      	movs	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e001      	b.n	800530c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800530c:	f001 fde2 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 8005310:	68fb      	ldr	r3, [r7, #12]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e014      	b.n	8005356 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800532c:	4a0f      	ldr	r2, [pc, #60]	; (800536c <vQueueAddToRegistry+0x50>)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10b      	bne.n	8005350 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005338:	490c      	ldr	r1, [pc, #48]	; (800536c <vQueueAddToRegistry+0x50>)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005342:	4a0a      	ldr	r2, [pc, #40]	; (800536c <vQueueAddToRegistry+0x50>)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4413      	add	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800534e:	e006      	b.n	800535e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3301      	adds	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b07      	cmp	r3, #7
 800535a:	d9e7      	bls.n	800532c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800535c:	bf00      	nop
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	200008ec 	.word	0x200008ec

08005370 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	e016      	b.n	80053ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800537e:	4a10      	ldr	r2, [pc, #64]	; (80053c0 <vQueueUnregisterQueue+0x50>)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	4413      	add	r3, r2
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d10b      	bne.n	80053a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800538e:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <vQueueUnregisterQueue+0x50>)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2100      	movs	r1, #0
 8005394:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005398:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <vQueueUnregisterQueue+0x50>)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	4413      	add	r3, r2
 80053a0:	2200      	movs	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]
				break;
 80053a4:	e006      	b.n	80053b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b07      	cmp	r3, #7
 80053b0:	d9e5      	bls.n	800537e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80053b2:	bf00      	nop
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	200008ec 	.word	0x200008ec

080053c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053d4:	f001 fd4e 	bl	8006e74 <vPortEnterCritical>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e4:	d103      	bne.n	80053ee <vQueueWaitForMessageRestricted+0x2a>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f4:	b25b      	sxtb	r3, r3
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d103      	bne.n	8005404 <vQueueWaitForMessageRestricted+0x40>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005404:	f001 fd66 	bl	8006ed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	2b00      	cmp	r3, #0
 800540e:	d106      	bne.n	800541e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	3324      	adds	r3, #36	; 0x24
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fcd3 	bl	8005dc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800541e:	6978      	ldr	r0, [r7, #20]
 8005420:	f7ff fefb 	bl	800521a <prvUnlockQueue>
	}
 8005424:	bf00      	nop
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08e      	sub	sp, #56	; 0x38
 8005430:	af04      	add	r7, sp, #16
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800543a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	623b      	str	r3, [r7, #32]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <xTaskCreateStatic+0x46>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	61fb      	str	r3, [r7, #28]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005472:	23a8      	movs	r3, #168	; 0xa8
 8005474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2ba8      	cmp	r3, #168	; 0xa8
 800547a:	d00a      	beq.n	8005492 <xTaskCreateStatic+0x66>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	61bb      	str	r3, [r7, #24]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005492:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01e      	beq.n	80054d8 <xTaskCreateStatic+0xac>
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01b      	beq.n	80054d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054b2:	2300      	movs	r3, #0
 80054b4:	9303      	str	r3, [sp, #12]
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	9302      	str	r3, [sp, #8]
 80054ba:	f107 0314 	add.w	r3, r7, #20
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 f850 	bl	8005570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054d2:	f000 f8f3 	bl	80056bc <prvAddNewTaskToReadyList>
 80054d6:	e001      	b.n	80054dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054dc:	697b      	ldr	r3, [r7, #20]
	}
 80054de:	4618      	mov	r0, r3
 80054e0:	3728      	adds	r7, #40	; 0x28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b08c      	sub	sp, #48	; 0x30
 80054ea:	af04      	add	r7, sp, #16
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	603b      	str	r3, [r7, #0]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 fddc 	bl	80070b8 <pvPortMalloc>
 8005500:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00e      	beq.n	8005526 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005508:	20a8      	movs	r0, #168	; 0xa8
 800550a:	f001 fdd5 	bl	80070b8 <pvPortMalloc>
 800550e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
 800551c:	e005      	b.n	800552a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800551e:	6978      	ldr	r0, [r7, #20]
 8005520:	f001 fe96 	bl	8007250 <vPortFree>
 8005524:	e001      	b.n	800552a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d017      	beq.n	8005560 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	2300      	movs	r3, #0
 800553c:	9303      	str	r3, [sp, #12]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	9302      	str	r3, [sp, #8]
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f80e 	bl	8005570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005554:	69f8      	ldr	r0, [r7, #28]
 8005556:	f000 f8b1 	bl	80056bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800555a:	2301      	movs	r3, #1
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	e002      	b.n	8005566 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005560:	f04f 33ff 	mov.w	r3, #4294967295
 8005564:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005566:	69bb      	ldr	r3, [r7, #24]
	}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	461a      	mov	r2, r3
 8005588:	21a5      	movs	r1, #165	; 0xa5
 800558a:	f001 ff9f 	bl	80074cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005598:	3b01      	subs	r3, #1
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f023 0307 	bic.w	r3, r3, #7
 80055a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	617b      	str	r3, [r7, #20]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01f      	beq.n	800560e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ce:	2300      	movs	r3, #0
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	e012      	b.n	80055fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	7819      	ldrb	r1, [r3, #0]
 80055dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	3334      	adds	r3, #52	; 0x34
 80055e4:	460a      	mov	r2, r1
 80055e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d006      	beq.n	8005602 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	3301      	adds	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b0f      	cmp	r3, #15
 80055fe:	d9e9      	bls.n	80055d4 <prvInitialiseNewTask+0x64>
 8005600:	e000      	b.n	8005604 <prvInitialiseNewTask+0x94>
			{
				break;
 8005602:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800560c:	e003      	b.n	8005616 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	2b37      	cmp	r3, #55	; 0x37
 800561a:	d901      	bls.n	8005620 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800561c:	2337      	movs	r3, #55	; 0x37
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005624:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800562a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	2200      	movs	r2, #0
 8005630:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	3304      	adds	r3, #4
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe fda0 	bl	800417c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	3318      	adds	r3, #24
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe fd9b 	bl	800417c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	2200      	movs	r2, #0
 8005660:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	2200      	movs	r2, #0
 8005668:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	3354      	adds	r3, #84	; 0x54
 8005670:	224c      	movs	r2, #76	; 0x4c
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 ff29 	bl	80074cc <memset>
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <prvInitialiseNewTask+0x140>)
 800567e:	659a      	str	r2, [r3, #88]	; 0x58
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <prvInitialiseNewTask+0x144>)
 8005684:	65da      	str	r2, [r3, #92]	; 0x5c
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	4a0b      	ldr	r2, [pc, #44]	; (80056b8 <prvInitialiseNewTask+0x148>)
 800568a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	69b8      	ldr	r0, [r7, #24]
 8005692:	f001 fac1 	bl	8006c18 <pxPortInitialiseStack>
 8005696:	4602      	mov	r2, r0
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a8:	bf00      	nop
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20004b80 	.word	0x20004b80
 80056b4:	20004be8 	.word	0x20004be8
 80056b8:	20004c50 	.word	0x20004c50

080056bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056c4:	f001 fbd6 	bl	8006e74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056c8:	4b2d      	ldr	r3, [pc, #180]	; (8005780 <prvAddNewTaskToReadyList+0xc4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a2c      	ldr	r2, [pc, #176]	; (8005780 <prvAddNewTaskToReadyList+0xc4>)
 80056d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056d2:	4b2c      	ldr	r3, [pc, #176]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056da:	4a2a      	ldr	r2, [pc, #168]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056e0:	4b27      	ldr	r3, [pc, #156]	; (8005780 <prvAddNewTaskToReadyList+0xc4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d110      	bne.n	800570a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056e8:	f000 fc98 	bl	800601c <prvInitialiseTaskLists>
 80056ec:	e00d      	b.n	800570a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056ee:	4b26      	ldr	r3, [pc, #152]	; (8005788 <prvAddNewTaskToReadyList+0xcc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056f6:	4b23      	ldr	r3, [pc, #140]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	429a      	cmp	r2, r3
 8005702:	d802      	bhi.n	800570a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800570a:	4b20      	ldr	r3, [pc, #128]	; (800578c <prvAddNewTaskToReadyList+0xd0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	4a1e      	ldr	r2, [pc, #120]	; (800578c <prvAddNewTaskToReadyList+0xd0>)
 8005712:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005714:	4b1d      	ldr	r3, [pc, #116]	; (800578c <prvAddNewTaskToReadyList+0xd0>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4b1b      	ldr	r3, [pc, #108]	; (8005790 <prvAddNewTaskToReadyList+0xd4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d903      	bls.n	8005730 <prvAddNewTaskToReadyList+0x74>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	4a18      	ldr	r2, [pc, #96]	; (8005790 <prvAddNewTaskToReadyList+0xd4>)
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4a15      	ldr	r2, [pc, #84]	; (8005794 <prvAddNewTaskToReadyList+0xd8>)
 800573e:	441a      	add	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3304      	adds	r3, #4
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	f7fe fd25 	bl	8004196 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800574c:	f001 fbc2 	bl	8006ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005750:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <prvAddNewTaskToReadyList+0xcc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	429a      	cmp	r2, r3
 8005764:	d207      	bcs.n	8005776 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <prvAddNewTaskToReadyList+0xdc>)
 8005768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000e00 	.word	0x20000e00
 8005784:	2000092c 	.word	0x2000092c
 8005788:	20000e0c 	.word	0x20000e0c
 800578c:	20000e1c 	.word	0x20000e1c
 8005790:	20000e08 	.word	0x20000e08
 8005794:	20000930 	.word	0x20000930
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80057a4:	f001 fb66 	bl	8006e74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <vTaskDelete+0x18>
 80057ae:	4b2c      	ldr	r3, [pc, #176]	; (8005860 <vTaskDelete+0xc4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	e000      	b.n	80057b6 <vTaskDelete+0x1a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fe fd47 	bl	8004250 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d004      	beq.n	80057d4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3318      	adds	r3, #24
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe fd3e 	bl	8004250 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80057d4:	4b23      	ldr	r3, [pc, #140]	; (8005864 <vTaskDelete+0xc8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3301      	adds	r3, #1
 80057da:	4a22      	ldr	r2, [pc, #136]	; (8005864 <vTaskDelete+0xc8>)
 80057dc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80057de:	4b20      	ldr	r3, [pc, #128]	; (8005860 <vTaskDelete+0xc4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d10b      	bne.n	8005800 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	481e      	ldr	r0, [pc, #120]	; (8005868 <vTaskDelete+0xcc>)
 80057f0:	f7fe fcd1 	bl	8004196 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80057f4:	4b1d      	ldr	r3, [pc, #116]	; (800586c <vTaskDelete+0xd0>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3301      	adds	r3, #1
 80057fa:	4a1c      	ldr	r2, [pc, #112]	; (800586c <vTaskDelete+0xd0>)
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e009      	b.n	8005814 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005800:	4b1b      	ldr	r3, [pc, #108]	; (8005870 <vTaskDelete+0xd4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3b01      	subs	r3, #1
 8005806:	4a1a      	ldr	r2, [pc, #104]	; (8005870 <vTaskDelete+0xd4>)
 8005808:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 fc74 	bl	80060f8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005810:	f000 fca6 	bl	8006160 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005814:	f001 fb5e 	bl	8006ed4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005818:	4b16      	ldr	r3, [pc, #88]	; (8005874 <vTaskDelete+0xd8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01b      	beq.n	8005858 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <vTaskDelete+0xc4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	429a      	cmp	r2, r3
 8005828:	d116      	bne.n	8005858 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800582a:	4b13      	ldr	r3, [pc, #76]	; (8005878 <vTaskDelete+0xdc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <vTaskDelete+0xac>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60bb      	str	r3, [r7, #8]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8005848:	4b0c      	ldr	r3, [pc, #48]	; (800587c <vTaskDelete+0xe0>)
 800584a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	2000092c 	.word	0x2000092c
 8005864:	20000e1c 	.word	0x20000e1c
 8005868:	20000dd4 	.word	0x20000dd4
 800586c:	20000de8 	.word	0x20000de8
 8005870:	20000e00 	.word	0x20000e00
 8005874:	20000e0c 	.word	0x20000e0c
 8005878:	20000e28 	.word	0x20000e28
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d017      	beq.n	80058c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005892:	4b13      	ldr	r3, [pc, #76]	; (80058e0 <vTaskDelay+0x60>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <vTaskDelay+0x30>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	60bb      	str	r3, [r7, #8]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80058b0:	f000 f88a 	bl	80059c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058b4:	2100      	movs	r1, #0
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fe0c 	bl	80064d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058bc:	f000 f892 	bl	80059e4 <xTaskResumeAll>
 80058c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d107      	bne.n	80058d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058c8:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <vTaskDelay+0x64>)
 80058ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058d8:	bf00      	nop
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20000e28 	.word	0x20000e28
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058f6:	463a      	mov	r2, r7
 80058f8:	1d39      	adds	r1, r7, #4
 80058fa:	f107 0308 	add.w	r3, r7, #8
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe fbe8 	bl	80040d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	9202      	str	r2, [sp, #8]
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	2300      	movs	r3, #0
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	2300      	movs	r3, #0
 8005914:	460a      	mov	r2, r1
 8005916:	4924      	ldr	r1, [pc, #144]	; (80059a8 <vTaskStartScheduler+0xc0>)
 8005918:	4824      	ldr	r0, [pc, #144]	; (80059ac <vTaskStartScheduler+0xc4>)
 800591a:	f7ff fd87 	bl	800542c <xTaskCreateStatic>
 800591e:	4603      	mov	r3, r0
 8005920:	4a23      	ldr	r2, [pc, #140]	; (80059b0 <vTaskStartScheduler+0xc8>)
 8005922:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005924:	4b22      	ldr	r3, [pc, #136]	; (80059b0 <vTaskStartScheduler+0xc8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800592c:	2301      	movs	r3, #1
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	e001      	b.n	8005936 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d102      	bne.n	8005942 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800593c:	f000 fe1e 	bl	800657c <xTimerCreateTimerTask>
 8005940:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d11b      	bne.n	8005980 <vTaskStartScheduler+0x98>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	613b      	str	r3, [r7, #16]
}
 800595a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800595c:	4b15      	ldr	r3, [pc, #84]	; (80059b4 <vTaskStartScheduler+0xcc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3354      	adds	r3, #84	; 0x54
 8005962:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <vTaskStartScheduler+0xd0>)
 8005964:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005966:	4b15      	ldr	r3, [pc, #84]	; (80059bc <vTaskStartScheduler+0xd4>)
 8005968:	f04f 32ff 	mov.w	r2, #4294967295
 800596c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800596e:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <vTaskStartScheduler+0xd8>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005974:	4b13      	ldr	r3, [pc, #76]	; (80059c4 <vTaskStartScheduler+0xdc>)
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800597a:	f001 f9d9 	bl	8006d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800597e:	e00e      	b.n	800599e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005986:	d10a      	bne.n	800599e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	60fb      	str	r3, [r7, #12]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <vTaskStartScheduler+0xb4>
}
 800599e:	bf00      	nop
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	08007f7c 	.word	0x08007f7c
 80059ac:	08005fed 	.word	0x08005fed
 80059b0:	20000e24 	.word	0x20000e24
 80059b4:	2000092c 	.word	0x2000092c
 80059b8:	2000005c 	.word	0x2000005c
 80059bc:	20000e20 	.word	0x20000e20
 80059c0:	20000e0c 	.word	0x20000e0c
 80059c4:	20000e04 	.word	0x20000e04

080059c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80059cc:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <vTaskSuspendAll+0x18>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3301      	adds	r3, #1
 80059d2:	4a03      	ldr	r2, [pc, #12]	; (80059e0 <vTaskSuspendAll+0x18>)
 80059d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	20000e28 	.word	0x20000e28

080059e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059f2:	4b42      	ldr	r3, [pc, #264]	; (8005afc <xTaskResumeAll+0x118>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <xTaskResumeAll+0x2c>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	603b      	str	r3, [r7, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	e7fe      	b.n	8005a0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a10:	f001 fa30 	bl	8006e74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a14:	4b39      	ldr	r3, [pc, #228]	; (8005afc <xTaskResumeAll+0x118>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	4a38      	ldr	r2, [pc, #224]	; (8005afc <xTaskResumeAll+0x118>)
 8005a1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a1e:	4b37      	ldr	r3, [pc, #220]	; (8005afc <xTaskResumeAll+0x118>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d162      	bne.n	8005aec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <xTaskResumeAll+0x11c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d05e      	beq.n	8005aec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a2e:	e02f      	b.n	8005a90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a30:	4b34      	ldr	r3, [pc, #208]	; (8005b04 <xTaskResumeAll+0x120>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3318      	adds	r3, #24
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe fc07 	bl	8004250 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fc02 	bl	8004250 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a50:	4b2d      	ldr	r3, [pc, #180]	; (8005b08 <xTaskResumeAll+0x124>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d903      	bls.n	8005a60 <xTaskResumeAll+0x7c>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	4a2a      	ldr	r2, [pc, #168]	; (8005b08 <xTaskResumeAll+0x124>)
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4a27      	ldr	r2, [pc, #156]	; (8005b0c <xTaskResumeAll+0x128>)
 8005a6e:	441a      	add	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f7fe fb8d 	bl	8004196 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a80:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <xTaskResumeAll+0x12c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d302      	bcc.n	8005a90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005a8a:	4b22      	ldr	r3, [pc, #136]	; (8005b14 <xTaskResumeAll+0x130>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a90:	4b1c      	ldr	r3, [pc, #112]	; (8005b04 <xTaskResumeAll+0x120>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1cb      	bne.n	8005a30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a9e:	f000 fb5f 	bl	8006160 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005aa2:	4b1d      	ldr	r3, [pc, #116]	; (8005b18 <xTaskResumeAll+0x134>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d010      	beq.n	8005ad0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005aae:	f000 f847 	bl	8005b40 <xTaskIncrementTick>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ab8:	4b16      	ldr	r3, [pc, #88]	; (8005b14 <xTaskResumeAll+0x130>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f1      	bne.n	8005aae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005aca:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <xTaskResumeAll+0x134>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ad0:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <xTaskResumeAll+0x130>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d009      	beq.n	8005aec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005adc:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <xTaskResumeAll+0x138>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005aec:	f001 f9f2 	bl	8006ed4 <vPortExitCritical>

	return xAlreadyYielded;
 8005af0:	68bb      	ldr	r3, [r7, #8]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000e28 	.word	0x20000e28
 8005b00:	20000e00 	.word	0x20000e00
 8005b04:	20000dc0 	.word	0x20000dc0
 8005b08:	20000e08 	.word	0x20000e08
 8005b0c:	20000930 	.word	0x20000930
 8005b10:	2000092c 	.word	0x2000092c
 8005b14:	20000e14 	.word	0x20000e14
 8005b18:	20000e10 	.word	0x20000e10
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b26:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <xTaskGetTickCount+0x1c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b2c:	687b      	ldr	r3, [r7, #4]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20000e04 	.word	0x20000e04

08005b40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b4a:	4b4f      	ldr	r3, [pc, #316]	; (8005c88 <xTaskIncrementTick+0x148>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f040 808f 	bne.w	8005c72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b54:	4b4d      	ldr	r3, [pc, #308]	; (8005c8c <xTaskIncrementTick+0x14c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b5c:	4a4b      	ldr	r2, [pc, #300]	; (8005c8c <xTaskIncrementTick+0x14c>)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d120      	bne.n	8005baa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b68:	4b49      	ldr	r3, [pc, #292]	; (8005c90 <xTaskIncrementTick+0x150>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	603b      	str	r3, [r7, #0]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xTaskIncrementTick+0x46>
 8005b88:	4b41      	ldr	r3, [pc, #260]	; (8005c90 <xTaskIncrementTick+0x150>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	4b41      	ldr	r3, [pc, #260]	; (8005c94 <xTaskIncrementTick+0x154>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a3f      	ldr	r2, [pc, #252]	; (8005c90 <xTaskIncrementTick+0x150>)
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4a3f      	ldr	r2, [pc, #252]	; (8005c94 <xTaskIncrementTick+0x154>)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	4b3e      	ldr	r3, [pc, #248]	; (8005c98 <xTaskIncrementTick+0x158>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	4a3d      	ldr	r2, [pc, #244]	; (8005c98 <xTaskIncrementTick+0x158>)
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	f000 fadb 	bl	8006160 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005baa:	4b3c      	ldr	r3, [pc, #240]	; (8005c9c <xTaskIncrementTick+0x15c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d349      	bcc.n	8005c48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bb4:	4b36      	ldr	r3, [pc, #216]	; (8005c90 <xTaskIncrementTick+0x150>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d104      	bne.n	8005bc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bbe:	4b37      	ldr	r3, [pc, #220]	; (8005c9c <xTaskIncrementTick+0x15c>)
 8005bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc4:	601a      	str	r2, [r3, #0]
					break;
 8005bc6:	e03f      	b.n	8005c48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc8:	4b31      	ldr	r3, [pc, #196]	; (8005c90 <xTaskIncrementTick+0x150>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d203      	bcs.n	8005be8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005be0:	4a2e      	ldr	r2, [pc, #184]	; (8005c9c <xTaskIncrementTick+0x15c>)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005be6:	e02f      	b.n	8005c48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe fb2f 	bl	8004250 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	3318      	adds	r3, #24
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe fb26 	bl	8004250 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c08:	4b25      	ldr	r3, [pc, #148]	; (8005ca0 <xTaskIncrementTick+0x160>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d903      	bls.n	8005c18 <xTaskIncrementTick+0xd8>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	4a22      	ldr	r2, [pc, #136]	; (8005ca0 <xTaskIncrementTick+0x160>)
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4a1f      	ldr	r2, [pc, #124]	; (8005ca4 <xTaskIncrementTick+0x164>)
 8005c26:	441a      	add	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7fe fab1 	bl	8004196 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c38:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <xTaskIncrementTick+0x168>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d3b8      	bcc.n	8005bb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c42:	2301      	movs	r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c46:	e7b5      	b.n	8005bb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c48:	4b17      	ldr	r3, [pc, #92]	; (8005ca8 <xTaskIncrementTick+0x168>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4e:	4915      	ldr	r1, [pc, #84]	; (8005ca4 <xTaskIncrementTick+0x164>)
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d901      	bls.n	8005c64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c64:	4b11      	ldr	r3, [pc, #68]	; (8005cac <xTaskIncrementTick+0x16c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e004      	b.n	8005c7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c72:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <xTaskIncrementTick+0x170>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3301      	adds	r3, #1
 8005c78:	4a0d      	ldr	r2, [pc, #52]	; (8005cb0 <xTaskIncrementTick+0x170>)
 8005c7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c7c:	697b      	ldr	r3, [r7, #20]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000e28 	.word	0x20000e28
 8005c8c:	20000e04 	.word	0x20000e04
 8005c90:	20000db8 	.word	0x20000db8
 8005c94:	20000dbc 	.word	0x20000dbc
 8005c98:	20000e18 	.word	0x20000e18
 8005c9c:	20000e20 	.word	0x20000e20
 8005ca0:	20000e08 	.word	0x20000e08
 8005ca4:	20000930 	.word	0x20000930
 8005ca8:	2000092c 	.word	0x2000092c
 8005cac:	20000e14 	.word	0x20000e14
 8005cb0:	20000e10 	.word	0x20000e10

08005cb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cba:	4b2a      	ldr	r3, [pc, #168]	; (8005d64 <vTaskSwitchContext+0xb0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cc2:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <vTaskSwitchContext+0xb4>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005cc8:	e046      	b.n	8005d58 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005cca:	4b27      	ldr	r3, [pc, #156]	; (8005d68 <vTaskSwitchContext+0xb4>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd0:	4b26      	ldr	r3, [pc, #152]	; (8005d6c <vTaskSwitchContext+0xb8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e010      	b.n	8005cfa <vTaskSwitchContext+0x46>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <vTaskSwitchContext+0x40>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	607b      	str	r3, [r7, #4]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <vTaskSwitchContext+0x3e>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	491d      	ldr	r1, [pc, #116]	; (8005d70 <vTaskSwitchContext+0xbc>)
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0e4      	beq.n	8005cd8 <vTaskSwitchContext+0x24>
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <vTaskSwitchContext+0xbc>)
 8005d1a:	4413      	add	r3, r2
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	605a      	str	r2, [r3, #4]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d104      	bne.n	8005d3e <vTaskSwitchContext+0x8a>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4a0b      	ldr	r2, [pc, #44]	; (8005d74 <vTaskSwitchContext+0xc0>)
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <vTaskSwitchContext+0xb8>)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d4e:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <vTaskSwitchContext+0xc0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3354      	adds	r3, #84	; 0x54
 8005d54:	4a08      	ldr	r2, [pc, #32]	; (8005d78 <vTaskSwitchContext+0xc4>)
 8005d56:	6013      	str	r3, [r2, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	20000e28 	.word	0x20000e28
 8005d68:	20000e14 	.word	0x20000e14
 8005d6c:	20000e08 	.word	0x20000e08
 8005d70:	20000930 	.word	0x20000930
 8005d74:	2000092c 	.word	0x2000092c
 8005d78:	2000005c 	.word	0x2000005c

08005d7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	60fb      	str	r3, [r7, #12]
}
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005da2:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <vTaskPlaceOnEventList+0x44>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3318      	adds	r3, #24
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fe fa17 	bl	80041de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005db0:	2101      	movs	r1, #1
 8005db2:	6838      	ldr	r0, [r7, #0]
 8005db4:	f000 fb8e 	bl	80064d4 <prvAddCurrentTaskToDelayedList>
}
 8005db8:	bf00      	nop
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	2000092c 	.word	0x2000092c

08005dc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10a      	bne.n	8005dec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	617b      	str	r3, [r7, #20]
}
 8005de8:	bf00      	nop
 8005dea:	e7fe      	b.n	8005dea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dec:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <vTaskPlaceOnEventListRestricted+0x54>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3318      	adds	r3, #24
 8005df2:	4619      	mov	r1, r3
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f7fe f9ce 	bl	8004196 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005e00:	f04f 33ff 	mov.w	r3, #4294967295
 8005e04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	68b8      	ldr	r0, [r7, #8]
 8005e0a:	f000 fb63 	bl	80064d4 <prvAddCurrentTaskToDelayedList>
	}
 8005e0e:	bf00      	nop
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	2000092c 	.word	0x2000092c

08005e1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10a      	bne.n	8005e48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	60fb      	str	r3, [r7, #12]
}
 8005e44:	bf00      	nop
 8005e46:	e7fe      	b.n	8005e46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	3318      	adds	r3, #24
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe f9ff 	bl	8004250 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e52:	4b1e      	ldr	r3, [pc, #120]	; (8005ecc <xTaskRemoveFromEventList+0xb0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d11d      	bne.n	8005e96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe f9f6 	bl	8004250 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4b19      	ldr	r3, [pc, #100]	; (8005ed0 <xTaskRemoveFromEventList+0xb4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d903      	bls.n	8005e78 <xTaskRemoveFromEventList+0x5c>
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4a16      	ldr	r2, [pc, #88]	; (8005ed0 <xTaskRemoveFromEventList+0xb4>)
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4a13      	ldr	r2, [pc, #76]	; (8005ed4 <xTaskRemoveFromEventList+0xb8>)
 8005e86:	441a      	add	r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f7fe f981 	bl	8004196 <vListInsertEnd>
 8005e94:	e005      	b.n	8005ea2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	3318      	adds	r3, #24
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	480e      	ldr	r0, [pc, #56]	; (8005ed8 <xTaskRemoveFromEventList+0xbc>)
 8005e9e:	f7fe f97a 	bl	8004196 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea6:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <xTaskRemoveFromEventList+0xc0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d905      	bls.n	8005ebc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <xTaskRemoveFromEventList+0xc4>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	e001      	b.n	8005ec0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ec0:	697b      	ldr	r3, [r7, #20]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000e28 	.word	0x20000e28
 8005ed0:	20000e08 	.word	0x20000e08
 8005ed4:	20000930 	.word	0x20000930
 8005ed8:	20000dc0 	.word	0x20000dc0
 8005edc:	2000092c 	.word	0x2000092c
 8005ee0:	20000e14 	.word	0x20000e14

08005ee4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <vTaskInternalSetTimeOutState+0x24>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <vTaskInternalSetTimeOutState+0x28>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	605a      	str	r2, [r3, #4]
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	20000e18 	.word	0x20000e18
 8005f0c:	20000e04 	.word	0x20000e04

08005f10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	613b      	str	r3, [r7, #16]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	60fb      	str	r3, [r7, #12]
}
 8005f4e:	bf00      	nop
 8005f50:	e7fe      	b.n	8005f50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005f52:	f000 ff8f 	bl	8006e74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f56:	4b1d      	ldr	r3, [pc, #116]	; (8005fcc <xTaskCheckForTimeOut+0xbc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d102      	bne.n	8005f76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	e023      	b.n	8005fbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <xTaskCheckForTimeOut+0xc0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d007      	beq.n	8005f92 <xTaskCheckForTimeOut+0x82>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	61fb      	str	r3, [r7, #28]
 8005f90:	e015      	b.n	8005fbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d20b      	bcs.n	8005fb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	1ad2      	subs	r2, r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ff9b 	bl	8005ee4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	e004      	b.n	8005fbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fbe:	f000 ff89 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20000e04 	.word	0x20000e04
 8005fd0:	20000e18 	.word	0x20000e18

08005fd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fd8:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <vTaskMissedYield+0x14>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	20000e14 	.word	0x20000e14

08005fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ff4:	f000 f852 	bl	800609c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ff8:	4b06      	ldr	r3, [pc, #24]	; (8006014 <prvIdleTask+0x28>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d9f9      	bls.n	8005ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <prvIdleTask+0x2c>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006010:	e7f0      	b.n	8005ff4 <prvIdleTask+0x8>
 8006012:	bf00      	nop
 8006014:	20000930 	.word	0x20000930
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006022:	2300      	movs	r3, #0
 8006024:	607b      	str	r3, [r7, #4]
 8006026:	e00c      	b.n	8006042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4a12      	ldr	r2, [pc, #72]	; (800607c <prvInitialiseTaskLists+0x60>)
 8006034:	4413      	add	r3, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe f880 	bl	800413c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3301      	adds	r3, #1
 8006040:	607b      	str	r3, [r7, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b37      	cmp	r3, #55	; 0x37
 8006046:	d9ef      	bls.n	8006028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006048:	480d      	ldr	r0, [pc, #52]	; (8006080 <prvInitialiseTaskLists+0x64>)
 800604a:	f7fe f877 	bl	800413c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800604e:	480d      	ldr	r0, [pc, #52]	; (8006084 <prvInitialiseTaskLists+0x68>)
 8006050:	f7fe f874 	bl	800413c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006054:	480c      	ldr	r0, [pc, #48]	; (8006088 <prvInitialiseTaskLists+0x6c>)
 8006056:	f7fe f871 	bl	800413c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800605a:	480c      	ldr	r0, [pc, #48]	; (800608c <prvInitialiseTaskLists+0x70>)
 800605c:	f7fe f86e 	bl	800413c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006060:	480b      	ldr	r0, [pc, #44]	; (8006090 <prvInitialiseTaskLists+0x74>)
 8006062:	f7fe f86b 	bl	800413c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <prvInitialiseTaskLists+0x78>)
 8006068:	4a05      	ldr	r2, [pc, #20]	; (8006080 <prvInitialiseTaskLists+0x64>)
 800606a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <prvInitialiseTaskLists+0x7c>)
 800606e:	4a05      	ldr	r2, [pc, #20]	; (8006084 <prvInitialiseTaskLists+0x68>)
 8006070:	601a      	str	r2, [r3, #0]
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000930 	.word	0x20000930
 8006080:	20000d90 	.word	0x20000d90
 8006084:	20000da4 	.word	0x20000da4
 8006088:	20000dc0 	.word	0x20000dc0
 800608c:	20000dd4 	.word	0x20000dd4
 8006090:	20000dec 	.word	0x20000dec
 8006094:	20000db8 	.word	0x20000db8
 8006098:	20000dbc 	.word	0x20000dbc

0800609c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060a2:	e019      	b.n	80060d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060a4:	f000 fee6 	bl	8006e74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <prvCheckTasksWaitingTermination+0x50>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe f8cb 	bl	8004250 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060ba:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <prvCheckTasksWaitingTermination+0x54>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3b01      	subs	r3, #1
 80060c0:	4a0b      	ldr	r2, [pc, #44]	; (80060f0 <prvCheckTasksWaitingTermination+0x54>)
 80060c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <prvCheckTasksWaitingTermination+0x58>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	4a0a      	ldr	r2, [pc, #40]	; (80060f4 <prvCheckTasksWaitingTermination+0x58>)
 80060cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060ce:	f000 ff01 	bl	8006ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f810 	bl	80060f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060d8:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <prvCheckTasksWaitingTermination+0x58>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e1      	bne.n	80060a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000dd4 	.word	0x20000dd4
 80060f0:	20000e00 	.word	0x20000e00
 80060f4:	20000de8 	.word	0x20000de8

080060f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3354      	adds	r3, #84	; 0x54
 8006104:	4618      	mov	r0, r3
 8006106:	f001 f9e9 	bl	80074dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006110:	2b00      	cmp	r3, #0
 8006112:	d108      	bne.n	8006126 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	4618      	mov	r0, r3
 800611a:	f001 f899 	bl	8007250 <vPortFree>
				vPortFree( pxTCB );
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 f896 	bl	8007250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006124:	e018      	b.n	8006158 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800612c:	2b01      	cmp	r3, #1
 800612e:	d103      	bne.n	8006138 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 f88d 	bl	8007250 <vPortFree>
	}
 8006136:	e00f      	b.n	8006158 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800613e:	2b02      	cmp	r3, #2
 8006140:	d00a      	beq.n	8006158 <prvDeleteTCB+0x60>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	60fb      	str	r3, [r7, #12]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <prvDeleteTCB+0x5e>
	}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006166:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <prvResetNextTaskUnblockTime+0x38>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <prvResetNextTaskUnblockTime+0x3c>)
 8006172:	f04f 32ff 	mov.w	r2, #4294967295
 8006176:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006178:	e008      	b.n	800618c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800617a:	4b07      	ldr	r3, [pc, #28]	; (8006198 <prvResetNextTaskUnblockTime+0x38>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4a04      	ldr	r2, [pc, #16]	; (800619c <prvResetNextTaskUnblockTime+0x3c>)
 800618a:	6013      	str	r3, [r2, #0]
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	20000db8 	.word	0x20000db8
 800619c:	20000e20 	.word	0x20000e20

080061a0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80061a6:	4b05      	ldr	r3, [pc, #20]	; (80061bc <xTaskGetCurrentTaskHandle+0x1c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80061ac:	687b      	ldr	r3, [r7, #4]
	}
 80061ae:	4618      	mov	r0, r3
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	2000092c 	.word	0x2000092c

080061c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061c6:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <xTaskGetSchedulerState+0x34>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d102      	bne.n	80061d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061ce:	2301      	movs	r3, #1
 80061d0:	607b      	str	r3, [r7, #4]
 80061d2:	e008      	b.n	80061e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061d4:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <xTaskGetSchedulerState+0x38>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061dc:	2302      	movs	r3, #2
 80061de:	607b      	str	r3, [r7, #4]
 80061e0:	e001      	b.n	80061e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061e2:	2300      	movs	r3, #0
 80061e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061e6:	687b      	ldr	r3, [r7, #4]
	}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	20000e0c 	.word	0x20000e0c
 80061f8:	20000e28 	.word	0x20000e28

080061fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006208:	2300      	movs	r3, #0
 800620a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d051      	beq.n	80062b6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006216:	4b2a      	ldr	r3, [pc, #168]	; (80062c0 <xTaskPriorityInherit+0xc4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	429a      	cmp	r2, r3
 800621e:	d241      	bcs.n	80062a4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	db06      	blt.n	8006236 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006228:	4b25      	ldr	r3, [pc, #148]	; (80062c0 <xTaskPriorityInherit+0xc4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6959      	ldr	r1, [r3, #20]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4a1f      	ldr	r2, [pc, #124]	; (80062c4 <xTaskPriorityInherit+0xc8>)
 8006248:	4413      	add	r3, r2
 800624a:	4299      	cmp	r1, r3
 800624c:	d122      	bne.n	8006294 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	3304      	adds	r3, #4
 8006252:	4618      	mov	r0, r3
 8006254:	f7fd fffc 	bl	8004250 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006258:	4b19      	ldr	r3, [pc, #100]	; (80062c0 <xTaskPriorityInherit+0xc4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006266:	4b18      	ldr	r3, [pc, #96]	; (80062c8 <xTaskPriorityInherit+0xcc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d903      	bls.n	8006276 <xTaskPriorityInherit+0x7a>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <xTaskPriorityInherit+0xcc>)
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4a10      	ldr	r2, [pc, #64]	; (80062c4 <xTaskPriorityInherit+0xc8>)
 8006284:	441a      	add	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	3304      	adds	r3, #4
 800628a:	4619      	mov	r1, r3
 800628c:	4610      	mov	r0, r2
 800628e:	f7fd ff82 	bl	8004196 <vListInsertEnd>
 8006292:	e004      	b.n	800629e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <xTaskPriorityInherit+0xc4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800629e:	2301      	movs	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	e008      	b.n	80062b6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <xTaskPriorityInherit+0xc4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d201      	bcs.n	80062b6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80062b2:	2301      	movs	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062b6:	68fb      	ldr	r3, [r7, #12]
	}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	2000092c 	.word	0x2000092c
 80062c4:	20000930 	.word	0x20000930
 80062c8:	20000e08 	.word	0x20000e08

080062cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d056      	beq.n	8006390 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062e2:	4b2e      	ldr	r3, [pc, #184]	; (800639c <xTaskPriorityDisinherit+0xd0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d00a      	beq.n	8006302 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	60fb      	str	r3, [r7, #12]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	60bb      	str	r3, [r7, #8]
}
 800631c:	bf00      	nop
 800631e:	e7fe      	b.n	800631e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006324:	1e5a      	subs	r2, r3, #1
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006332:	429a      	cmp	r2, r3
 8006334:	d02c      	beq.n	8006390 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633a:	2b00      	cmp	r3, #0
 800633c:	d128      	bne.n	8006390 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	3304      	adds	r3, #4
 8006342:	4618      	mov	r0, r3
 8006344:	f7fd ff84 	bl	8004250 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4b0f      	ldr	r3, [pc, #60]	; (80063a0 <xTaskPriorityDisinherit+0xd4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d903      	bls.n	8006370 <xTaskPriorityDisinherit+0xa4>
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	4a0c      	ldr	r2, [pc, #48]	; (80063a0 <xTaskPriorityDisinherit+0xd4>)
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4a09      	ldr	r2, [pc, #36]	; (80063a4 <xTaskPriorityDisinherit+0xd8>)
 800637e:	441a      	add	r2, r3
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f7fd ff05 	bl	8004196 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800638c:	2301      	movs	r3, #1
 800638e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006390:	697b      	ldr	r3, [r7, #20]
	}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	2000092c 	.word	0x2000092c
 80063a0:	20000e08 	.word	0x20000e08
 80063a4:	20000930 	.word	0x20000930

080063a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80063b6:	2301      	movs	r3, #1
 80063b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d06a      	beq.n	8006496 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	60fb      	str	r3, [r7, #12]
}
 80063da:	bf00      	nop
 80063dc:	e7fe      	b.n	80063dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d902      	bls.n	80063ee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	e002      	b.n	80063f4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d04b      	beq.n	8006496 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	429a      	cmp	r2, r3
 8006406:	d146      	bne.n	8006496 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006408:	4b25      	ldr	r3, [pc, #148]	; (80064a0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	429a      	cmp	r2, r3
 8006410:	d10a      	bne.n	8006428 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	60bb      	str	r3, [r7, #8]
}
 8006424:	bf00      	nop
 8006426:	e7fe      	b.n	8006426 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	2b00      	cmp	r3, #0
 800643a:	db04      	blt.n	8006446 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	6959      	ldr	r1, [r3, #20]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006456:	4413      	add	r3, r2
 8006458:	4299      	cmp	r1, r3
 800645a:	d11c      	bne.n	8006496 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	3304      	adds	r3, #4
 8006460:	4618      	mov	r0, r3
 8006462:	f7fd fef5 	bl	8004250 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646a:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d903      	bls.n	800647a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	4a0c      	ldr	r2, [pc, #48]	; (80064a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4a07      	ldr	r2, [pc, #28]	; (80064a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006488:	441a      	add	r2, r3
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	3304      	adds	r3, #4
 800648e:	4619      	mov	r1, r3
 8006490:	4610      	mov	r0, r2
 8006492:	f7fd fe80 	bl	8004196 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006496:	bf00      	nop
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	2000092c 	.word	0x2000092c
 80064a4:	20000930 	.word	0x20000930
 80064a8:	20000e08 	.word	0x20000e08

080064ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80064b0:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d004      	beq.n	80064c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064be:	3201      	adds	r2, #1
 80064c0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80064c2:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80064c4:	681b      	ldr	r3, [r3, #0]
	}
 80064c6:	4618      	mov	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	2000092c 	.word	0x2000092c

080064d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064de:	4b21      	ldr	r3, [pc, #132]	; (8006564 <prvAddCurrentTaskToDelayedList+0x90>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064e4:	4b20      	ldr	r3, [pc, #128]	; (8006568 <prvAddCurrentTaskToDelayedList+0x94>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fd feb0 	bl	8004250 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f6:	d10a      	bne.n	800650e <prvAddCurrentTaskToDelayedList+0x3a>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064fe:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <prvAddCurrentTaskToDelayedList+0x94>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	4819      	ldr	r0, [pc, #100]	; (800656c <prvAddCurrentTaskToDelayedList+0x98>)
 8006508:	f7fd fe45 	bl	8004196 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800650c:	e026      	b.n	800655c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <prvAddCurrentTaskToDelayedList+0x94>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	429a      	cmp	r2, r3
 8006524:	d209      	bcs.n	800653a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006526:	4b12      	ldr	r3, [pc, #72]	; (8006570 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <prvAddCurrentTaskToDelayedList+0x94>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f7fd fe53 	bl	80041de <vListInsert>
}
 8006538:	e010      	b.n	800655c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800653a:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <prvAddCurrentTaskToDelayedList+0xa0>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <prvAddCurrentTaskToDelayedList+0x94>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3304      	adds	r3, #4
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f7fd fe49 	bl	80041de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800654c:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	d202      	bcs.n	800655c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006556:	4a08      	ldr	r2, [pc, #32]	; (8006578 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6013      	str	r3, [r2, #0]
}
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20000e04 	.word	0x20000e04
 8006568:	2000092c 	.word	0x2000092c
 800656c:	20000dec 	.word	0x20000dec
 8006570:	20000dbc 	.word	0x20000dbc
 8006574:	20000db8 	.word	0x20000db8
 8006578:	20000e20 	.word	0x20000e20

0800657c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08a      	sub	sp, #40	; 0x28
 8006580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006586:	f000 fb07 	bl	8006b98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800658a:	4b1c      	ldr	r3, [pc, #112]	; (80065fc <xTimerCreateTimerTask+0x80>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d021      	beq.n	80065d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006596:	2300      	movs	r3, #0
 8006598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800659a:	1d3a      	adds	r2, r7, #4
 800659c:	f107 0108 	add.w	r1, r7, #8
 80065a0:	f107 030c 	add.w	r3, r7, #12
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fd fdaf 	bl	8004108 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	9202      	str	r2, [sp, #8]
 80065b2:	9301      	str	r3, [sp, #4]
 80065b4:	2302      	movs	r3, #2
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	2300      	movs	r3, #0
 80065ba:	460a      	mov	r2, r1
 80065bc:	4910      	ldr	r1, [pc, #64]	; (8006600 <xTimerCreateTimerTask+0x84>)
 80065be:	4811      	ldr	r0, [pc, #68]	; (8006604 <xTimerCreateTimerTask+0x88>)
 80065c0:	f7fe ff34 	bl	800542c <xTaskCreateStatic>
 80065c4:	4603      	mov	r3, r0
 80065c6:	4a10      	ldr	r2, [pc, #64]	; (8006608 <xTimerCreateTimerTask+0x8c>)
 80065c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065ca:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <xTimerCreateTimerTask+0x8c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065d2:	2301      	movs	r3, #1
 80065d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	613b      	str	r3, [r7, #16]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80065f2:	697b      	ldr	r3, [r7, #20]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20000e5c 	.word	0x20000e5c
 8006600:	08007f84 	.word	0x08007f84
 8006604:	08006741 	.word	0x08006741
 8006608:	20000e60 	.word	0x20000e60

0800660c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08a      	sub	sp, #40	; 0x28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800661a:	2300      	movs	r3, #0
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	623b      	str	r3, [r7, #32]
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800663a:	4b1a      	ldr	r3, [pc, #104]	; (80066a4 <xTimerGenericCommand+0x98>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d02a      	beq.n	8006698 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b05      	cmp	r3, #5
 8006652:	dc18      	bgt.n	8006686 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006654:	f7ff fdb4 	bl	80061c0 <xTaskGetSchedulerState>
 8006658:	4603      	mov	r3, r0
 800665a:	2b02      	cmp	r3, #2
 800665c:	d109      	bne.n	8006672 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800665e:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <xTimerGenericCommand+0x98>)
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	f107 0110 	add.w	r1, r7, #16
 8006666:	2300      	movs	r3, #0
 8006668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666a:	f7fe f879 	bl	8004760 <xQueueGenericSend>
 800666e:	6278      	str	r0, [r7, #36]	; 0x24
 8006670:	e012      	b.n	8006698 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006672:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <xTimerGenericCommand+0x98>)
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	f107 0110 	add.w	r1, r7, #16
 800667a:	2300      	movs	r3, #0
 800667c:	2200      	movs	r2, #0
 800667e:	f7fe f86f 	bl	8004760 <xQueueGenericSend>
 8006682:	6278      	str	r0, [r7, #36]	; 0x24
 8006684:	e008      	b.n	8006698 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006686:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <xTimerGenericCommand+0x98>)
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	f107 0110 	add.w	r1, r7, #16
 800668e:	2300      	movs	r3, #0
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	f7fe f963 	bl	800495c <xQueueGenericSendFromISR>
 8006696:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800669a:	4618      	mov	r0, r3
 800669c:	3728      	adds	r7, #40	; 0x28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000e5c 	.word	0x20000e5c

080066a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b2:	4b22      	ldr	r3, [pc, #136]	; (800673c <prvProcessExpiredTimer+0x94>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	3304      	adds	r3, #4
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fd fdc5 	bl	8004250 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d022      	beq.n	800671a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	699a      	ldr	r2, [r3, #24]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	18d1      	adds	r1, r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	6978      	ldr	r0, [r7, #20]
 80066e2:	f000 f8d1 	bl	8006888 <prvInsertTimerInActiveList>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01f      	beq.n	800672c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066ec:	2300      	movs	r3, #0
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	2300      	movs	r3, #0
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	2100      	movs	r1, #0
 80066f6:	6978      	ldr	r0, [r7, #20]
 80066f8:	f7ff ff88 	bl	800660c <xTimerGenericCommand>
 80066fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d113      	bne.n	800672c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	60fb      	str	r3, [r7, #12]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006720:	f023 0301 	bic.w	r3, r3, #1
 8006724:	b2da      	uxtb	r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	6978      	ldr	r0, [r7, #20]
 8006732:	4798      	blx	r3
}
 8006734:	bf00      	nop
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000e54 	.word	0x20000e54

08006740 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006748:	f107 0308 	add.w	r3, r7, #8
 800674c:	4618      	mov	r0, r3
 800674e:	f000 f857 	bl	8006800 <prvGetNextExpireTime>
 8006752:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4619      	mov	r1, r3
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f803 	bl	8006764 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800675e:	f000 f8d5 	bl	800690c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006762:	e7f1      	b.n	8006748 <prvTimerTask+0x8>

08006764 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800676e:	f7ff f92b 	bl	80059c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006772:	f107 0308 	add.w	r3, r7, #8
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f866 	bl	8006848 <prvSampleTimeNow>
 800677c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d130      	bne.n	80067e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <prvProcessTimerOrBlockTask+0x3c>
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	429a      	cmp	r2, r3
 8006790:	d806      	bhi.n	80067a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006792:	f7ff f927 	bl	80059e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff ff85 	bl	80066a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800679e:	e024      	b.n	80067ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067a6:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <prvProcessTimerOrBlockTask+0x90>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <prvProcessTimerOrBlockTask+0x50>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <prvProcessTimerOrBlockTask+0x52>
 80067b4:	2300      	movs	r3, #0
 80067b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067b8:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <prvProcessTimerOrBlockTask+0x94>)
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	4619      	mov	r1, r3
 80067c6:	f7fe fdfd 	bl	80053c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067ca:	f7ff f90b 	bl	80059e4 <xTaskResumeAll>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <prvProcessTimerOrBlockTask+0x98>)
 80067d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	f3bf 8f6f 	isb	sy
}
 80067e4:	e001      	b.n	80067ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067e6:	f7ff f8fd 	bl	80059e4 <xTaskResumeAll>
}
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000e58 	.word	0x20000e58
 80067f8:	20000e5c 	.word	0x20000e5c
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006808:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <prvGetNextExpireTime+0x44>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <prvGetNextExpireTime+0x16>
 8006812:	2201      	movs	r2, #1
 8006814:	e000      	b.n	8006818 <prvGetNextExpireTime+0x18>
 8006816:	2200      	movs	r2, #0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006824:	4b07      	ldr	r3, [pc, #28]	; (8006844 <prvGetNextExpireTime+0x44>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	e001      	b.n	8006834 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006834:	68fb      	ldr	r3, [r7, #12]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000e54 	.word	0x20000e54

08006848 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006850:	f7ff f966 	bl	8005b20 <xTaskGetTickCount>
 8006854:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006856:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <prvSampleTimeNow+0x3c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	429a      	cmp	r2, r3
 800685e:	d205      	bcs.n	800686c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006860:	f000 f936 	bl	8006ad0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	e002      	b.n	8006872 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006872:	4a04      	ldr	r2, [pc, #16]	; (8006884 <prvSampleTimeNow+0x3c>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006878:	68fb      	ldr	r3, [r7, #12]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000e64 	.word	0x20000e64

08006888 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d812      	bhi.n	80068d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	1ad2      	subs	r2, r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d302      	bcc.n	80068c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e01b      	b.n	80068fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <prvInsertTimerInActiveList+0x7c>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	4610      	mov	r0, r2
 80068ce:	f7fd fc86 	bl	80041de <vListInsert>
 80068d2:	e012      	b.n	80068fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d206      	bcs.n	80068ea <prvInsertTimerInActiveList+0x62>
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d302      	bcc.n	80068ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e007      	b.n	80068fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <prvInsertTimerInActiveList+0x80>)
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3304      	adds	r3, #4
 80068f2:	4619      	mov	r1, r3
 80068f4:	4610      	mov	r0, r2
 80068f6:	f7fd fc72 	bl	80041de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068fa:	697b      	ldr	r3, [r7, #20]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000e58 	.word	0x20000e58
 8006908:	20000e54 	.word	0x20000e54

0800690c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08e      	sub	sp, #56	; 0x38
 8006910:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006912:	e0ca      	b.n	8006aaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	da18      	bge.n	800694c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800691a:	1d3b      	adds	r3, r7, #4
 800691c:	3304      	adds	r3, #4
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	61fb      	str	r3, [r7, #28]
}
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006942:	6850      	ldr	r0, [r2, #4]
 8006944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006946:	6892      	ldr	r2, [r2, #8]
 8006948:	4611      	mov	r1, r2
 800694a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	f2c0 80ab 	blt.w	8006aaa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	3304      	adds	r3, #4
 8006964:	4618      	mov	r0, r3
 8006966:	f7fd fc73 	bl	8004250 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800696a:	463b      	mov	r3, r7
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff ff6b 	bl	8006848 <prvSampleTimeNow>
 8006972:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b09      	cmp	r3, #9
 8006978:	f200 8096 	bhi.w	8006aa8 <prvProcessReceivedCommands+0x19c>
 800697c:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <prvProcessReceivedCommands+0x78>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069ad 	.word	0x080069ad
 800698c:	080069ad 	.word	0x080069ad
 8006990:	08006a21 	.word	0x08006a21
 8006994:	08006a35 	.word	0x08006a35
 8006998:	08006a7f 	.word	0x08006a7f
 800699c:	080069ad 	.word	0x080069ad
 80069a0:	080069ad 	.word	0x080069ad
 80069a4:	08006a21 	.word	0x08006a21
 80069a8:	08006a35 	.word	0x08006a35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069b2:	f043 0301 	orr.w	r3, r3, #1
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	18d1      	adds	r1, r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069cc:	f7ff ff5c 	bl	8006888 <prvInsertTimerInActiveList>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d069      	beq.n	8006aaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d05e      	beq.n	8006aaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	441a      	add	r2, r3
 80069f4:	2300      	movs	r3, #0
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	2300      	movs	r3, #0
 80069fa:	2100      	movs	r1, #0
 80069fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069fe:	f7ff fe05 	bl	800660c <xTimerGenericCommand>
 8006a02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d14f      	bne.n	8006aaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	61bb      	str	r3, [r7, #24]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a26:	f023 0301 	bic.w	r3, r3, #1
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a32:	e03a      	b.n	8006aaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	617b      	str	r3, [r7, #20]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	18d1      	adds	r1, r2, r3
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a78:	f7ff ff06 	bl	8006888 <prvInsertTimerInActiveList>
					break;
 8006a7c:	e015      	b.n	8006aaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a8e:	f000 fbdf 	bl	8007250 <vPortFree>
 8006a92:	e00a      	b.n	8006aaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a9a:	f023 0301 	bic.w	r3, r3, #1
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006aa6:	e000      	b.n	8006aaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006aa8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006aaa:	4b08      	ldr	r3, [pc, #32]	; (8006acc <prvProcessReceivedCommands+0x1c0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	1d39      	adds	r1, r7, #4
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe f87a 	bl	8004bac <xQueueReceive>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f47f af2a 	bne.w	8006914 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop
 8006ac4:	3730      	adds	r7, #48	; 0x30
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20000e5c 	.word	0x20000e5c

08006ad0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ad6:	e048      	b.n	8006b6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ad8:	4b2d      	ldr	r3, [pc, #180]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae2:	4b2b      	ldr	r3, [pc, #172]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fd fbad 	bl	8004250 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d02e      	beq.n	8006b6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4413      	add	r3, r2
 8006b14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d90e      	bls.n	8006b3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b2a:	4b19      	ldr	r3, [pc, #100]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4619      	mov	r1, r3
 8006b34:	4610      	mov	r0, r2
 8006b36:	f7fd fb52 	bl	80041de <vListInsert>
 8006b3a:	e016      	b.n	8006b6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	2300      	movs	r3, #0
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	2100      	movs	r1, #0
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7ff fd60 	bl	800660c <xTimerGenericCommand>
 8006b4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	603b      	str	r3, [r7, #0]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1b1      	bne.n	8006ad8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b7a:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <prvSwitchTimerLists+0xc4>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a04      	ldr	r2, [pc, #16]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006b80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b82:	4a04      	ldr	r2, [pc, #16]	; (8006b94 <prvSwitchTimerLists+0xc4>)
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	6013      	str	r3, [r2, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000e54 	.word	0x20000e54
 8006b94:	20000e58 	.word	0x20000e58

08006b98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b9e:	f000 f969 	bl	8006e74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ba2:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d120      	bne.n	8006bec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006baa:	4814      	ldr	r0, [pc, #80]	; (8006bfc <prvCheckForValidListAndQueue+0x64>)
 8006bac:	f7fd fac6 	bl	800413c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bb0:	4813      	ldr	r0, [pc, #76]	; (8006c00 <prvCheckForValidListAndQueue+0x68>)
 8006bb2:	f7fd fac3 	bl	800413c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bb6:	4b13      	ldr	r3, [pc, #76]	; (8006c04 <prvCheckForValidListAndQueue+0x6c>)
 8006bb8:	4a10      	ldr	r2, [pc, #64]	; (8006bfc <prvCheckForValidListAndQueue+0x64>)
 8006bba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bbc:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <prvCheckForValidListAndQueue+0x70>)
 8006bbe:	4a10      	ldr	r2, [pc, #64]	; (8006c00 <prvCheckForValidListAndQueue+0x68>)
 8006bc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	4b11      	ldr	r3, [pc, #68]	; (8006c0c <prvCheckForValidListAndQueue+0x74>)
 8006bc8:	4a11      	ldr	r2, [pc, #68]	; (8006c10 <prvCheckForValidListAndQueue+0x78>)
 8006bca:	2110      	movs	r1, #16
 8006bcc:	200a      	movs	r0, #10
 8006bce:	f7fd fbd1 	bl	8004374 <xQueueGenericCreateStatic>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006bd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006bd8:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	490b      	ldr	r1, [pc, #44]	; (8006c14 <prvCheckForValidListAndQueue+0x7c>)
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fb98 	bl	800531c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bec:	f000 f972 	bl	8006ed4 <vPortExitCritical>
}
 8006bf0:	bf00      	nop
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000e5c 	.word	0x20000e5c
 8006bfc:	20000e2c 	.word	0x20000e2c
 8006c00:	20000e40 	.word	0x20000e40
 8006c04:	20000e54 	.word	0x20000e54
 8006c08:	20000e58 	.word	0x20000e58
 8006c0c:	20000f08 	.word	0x20000f08
 8006c10:	20000e68 	.word	0x20000e68
 8006c14:	08007f8c 	.word	0x08007f8c

08006c18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3b04      	subs	r3, #4
 8006c28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3b04      	subs	r3, #4
 8006c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f023 0201 	bic.w	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3b04      	subs	r3, #4
 8006c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c48:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <pxPortInitialiseStack+0x64>)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3b14      	subs	r3, #20
 8006c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3b04      	subs	r3, #4
 8006c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f06f 0202 	mvn.w	r2, #2
 8006c66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3b20      	subs	r3, #32
 8006c6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	08006c81 	.word	0x08006c81

08006c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <prvTaskExitError+0x54>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c92:	d00a      	beq.n	8006caa <prvTaskExitError+0x2a>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	60fb      	str	r3, [r7, #12]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <prvTaskExitError+0x28>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	60bb      	str	r3, [r7, #8]
}
 8006cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cbe:	bf00      	nop
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0fc      	beq.n	8006cc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	2000000c 	.word	0x2000000c
	...

08006ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ce0:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <pxCurrentTCBConst2>)
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	6808      	ldr	r0, [r1, #0]
 8006ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	f380 8809 	msr	PSP, r0
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f380 8811 	msr	BASEPRI, r0
 8006cfa:	4770      	bx	lr
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst2>:
 8006d00:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d08:	4808      	ldr	r0, [pc, #32]	; (8006d2c <prvPortStartFirstTask+0x24>)
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	6800      	ldr	r0, [r0, #0]
 8006d0e:	f380 8808 	msr	MSP, r0
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f380 8814 	msr	CONTROL, r0
 8006d1a:	b662      	cpsie	i
 8006d1c:	b661      	cpsie	f
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	df00      	svc	0
 8006d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d2a:	bf00      	nop
 8006d2c:	e000ed08 	.word	0xe000ed08

08006d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d36:	4b46      	ldr	r3, [pc, #280]	; (8006e50 <xPortStartScheduler+0x120>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a46      	ldr	r2, [pc, #280]	; (8006e54 <xPortStartScheduler+0x124>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10a      	bne.n	8006d56 <xPortStartScheduler+0x26>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	613b      	str	r3, [r7, #16]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d56:	4b3e      	ldr	r3, [pc, #248]	; (8006e50 <xPortStartScheduler+0x120>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a3f      	ldr	r2, [pc, #252]	; (8006e58 <xPortStartScheduler+0x128>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d10a      	bne.n	8006d76 <xPortStartScheduler+0x46>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60fb      	str	r3, [r7, #12]
}
 8006d72:	bf00      	nop
 8006d74:	e7fe      	b.n	8006d74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d76:	4b39      	ldr	r3, [pc, #228]	; (8006e5c <xPortStartScheduler+0x12c>)
 8006d78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	22ff      	movs	r2, #255	; 0xff
 8006d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	4b31      	ldr	r3, [pc, #196]	; (8006e60 <xPortStartScheduler+0x130>)
 8006d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d9e:	4b31      	ldr	r3, [pc, #196]	; (8006e64 <xPortStartScheduler+0x134>)
 8006da0:	2207      	movs	r2, #7
 8006da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006da4:	e009      	b.n	8006dba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006da6:	4b2f      	ldr	r3, [pc, #188]	; (8006e64 <xPortStartScheduler+0x134>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	4a2d      	ldr	r2, [pc, #180]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc2:	2b80      	cmp	r3, #128	; 0x80
 8006dc4:	d0ef      	beq.n	8006da6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dc6:	4b27      	ldr	r3, [pc, #156]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f1c3 0307 	rsb	r3, r3, #7
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d00a      	beq.n	8006de8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	60bb      	str	r3, [r7, #8]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006de8:	4b1e      	ldr	r3, [pc, #120]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <xPortStartScheduler+0x134>)
 8006df0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006df2:	4b1c      	ldr	r3, [pc, #112]	; (8006e64 <xPortStartScheduler+0x134>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dfa:	4a1a      	ldr	r2, [pc, #104]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e06:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e12:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a14      	ldr	r2, [pc, #80]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e1e:	f000 f8dd 	bl	8006fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e22:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <xPortStartScheduler+0x13c>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e28:	f000 f8fc 	bl	8007024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e2c:	4b10      	ldr	r3, [pc, #64]	; (8006e70 <xPortStartScheduler+0x140>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0f      	ldr	r2, [pc, #60]	; (8006e70 <xPortStartScheduler+0x140>)
 8006e32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e38:	f7ff ff66 	bl	8006d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e3c:	f7fe ff3a 	bl	8005cb4 <vTaskSwitchContext>
	prvTaskExitError();
 8006e40:	f7ff ff1e 	bl	8006c80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	e000ed00 	.word	0xe000ed00
 8006e54:	410fc271 	.word	0x410fc271
 8006e58:	410fc270 	.word	0x410fc270
 8006e5c:	e000e400 	.word	0xe000e400
 8006e60:	20000f58 	.word	0x20000f58
 8006e64:	20000f5c 	.word	0x20000f5c
 8006e68:	e000ed20 	.word	0xe000ed20
 8006e6c:	2000000c 	.word	0x2000000c
 8006e70:	e000ef34 	.word	0xe000ef34

08006e74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	607b      	str	r3, [r7, #4]
}
 8006e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <vPortEnterCritical+0x58>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3301      	adds	r3, #1
 8006e94:	4a0d      	ldr	r2, [pc, #52]	; (8006ecc <vPortEnterCritical+0x58>)
 8006e96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e98:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <vPortEnterCritical+0x58>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d10f      	bne.n	8006ec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <vPortEnterCritical+0x5c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	603b      	str	r3, [r7, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <vPortEnterCritical+0x4a>
	}
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	2000000c 	.word	0x2000000c
 8006ed0:	e000ed04 	.word	0xe000ed04

08006ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eda:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <vPortExitCritical+0x50>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <vPortExitCritical+0x24>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	607b      	str	r3, [r7, #4]
}
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <vPortExitCritical+0x50>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <vPortExitCritical+0x50>)
 8006f00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <vPortExitCritical+0x50>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d105      	bne.n	8006f16 <vPortExitCritical+0x42>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f383 8811 	msr	BASEPRI, r3
}
 8006f14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	2000000c 	.word	0x2000000c
	...

08006f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f30:	f3ef 8009 	mrs	r0, PSP
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <pxCurrentTCBConst>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	f01e 0f10 	tst.w	lr, #16
 8006f40:	bf08      	it	eq
 8006f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	6010      	str	r0, [r2, #0]
 8006f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f54:	f380 8811 	msr	BASEPRI, r0
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f7fe fea8 	bl	8005cb4 <vTaskSwitchContext>
 8006f64:	f04f 0000 	mov.w	r0, #0
 8006f68:	f380 8811 	msr	BASEPRI, r0
 8006f6c:	bc09      	pop	{r0, r3}
 8006f6e:	6819      	ldr	r1, [r3, #0]
 8006f70:	6808      	ldr	r0, [r1, #0]
 8006f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f76:	f01e 0f10 	tst.w	lr, #16
 8006f7a:	bf08      	it	eq
 8006f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f80:	f380 8809 	msr	PSP, r0
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w

08006f90 <pxCurrentTCBConst>:
 8006f90:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop

08006f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	607b      	str	r3, [r7, #4]
}
 8006fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fb2:	f7fe fdc5 	bl	8005b40 <xTaskIncrementTick>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fbc:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <xPortSysTickHandler+0x40>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f383 8811 	msr	BASEPRI, r3
}
 8006fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <vPortSetupTimerInterrupt+0x34>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <vPortSetupTimerInterrupt+0x38>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fec:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <vPortSetupTimerInterrupt+0x3c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a0a      	ldr	r2, [pc, #40]	; (800701c <vPortSetupTimerInterrupt+0x40>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	4a09      	ldr	r2, [pc, #36]	; (8007020 <vPortSetupTimerInterrupt+0x44>)
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ffe:	4b04      	ldr	r3, [pc, #16]	; (8007010 <vPortSetupTimerInterrupt+0x34>)
 8007000:	2207      	movs	r2, #7
 8007002:	601a      	str	r2, [r3, #0]
}
 8007004:	bf00      	nop
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	e000e010 	.word	0xe000e010
 8007014:	e000e018 	.word	0xe000e018
 8007018:	20000000 	.word	0x20000000
 800701c:	10624dd3 	.word	0x10624dd3
 8007020:	e000e014 	.word	0xe000e014

08007024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007034 <vPortEnableVFP+0x10>
 8007028:	6801      	ldr	r1, [r0, #0]
 800702a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800702e:	6001      	str	r1, [r0, #0]
 8007030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007032:	bf00      	nop
 8007034:	e000ed88 	.word	0xe000ed88

08007038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800703e:	f3ef 8305 	mrs	r3, IPSR
 8007042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b0f      	cmp	r3, #15
 8007048:	d914      	bls.n	8007074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800704a:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <vPortValidateInterruptPriority+0x70>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007054:	4b15      	ldr	r3, [pc, #84]	; (80070ac <vPortValidateInterruptPriority+0x74>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	7afa      	ldrb	r2, [r7, #11]
 800705a:	429a      	cmp	r2, r3
 800705c:	d20a      	bcs.n	8007074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	607b      	str	r3, [r7, #4]
}
 8007070:	bf00      	nop
 8007072:	e7fe      	b.n	8007072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007074:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <vPortValidateInterruptPriority+0x78>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800707c:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <vPortValidateInterruptPriority+0x7c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d90a      	bls.n	800709a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	603b      	str	r3, [r7, #0]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <vPortValidateInterruptPriority+0x60>
	}
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	e000e3f0 	.word	0xe000e3f0
 80070ac:	20000f58 	.word	0x20000f58
 80070b0:	e000ed0c 	.word	0xe000ed0c
 80070b4:	20000f5c 	.word	0x20000f5c

080070b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08a      	sub	sp, #40	; 0x28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070c4:	f7fe fc80 	bl	80059c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070c8:	4b5b      	ldr	r3, [pc, #364]	; (8007238 <pvPortMalloc+0x180>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070d0:	f000 f920 	bl	8007314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070d4:	4b59      	ldr	r3, [pc, #356]	; (800723c <pvPortMalloc+0x184>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8093 	bne.w	8007208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01d      	beq.n	8007124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80070e8:	2208      	movs	r2, #8
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d014      	beq.n	8007124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f023 0307 	bic.w	r3, r3, #7
 8007100:	3308      	adds	r3, #8
 8007102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <pvPortMalloc+0x6c>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	617b      	str	r3, [r7, #20]
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d06e      	beq.n	8007208 <pvPortMalloc+0x150>
 800712a:	4b45      	ldr	r3, [pc, #276]	; (8007240 <pvPortMalloc+0x188>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d869      	bhi.n	8007208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007134:	4b43      	ldr	r3, [pc, #268]	; (8007244 <pvPortMalloc+0x18c>)
 8007136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007138:	4b42      	ldr	r3, [pc, #264]	; (8007244 <pvPortMalloc+0x18c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800713e:	e004      	b.n	800714a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d903      	bls.n	800715c <pvPortMalloc+0xa4>
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1f1      	bne.n	8007140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800715c:	4b36      	ldr	r3, [pc, #216]	; (8007238 <pvPortMalloc+0x180>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007162:	429a      	cmp	r2, r3
 8007164:	d050      	beq.n	8007208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2208      	movs	r2, #8
 800716c:	4413      	add	r3, r2
 800716e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	1ad2      	subs	r2, r2, r3
 8007180:	2308      	movs	r3, #8
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	429a      	cmp	r2, r3
 8007186:	d91f      	bls.n	80071c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4413      	add	r3, r2
 800718e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <pvPortMalloc+0xf8>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	613b      	str	r3, [r7, #16]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	1ad2      	subs	r2, r2, r3
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071c2:	69b8      	ldr	r0, [r7, #24]
 80071c4:	f000 f908 	bl	80073d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071c8:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <pvPortMalloc+0x188>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	4a1b      	ldr	r2, [pc, #108]	; (8007240 <pvPortMalloc+0x188>)
 80071d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071d6:	4b1a      	ldr	r3, [pc, #104]	; (8007240 <pvPortMalloc+0x188>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b1b      	ldr	r3, [pc, #108]	; (8007248 <pvPortMalloc+0x190>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d203      	bcs.n	80071ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071e2:	4b17      	ldr	r3, [pc, #92]	; (8007240 <pvPortMalloc+0x188>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a18      	ldr	r2, [pc, #96]	; (8007248 <pvPortMalloc+0x190>)
 80071e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	4b13      	ldr	r3, [pc, #76]	; (800723c <pvPortMalloc+0x184>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80071fe:	4b13      	ldr	r3, [pc, #76]	; (800724c <pvPortMalloc+0x194>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	4a11      	ldr	r2, [pc, #68]	; (800724c <pvPortMalloc+0x194>)
 8007206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007208:	f7fe fbec 	bl	80059e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <pvPortMalloc+0x174>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60fb      	str	r3, [r7, #12]
}
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <pvPortMalloc+0x172>
	return pvReturn;
 800722c:	69fb      	ldr	r3, [r7, #28]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3728      	adds	r7, #40	; 0x28
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20004b68 	.word	0x20004b68
 800723c:	20004b7c 	.word	0x20004b7c
 8007240:	20004b6c 	.word	0x20004b6c
 8007244:	20004b60 	.word	0x20004b60
 8007248:	20004b70 	.word	0x20004b70
 800724c:	20004b74 	.word	0x20004b74

08007250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d04d      	beq.n	80072fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007262:	2308      	movs	r3, #8
 8007264:	425b      	negs	r3, r3
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4413      	add	r3, r2
 800726a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	4b24      	ldr	r3, [pc, #144]	; (8007308 <vPortFree+0xb8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <vPortFree+0x44>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60fb      	str	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <vPortFree+0x62>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	60bb      	str	r3, [r7, #8]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	4b14      	ldr	r3, [pc, #80]	; (8007308 <vPortFree+0xb8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01e      	beq.n	80072fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d11a      	bne.n	80072fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <vPortFree+0xb8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	43db      	mvns	r3, r3
 80072d2:	401a      	ands	r2, r3
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072d8:	f7fe fb76 	bl	80059c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <vPortFree+0xbc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4413      	add	r3, r2
 80072e6:	4a09      	ldr	r2, [pc, #36]	; (800730c <vPortFree+0xbc>)
 80072e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f000 f874 	bl	80073d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <vPortFree+0xc0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3301      	adds	r3, #1
 80072f6:	4a06      	ldr	r2, [pc, #24]	; (8007310 <vPortFree+0xc0>)
 80072f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80072fa:	f7fe fb73 	bl	80059e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20004b7c 	.word	0x20004b7c
 800730c:	20004b6c 	.word	0x20004b6c
 8007310:	20004b78 	.word	0x20004b78

08007314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800731a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800731e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007320:	4b27      	ldr	r3, [pc, #156]	; (80073c0 <prvHeapInit+0xac>)
 8007322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3307      	adds	r3, #7
 8007332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	4a1f      	ldr	r2, [pc, #124]	; (80073c0 <prvHeapInit+0xac>)
 8007344:	4413      	add	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800734c:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <prvHeapInit+0xb0>)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <prvHeapInit+0xb0>)
 8007354:	2200      	movs	r2, #0
 8007356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4413      	add	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007360:	2208      	movs	r2, #8
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0307 	bic.w	r3, r3, #7
 800736e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <prvHeapInit+0xb4>)
 8007374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007376:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <prvHeapInit+0xb4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800737e:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <prvHeapInit+0xb4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <prvHeapInit+0xb4>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	4a0a      	ldr	r2, [pc, #40]	; (80073cc <prvHeapInit+0xb8>)
 80073a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <prvHeapInit+0xbc>)
 80073aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073ac:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <prvHeapInit+0xc0>)
 80073ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	20000f60 	.word	0x20000f60
 80073c4:	20004b60 	.word	0x20004b60
 80073c8:	20004b68 	.word	0x20004b68
 80073cc:	20004b70 	.word	0x20004b70
 80073d0:	20004b6c 	.word	0x20004b6c
 80073d4:	20004b7c 	.word	0x20004b7c

080073d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073e0:	4b28      	ldr	r3, [pc, #160]	; (8007484 <prvInsertBlockIntoFreeList+0xac>)
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e002      	b.n	80073ec <prvInsertBlockIntoFreeList+0x14>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d8f7      	bhi.n	80073e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	4413      	add	r3, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d108      	bne.n	800741a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	441a      	add	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	441a      	add	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d118      	bne.n	8007460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b15      	ldr	r3, [pc, #84]	; (8007488 <prvInsertBlockIntoFreeList+0xb0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d00d      	beq.n	8007456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	441a      	add	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	e008      	b.n	8007468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007456:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <prvInsertBlockIntoFreeList+0xb0>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e003      	b.n	8007468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	429a      	cmp	r2, r3
 800746e:	d002      	beq.n	8007476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20004b60 	.word	0x20004b60
 8007488:	20004b68 	.word	0x20004b68

0800748c <siprintf>:
 800748c:	b40e      	push	{r1, r2, r3}
 800748e:	b500      	push	{lr}
 8007490:	b09c      	sub	sp, #112	; 0x70
 8007492:	ab1d      	add	r3, sp, #116	; 0x74
 8007494:	9002      	str	r0, [sp, #8]
 8007496:	9006      	str	r0, [sp, #24]
 8007498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800749c:	4809      	ldr	r0, [pc, #36]	; (80074c4 <siprintf+0x38>)
 800749e:	9107      	str	r1, [sp, #28]
 80074a0:	9104      	str	r1, [sp, #16]
 80074a2:	4909      	ldr	r1, [pc, #36]	; (80074c8 <siprintf+0x3c>)
 80074a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a8:	9105      	str	r1, [sp, #20]
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	a902      	add	r1, sp, #8
 80074b0:	f000 f9f6 	bl	80078a0 <_svfiprintf_r>
 80074b4:	9b02      	ldr	r3, [sp, #8]
 80074b6:	2200      	movs	r2, #0
 80074b8:	701a      	strb	r2, [r3, #0]
 80074ba:	b01c      	add	sp, #112	; 0x70
 80074bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074c0:	b003      	add	sp, #12
 80074c2:	4770      	bx	lr
 80074c4:	2000005c 	.word	0x2000005c
 80074c8:	ffff0208 	.word	0xffff0208

080074cc <memset>:
 80074cc:	4402      	add	r2, r0
 80074ce:	4603      	mov	r3, r0
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d100      	bne.n	80074d6 <memset+0xa>
 80074d4:	4770      	bx	lr
 80074d6:	f803 1b01 	strb.w	r1, [r3], #1
 80074da:	e7f9      	b.n	80074d0 <memset+0x4>

080074dc <_reclaim_reent>:
 80074dc:	4b29      	ldr	r3, [pc, #164]	; (8007584 <_reclaim_reent+0xa8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4283      	cmp	r3, r0
 80074e2:	b570      	push	{r4, r5, r6, lr}
 80074e4:	4604      	mov	r4, r0
 80074e6:	d04b      	beq.n	8007580 <_reclaim_reent+0xa4>
 80074e8:	69c3      	ldr	r3, [r0, #28]
 80074ea:	b143      	cbz	r3, 80074fe <_reclaim_reent+0x22>
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d144      	bne.n	800757c <_reclaim_reent+0xa0>
 80074f2:	69e3      	ldr	r3, [r4, #28]
 80074f4:	6819      	ldr	r1, [r3, #0]
 80074f6:	b111      	cbz	r1, 80074fe <_reclaim_reent+0x22>
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 f87f 	bl	80075fc <_free_r>
 80074fe:	6961      	ldr	r1, [r4, #20]
 8007500:	b111      	cbz	r1, 8007508 <_reclaim_reent+0x2c>
 8007502:	4620      	mov	r0, r4
 8007504:	f000 f87a 	bl	80075fc <_free_r>
 8007508:	69e1      	ldr	r1, [r4, #28]
 800750a:	b111      	cbz	r1, 8007512 <_reclaim_reent+0x36>
 800750c:	4620      	mov	r0, r4
 800750e:	f000 f875 	bl	80075fc <_free_r>
 8007512:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007514:	b111      	cbz	r1, 800751c <_reclaim_reent+0x40>
 8007516:	4620      	mov	r0, r4
 8007518:	f000 f870 	bl	80075fc <_free_r>
 800751c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800751e:	b111      	cbz	r1, 8007526 <_reclaim_reent+0x4a>
 8007520:	4620      	mov	r0, r4
 8007522:	f000 f86b 	bl	80075fc <_free_r>
 8007526:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007528:	b111      	cbz	r1, 8007530 <_reclaim_reent+0x54>
 800752a:	4620      	mov	r0, r4
 800752c:	f000 f866 	bl	80075fc <_free_r>
 8007530:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007532:	b111      	cbz	r1, 800753a <_reclaim_reent+0x5e>
 8007534:	4620      	mov	r0, r4
 8007536:	f000 f861 	bl	80075fc <_free_r>
 800753a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800753c:	b111      	cbz	r1, 8007544 <_reclaim_reent+0x68>
 800753e:	4620      	mov	r0, r4
 8007540:	f000 f85c 	bl	80075fc <_free_r>
 8007544:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007546:	b111      	cbz	r1, 800754e <_reclaim_reent+0x72>
 8007548:	4620      	mov	r0, r4
 800754a:	f000 f857 	bl	80075fc <_free_r>
 800754e:	6a23      	ldr	r3, [r4, #32]
 8007550:	b1b3      	cbz	r3, 8007580 <_reclaim_reent+0xa4>
 8007552:	4620      	mov	r0, r4
 8007554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007558:	4718      	bx	r3
 800755a:	5949      	ldr	r1, [r1, r5]
 800755c:	b941      	cbnz	r1, 8007570 <_reclaim_reent+0x94>
 800755e:	3504      	adds	r5, #4
 8007560:	69e3      	ldr	r3, [r4, #28]
 8007562:	2d80      	cmp	r5, #128	; 0x80
 8007564:	68d9      	ldr	r1, [r3, #12]
 8007566:	d1f8      	bne.n	800755a <_reclaim_reent+0x7e>
 8007568:	4620      	mov	r0, r4
 800756a:	f000 f847 	bl	80075fc <_free_r>
 800756e:	e7c0      	b.n	80074f2 <_reclaim_reent+0x16>
 8007570:	680e      	ldr	r6, [r1, #0]
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f842 	bl	80075fc <_free_r>
 8007578:	4631      	mov	r1, r6
 800757a:	e7ef      	b.n	800755c <_reclaim_reent+0x80>
 800757c:	2500      	movs	r5, #0
 800757e:	e7ef      	b.n	8007560 <_reclaim_reent+0x84>
 8007580:	bd70      	pop	{r4, r5, r6, pc}
 8007582:	bf00      	nop
 8007584:	2000005c 	.word	0x2000005c

08007588 <__errno>:
 8007588:	4b01      	ldr	r3, [pc, #4]	; (8007590 <__errno+0x8>)
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	2000005c 	.word	0x2000005c

08007594 <__libc_init_array>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	4d0d      	ldr	r5, [pc, #52]	; (80075cc <__libc_init_array+0x38>)
 8007598:	4c0d      	ldr	r4, [pc, #52]	; (80075d0 <__libc_init_array+0x3c>)
 800759a:	1b64      	subs	r4, r4, r5
 800759c:	10a4      	asrs	r4, r4, #2
 800759e:	2600      	movs	r6, #0
 80075a0:	42a6      	cmp	r6, r4
 80075a2:	d109      	bne.n	80075b8 <__libc_init_array+0x24>
 80075a4:	4d0b      	ldr	r5, [pc, #44]	; (80075d4 <__libc_init_array+0x40>)
 80075a6:	4c0c      	ldr	r4, [pc, #48]	; (80075d8 <__libc_init_array+0x44>)
 80075a8:	f000 fc6a 	bl	8007e80 <_init>
 80075ac:	1b64      	subs	r4, r4, r5
 80075ae:	10a4      	asrs	r4, r4, #2
 80075b0:	2600      	movs	r6, #0
 80075b2:	42a6      	cmp	r6, r4
 80075b4:	d105      	bne.n	80075c2 <__libc_init_array+0x2e>
 80075b6:	bd70      	pop	{r4, r5, r6, pc}
 80075b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075bc:	4798      	blx	r3
 80075be:	3601      	adds	r6, #1
 80075c0:	e7ee      	b.n	80075a0 <__libc_init_array+0xc>
 80075c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c6:	4798      	blx	r3
 80075c8:	3601      	adds	r6, #1
 80075ca:	e7f2      	b.n	80075b2 <__libc_init_array+0x1e>
 80075cc:	08008144 	.word	0x08008144
 80075d0:	08008144 	.word	0x08008144
 80075d4:	08008144 	.word	0x08008144
 80075d8:	08008148 	.word	0x08008148

080075dc <__retarget_lock_acquire_recursive>:
 80075dc:	4770      	bx	lr

080075de <__retarget_lock_release_recursive>:
 80075de:	4770      	bx	lr

080075e0 <memcpy>:
 80075e0:	440a      	add	r2, r1
 80075e2:	4291      	cmp	r1, r2
 80075e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80075e8:	d100      	bne.n	80075ec <memcpy+0xc>
 80075ea:	4770      	bx	lr
 80075ec:	b510      	push	{r4, lr}
 80075ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f6:	4291      	cmp	r1, r2
 80075f8:	d1f9      	bne.n	80075ee <memcpy+0xe>
 80075fa:	bd10      	pop	{r4, pc}

080075fc <_free_r>:
 80075fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075fe:	2900      	cmp	r1, #0
 8007600:	d044      	beq.n	800768c <_free_r+0x90>
 8007602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007606:	9001      	str	r0, [sp, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f1a1 0404 	sub.w	r4, r1, #4
 800760e:	bfb8      	it	lt
 8007610:	18e4      	addlt	r4, r4, r3
 8007612:	f000 f8df 	bl	80077d4 <__malloc_lock>
 8007616:	4a1e      	ldr	r2, [pc, #120]	; (8007690 <_free_r+0x94>)
 8007618:	9801      	ldr	r0, [sp, #4]
 800761a:	6813      	ldr	r3, [r2, #0]
 800761c:	b933      	cbnz	r3, 800762c <_free_r+0x30>
 800761e:	6063      	str	r3, [r4, #4]
 8007620:	6014      	str	r4, [r2, #0]
 8007622:	b003      	add	sp, #12
 8007624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007628:	f000 b8da 	b.w	80077e0 <__malloc_unlock>
 800762c:	42a3      	cmp	r3, r4
 800762e:	d908      	bls.n	8007642 <_free_r+0x46>
 8007630:	6825      	ldr	r5, [r4, #0]
 8007632:	1961      	adds	r1, r4, r5
 8007634:	428b      	cmp	r3, r1
 8007636:	bf01      	itttt	eq
 8007638:	6819      	ldreq	r1, [r3, #0]
 800763a:	685b      	ldreq	r3, [r3, #4]
 800763c:	1949      	addeq	r1, r1, r5
 800763e:	6021      	streq	r1, [r4, #0]
 8007640:	e7ed      	b.n	800761e <_free_r+0x22>
 8007642:	461a      	mov	r2, r3
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	b10b      	cbz	r3, 800764c <_free_r+0x50>
 8007648:	42a3      	cmp	r3, r4
 800764a:	d9fa      	bls.n	8007642 <_free_r+0x46>
 800764c:	6811      	ldr	r1, [r2, #0]
 800764e:	1855      	adds	r5, r2, r1
 8007650:	42a5      	cmp	r5, r4
 8007652:	d10b      	bne.n	800766c <_free_r+0x70>
 8007654:	6824      	ldr	r4, [r4, #0]
 8007656:	4421      	add	r1, r4
 8007658:	1854      	adds	r4, r2, r1
 800765a:	42a3      	cmp	r3, r4
 800765c:	6011      	str	r1, [r2, #0]
 800765e:	d1e0      	bne.n	8007622 <_free_r+0x26>
 8007660:	681c      	ldr	r4, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	6053      	str	r3, [r2, #4]
 8007666:	440c      	add	r4, r1
 8007668:	6014      	str	r4, [r2, #0]
 800766a:	e7da      	b.n	8007622 <_free_r+0x26>
 800766c:	d902      	bls.n	8007674 <_free_r+0x78>
 800766e:	230c      	movs	r3, #12
 8007670:	6003      	str	r3, [r0, #0]
 8007672:	e7d6      	b.n	8007622 <_free_r+0x26>
 8007674:	6825      	ldr	r5, [r4, #0]
 8007676:	1961      	adds	r1, r4, r5
 8007678:	428b      	cmp	r3, r1
 800767a:	bf04      	itt	eq
 800767c:	6819      	ldreq	r1, [r3, #0]
 800767e:	685b      	ldreq	r3, [r3, #4]
 8007680:	6063      	str	r3, [r4, #4]
 8007682:	bf04      	itt	eq
 8007684:	1949      	addeq	r1, r1, r5
 8007686:	6021      	streq	r1, [r4, #0]
 8007688:	6054      	str	r4, [r2, #4]
 800768a:	e7ca      	b.n	8007622 <_free_r+0x26>
 800768c:	b003      	add	sp, #12
 800768e:	bd30      	pop	{r4, r5, pc}
 8007690:	20004cc0 	.word	0x20004cc0

08007694 <sbrk_aligned>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	4e0e      	ldr	r6, [pc, #56]	; (80076d0 <sbrk_aligned+0x3c>)
 8007698:	460c      	mov	r4, r1
 800769a:	6831      	ldr	r1, [r6, #0]
 800769c:	4605      	mov	r5, r0
 800769e:	b911      	cbnz	r1, 80076a6 <sbrk_aligned+0x12>
 80076a0:	f000 fba6 	bl	8007df0 <_sbrk_r>
 80076a4:	6030      	str	r0, [r6, #0]
 80076a6:	4621      	mov	r1, r4
 80076a8:	4628      	mov	r0, r5
 80076aa:	f000 fba1 	bl	8007df0 <_sbrk_r>
 80076ae:	1c43      	adds	r3, r0, #1
 80076b0:	d00a      	beq.n	80076c8 <sbrk_aligned+0x34>
 80076b2:	1cc4      	adds	r4, r0, #3
 80076b4:	f024 0403 	bic.w	r4, r4, #3
 80076b8:	42a0      	cmp	r0, r4
 80076ba:	d007      	beq.n	80076cc <sbrk_aligned+0x38>
 80076bc:	1a21      	subs	r1, r4, r0
 80076be:	4628      	mov	r0, r5
 80076c0:	f000 fb96 	bl	8007df0 <_sbrk_r>
 80076c4:	3001      	adds	r0, #1
 80076c6:	d101      	bne.n	80076cc <sbrk_aligned+0x38>
 80076c8:	f04f 34ff 	mov.w	r4, #4294967295
 80076cc:	4620      	mov	r0, r4
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	20004cc4 	.word	0x20004cc4

080076d4 <_malloc_r>:
 80076d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d8:	1ccd      	adds	r5, r1, #3
 80076da:	f025 0503 	bic.w	r5, r5, #3
 80076de:	3508      	adds	r5, #8
 80076e0:	2d0c      	cmp	r5, #12
 80076e2:	bf38      	it	cc
 80076e4:	250c      	movcc	r5, #12
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	4607      	mov	r7, r0
 80076ea:	db01      	blt.n	80076f0 <_malloc_r+0x1c>
 80076ec:	42a9      	cmp	r1, r5
 80076ee:	d905      	bls.n	80076fc <_malloc_r+0x28>
 80076f0:	230c      	movs	r3, #12
 80076f2:	603b      	str	r3, [r7, #0]
 80076f4:	2600      	movs	r6, #0
 80076f6:	4630      	mov	r0, r6
 80076f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077d0 <_malloc_r+0xfc>
 8007700:	f000 f868 	bl	80077d4 <__malloc_lock>
 8007704:	f8d8 3000 	ldr.w	r3, [r8]
 8007708:	461c      	mov	r4, r3
 800770a:	bb5c      	cbnz	r4, 8007764 <_malloc_r+0x90>
 800770c:	4629      	mov	r1, r5
 800770e:	4638      	mov	r0, r7
 8007710:	f7ff ffc0 	bl	8007694 <sbrk_aligned>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	4604      	mov	r4, r0
 8007718:	d155      	bne.n	80077c6 <_malloc_r+0xf2>
 800771a:	f8d8 4000 	ldr.w	r4, [r8]
 800771e:	4626      	mov	r6, r4
 8007720:	2e00      	cmp	r6, #0
 8007722:	d145      	bne.n	80077b0 <_malloc_r+0xdc>
 8007724:	2c00      	cmp	r4, #0
 8007726:	d048      	beq.n	80077ba <_malloc_r+0xe6>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	4631      	mov	r1, r6
 800772c:	4638      	mov	r0, r7
 800772e:	eb04 0903 	add.w	r9, r4, r3
 8007732:	f000 fb5d 	bl	8007df0 <_sbrk_r>
 8007736:	4581      	cmp	r9, r0
 8007738:	d13f      	bne.n	80077ba <_malloc_r+0xe6>
 800773a:	6821      	ldr	r1, [r4, #0]
 800773c:	1a6d      	subs	r5, r5, r1
 800773e:	4629      	mov	r1, r5
 8007740:	4638      	mov	r0, r7
 8007742:	f7ff ffa7 	bl	8007694 <sbrk_aligned>
 8007746:	3001      	adds	r0, #1
 8007748:	d037      	beq.n	80077ba <_malloc_r+0xe6>
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	442b      	add	r3, r5
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	f8d8 3000 	ldr.w	r3, [r8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d038      	beq.n	80077ca <_malloc_r+0xf6>
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	42a2      	cmp	r2, r4
 800775c:	d12b      	bne.n	80077b6 <_malloc_r+0xe2>
 800775e:	2200      	movs	r2, #0
 8007760:	605a      	str	r2, [r3, #4]
 8007762:	e00f      	b.n	8007784 <_malloc_r+0xb0>
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	1b52      	subs	r2, r2, r5
 8007768:	d41f      	bmi.n	80077aa <_malloc_r+0xd6>
 800776a:	2a0b      	cmp	r2, #11
 800776c:	d917      	bls.n	800779e <_malloc_r+0xca>
 800776e:	1961      	adds	r1, r4, r5
 8007770:	42a3      	cmp	r3, r4
 8007772:	6025      	str	r5, [r4, #0]
 8007774:	bf18      	it	ne
 8007776:	6059      	strne	r1, [r3, #4]
 8007778:	6863      	ldr	r3, [r4, #4]
 800777a:	bf08      	it	eq
 800777c:	f8c8 1000 	streq.w	r1, [r8]
 8007780:	5162      	str	r2, [r4, r5]
 8007782:	604b      	str	r3, [r1, #4]
 8007784:	4638      	mov	r0, r7
 8007786:	f104 060b 	add.w	r6, r4, #11
 800778a:	f000 f829 	bl	80077e0 <__malloc_unlock>
 800778e:	f026 0607 	bic.w	r6, r6, #7
 8007792:	1d23      	adds	r3, r4, #4
 8007794:	1af2      	subs	r2, r6, r3
 8007796:	d0ae      	beq.n	80076f6 <_malloc_r+0x22>
 8007798:	1b9b      	subs	r3, r3, r6
 800779a:	50a3      	str	r3, [r4, r2]
 800779c:	e7ab      	b.n	80076f6 <_malloc_r+0x22>
 800779e:	42a3      	cmp	r3, r4
 80077a0:	6862      	ldr	r2, [r4, #4]
 80077a2:	d1dd      	bne.n	8007760 <_malloc_r+0x8c>
 80077a4:	f8c8 2000 	str.w	r2, [r8]
 80077a8:	e7ec      	b.n	8007784 <_malloc_r+0xb0>
 80077aa:	4623      	mov	r3, r4
 80077ac:	6864      	ldr	r4, [r4, #4]
 80077ae:	e7ac      	b.n	800770a <_malloc_r+0x36>
 80077b0:	4634      	mov	r4, r6
 80077b2:	6876      	ldr	r6, [r6, #4]
 80077b4:	e7b4      	b.n	8007720 <_malloc_r+0x4c>
 80077b6:	4613      	mov	r3, r2
 80077b8:	e7cc      	b.n	8007754 <_malloc_r+0x80>
 80077ba:	230c      	movs	r3, #12
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	4638      	mov	r0, r7
 80077c0:	f000 f80e 	bl	80077e0 <__malloc_unlock>
 80077c4:	e797      	b.n	80076f6 <_malloc_r+0x22>
 80077c6:	6025      	str	r5, [r4, #0]
 80077c8:	e7dc      	b.n	8007784 <_malloc_r+0xb0>
 80077ca:	605b      	str	r3, [r3, #4]
 80077cc:	deff      	udf	#255	; 0xff
 80077ce:	bf00      	nop
 80077d0:	20004cc0 	.word	0x20004cc0

080077d4 <__malloc_lock>:
 80077d4:	4801      	ldr	r0, [pc, #4]	; (80077dc <__malloc_lock+0x8>)
 80077d6:	f7ff bf01 	b.w	80075dc <__retarget_lock_acquire_recursive>
 80077da:	bf00      	nop
 80077dc:	20004cbc 	.word	0x20004cbc

080077e0 <__malloc_unlock>:
 80077e0:	4801      	ldr	r0, [pc, #4]	; (80077e8 <__malloc_unlock+0x8>)
 80077e2:	f7ff befc 	b.w	80075de <__retarget_lock_release_recursive>
 80077e6:	bf00      	nop
 80077e8:	20004cbc 	.word	0x20004cbc

080077ec <__ssputs_r>:
 80077ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	688e      	ldr	r6, [r1, #8]
 80077f2:	461f      	mov	r7, r3
 80077f4:	42be      	cmp	r6, r7
 80077f6:	680b      	ldr	r3, [r1, #0]
 80077f8:	4682      	mov	sl, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	4690      	mov	r8, r2
 80077fe:	d82c      	bhi.n	800785a <__ssputs_r+0x6e>
 8007800:	898a      	ldrh	r2, [r1, #12]
 8007802:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007806:	d026      	beq.n	8007856 <__ssputs_r+0x6a>
 8007808:	6965      	ldr	r5, [r4, #20]
 800780a:	6909      	ldr	r1, [r1, #16]
 800780c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007810:	eba3 0901 	sub.w	r9, r3, r1
 8007814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007818:	1c7b      	adds	r3, r7, #1
 800781a:	444b      	add	r3, r9
 800781c:	106d      	asrs	r5, r5, #1
 800781e:	429d      	cmp	r5, r3
 8007820:	bf38      	it	cc
 8007822:	461d      	movcc	r5, r3
 8007824:	0553      	lsls	r3, r2, #21
 8007826:	d527      	bpl.n	8007878 <__ssputs_r+0x8c>
 8007828:	4629      	mov	r1, r5
 800782a:	f7ff ff53 	bl	80076d4 <_malloc_r>
 800782e:	4606      	mov	r6, r0
 8007830:	b360      	cbz	r0, 800788c <__ssputs_r+0xa0>
 8007832:	6921      	ldr	r1, [r4, #16]
 8007834:	464a      	mov	r2, r9
 8007836:	f7ff fed3 	bl	80075e0 <memcpy>
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007844:	81a3      	strh	r3, [r4, #12]
 8007846:	6126      	str	r6, [r4, #16]
 8007848:	6165      	str	r5, [r4, #20]
 800784a:	444e      	add	r6, r9
 800784c:	eba5 0509 	sub.w	r5, r5, r9
 8007850:	6026      	str	r6, [r4, #0]
 8007852:	60a5      	str	r5, [r4, #8]
 8007854:	463e      	mov	r6, r7
 8007856:	42be      	cmp	r6, r7
 8007858:	d900      	bls.n	800785c <__ssputs_r+0x70>
 800785a:	463e      	mov	r6, r7
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	4632      	mov	r2, r6
 8007860:	4641      	mov	r1, r8
 8007862:	f000 faab 	bl	8007dbc <memmove>
 8007866:	68a3      	ldr	r3, [r4, #8]
 8007868:	1b9b      	subs	r3, r3, r6
 800786a:	60a3      	str	r3, [r4, #8]
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	4433      	add	r3, r6
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	2000      	movs	r0, #0
 8007874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007878:	462a      	mov	r2, r5
 800787a:	f000 fac9 	bl	8007e10 <_realloc_r>
 800787e:	4606      	mov	r6, r0
 8007880:	2800      	cmp	r0, #0
 8007882:	d1e0      	bne.n	8007846 <__ssputs_r+0x5a>
 8007884:	6921      	ldr	r1, [r4, #16]
 8007886:	4650      	mov	r0, sl
 8007888:	f7ff feb8 	bl	80075fc <_free_r>
 800788c:	230c      	movs	r3, #12
 800788e:	f8ca 3000 	str.w	r3, [sl]
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007898:	81a3      	strh	r3, [r4, #12]
 800789a:	f04f 30ff 	mov.w	r0, #4294967295
 800789e:	e7e9      	b.n	8007874 <__ssputs_r+0x88>

080078a0 <_svfiprintf_r>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	4698      	mov	r8, r3
 80078a6:	898b      	ldrh	r3, [r1, #12]
 80078a8:	061b      	lsls	r3, r3, #24
 80078aa:	b09d      	sub	sp, #116	; 0x74
 80078ac:	4607      	mov	r7, r0
 80078ae:	460d      	mov	r5, r1
 80078b0:	4614      	mov	r4, r2
 80078b2:	d50e      	bpl.n	80078d2 <_svfiprintf_r+0x32>
 80078b4:	690b      	ldr	r3, [r1, #16]
 80078b6:	b963      	cbnz	r3, 80078d2 <_svfiprintf_r+0x32>
 80078b8:	2140      	movs	r1, #64	; 0x40
 80078ba:	f7ff ff0b 	bl	80076d4 <_malloc_r>
 80078be:	6028      	str	r0, [r5, #0]
 80078c0:	6128      	str	r0, [r5, #16]
 80078c2:	b920      	cbnz	r0, 80078ce <_svfiprintf_r+0x2e>
 80078c4:	230c      	movs	r3, #12
 80078c6:	603b      	str	r3, [r7, #0]
 80078c8:	f04f 30ff 	mov.w	r0, #4294967295
 80078cc:	e0d0      	b.n	8007a70 <_svfiprintf_r+0x1d0>
 80078ce:	2340      	movs	r3, #64	; 0x40
 80078d0:	616b      	str	r3, [r5, #20]
 80078d2:	2300      	movs	r3, #0
 80078d4:	9309      	str	r3, [sp, #36]	; 0x24
 80078d6:	2320      	movs	r3, #32
 80078d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80078e0:	2330      	movs	r3, #48	; 0x30
 80078e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007a88 <_svfiprintf_r+0x1e8>
 80078e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078ea:	f04f 0901 	mov.w	r9, #1
 80078ee:	4623      	mov	r3, r4
 80078f0:	469a      	mov	sl, r3
 80078f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078f6:	b10a      	cbz	r2, 80078fc <_svfiprintf_r+0x5c>
 80078f8:	2a25      	cmp	r2, #37	; 0x25
 80078fa:	d1f9      	bne.n	80078f0 <_svfiprintf_r+0x50>
 80078fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007900:	d00b      	beq.n	800791a <_svfiprintf_r+0x7a>
 8007902:	465b      	mov	r3, fp
 8007904:	4622      	mov	r2, r4
 8007906:	4629      	mov	r1, r5
 8007908:	4638      	mov	r0, r7
 800790a:	f7ff ff6f 	bl	80077ec <__ssputs_r>
 800790e:	3001      	adds	r0, #1
 8007910:	f000 80a9 	beq.w	8007a66 <_svfiprintf_r+0x1c6>
 8007914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007916:	445a      	add	r2, fp
 8007918:	9209      	str	r2, [sp, #36]	; 0x24
 800791a:	f89a 3000 	ldrb.w	r3, [sl]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 80a1 	beq.w	8007a66 <_svfiprintf_r+0x1c6>
 8007924:	2300      	movs	r3, #0
 8007926:	f04f 32ff 	mov.w	r2, #4294967295
 800792a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800792e:	f10a 0a01 	add.w	sl, sl, #1
 8007932:	9304      	str	r3, [sp, #16]
 8007934:	9307      	str	r3, [sp, #28]
 8007936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800793a:	931a      	str	r3, [sp, #104]	; 0x68
 800793c:	4654      	mov	r4, sl
 800793e:	2205      	movs	r2, #5
 8007940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007944:	4850      	ldr	r0, [pc, #320]	; (8007a88 <_svfiprintf_r+0x1e8>)
 8007946:	f7f8 fc43 	bl	80001d0 <memchr>
 800794a:	9a04      	ldr	r2, [sp, #16]
 800794c:	b9d8      	cbnz	r0, 8007986 <_svfiprintf_r+0xe6>
 800794e:	06d0      	lsls	r0, r2, #27
 8007950:	bf44      	itt	mi
 8007952:	2320      	movmi	r3, #32
 8007954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007958:	0711      	lsls	r1, r2, #28
 800795a:	bf44      	itt	mi
 800795c:	232b      	movmi	r3, #43	; 0x2b
 800795e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007962:	f89a 3000 	ldrb.w	r3, [sl]
 8007966:	2b2a      	cmp	r3, #42	; 0x2a
 8007968:	d015      	beq.n	8007996 <_svfiprintf_r+0xf6>
 800796a:	9a07      	ldr	r2, [sp, #28]
 800796c:	4654      	mov	r4, sl
 800796e:	2000      	movs	r0, #0
 8007970:	f04f 0c0a 	mov.w	ip, #10
 8007974:	4621      	mov	r1, r4
 8007976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800797a:	3b30      	subs	r3, #48	; 0x30
 800797c:	2b09      	cmp	r3, #9
 800797e:	d94d      	bls.n	8007a1c <_svfiprintf_r+0x17c>
 8007980:	b1b0      	cbz	r0, 80079b0 <_svfiprintf_r+0x110>
 8007982:	9207      	str	r2, [sp, #28]
 8007984:	e014      	b.n	80079b0 <_svfiprintf_r+0x110>
 8007986:	eba0 0308 	sub.w	r3, r0, r8
 800798a:	fa09 f303 	lsl.w	r3, r9, r3
 800798e:	4313      	orrs	r3, r2
 8007990:	9304      	str	r3, [sp, #16]
 8007992:	46a2      	mov	sl, r4
 8007994:	e7d2      	b.n	800793c <_svfiprintf_r+0x9c>
 8007996:	9b03      	ldr	r3, [sp, #12]
 8007998:	1d19      	adds	r1, r3, #4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	9103      	str	r1, [sp, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	bfbb      	ittet	lt
 80079a2:	425b      	neglt	r3, r3
 80079a4:	f042 0202 	orrlt.w	r2, r2, #2
 80079a8:	9307      	strge	r3, [sp, #28]
 80079aa:	9307      	strlt	r3, [sp, #28]
 80079ac:	bfb8      	it	lt
 80079ae:	9204      	strlt	r2, [sp, #16]
 80079b0:	7823      	ldrb	r3, [r4, #0]
 80079b2:	2b2e      	cmp	r3, #46	; 0x2e
 80079b4:	d10c      	bne.n	80079d0 <_svfiprintf_r+0x130>
 80079b6:	7863      	ldrb	r3, [r4, #1]
 80079b8:	2b2a      	cmp	r3, #42	; 0x2a
 80079ba:	d134      	bne.n	8007a26 <_svfiprintf_r+0x186>
 80079bc:	9b03      	ldr	r3, [sp, #12]
 80079be:	1d1a      	adds	r2, r3, #4
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	9203      	str	r2, [sp, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bfb8      	it	lt
 80079c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80079cc:	3402      	adds	r4, #2
 80079ce:	9305      	str	r3, [sp, #20]
 80079d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007a98 <_svfiprintf_r+0x1f8>
 80079d4:	7821      	ldrb	r1, [r4, #0]
 80079d6:	2203      	movs	r2, #3
 80079d8:	4650      	mov	r0, sl
 80079da:	f7f8 fbf9 	bl	80001d0 <memchr>
 80079de:	b138      	cbz	r0, 80079f0 <_svfiprintf_r+0x150>
 80079e0:	9b04      	ldr	r3, [sp, #16]
 80079e2:	eba0 000a 	sub.w	r0, r0, sl
 80079e6:	2240      	movs	r2, #64	; 0x40
 80079e8:	4082      	lsls	r2, r0
 80079ea:	4313      	orrs	r3, r2
 80079ec:	3401      	adds	r4, #1
 80079ee:	9304      	str	r3, [sp, #16]
 80079f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f4:	4825      	ldr	r0, [pc, #148]	; (8007a8c <_svfiprintf_r+0x1ec>)
 80079f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079fa:	2206      	movs	r2, #6
 80079fc:	f7f8 fbe8 	bl	80001d0 <memchr>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d038      	beq.n	8007a76 <_svfiprintf_r+0x1d6>
 8007a04:	4b22      	ldr	r3, [pc, #136]	; (8007a90 <_svfiprintf_r+0x1f0>)
 8007a06:	bb1b      	cbnz	r3, 8007a50 <_svfiprintf_r+0x1b0>
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	3307      	adds	r3, #7
 8007a0c:	f023 0307 	bic.w	r3, r3, #7
 8007a10:	3308      	adds	r3, #8
 8007a12:	9303      	str	r3, [sp, #12]
 8007a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a16:	4433      	add	r3, r6
 8007a18:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1a:	e768      	b.n	80078ee <_svfiprintf_r+0x4e>
 8007a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a20:	460c      	mov	r4, r1
 8007a22:	2001      	movs	r0, #1
 8007a24:	e7a6      	b.n	8007974 <_svfiprintf_r+0xd4>
 8007a26:	2300      	movs	r3, #0
 8007a28:	3401      	adds	r4, #1
 8007a2a:	9305      	str	r3, [sp, #20]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f04f 0c0a 	mov.w	ip, #10
 8007a32:	4620      	mov	r0, r4
 8007a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a38:	3a30      	subs	r2, #48	; 0x30
 8007a3a:	2a09      	cmp	r2, #9
 8007a3c:	d903      	bls.n	8007a46 <_svfiprintf_r+0x1a6>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0c6      	beq.n	80079d0 <_svfiprintf_r+0x130>
 8007a42:	9105      	str	r1, [sp, #20]
 8007a44:	e7c4      	b.n	80079d0 <_svfiprintf_r+0x130>
 8007a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e7f0      	b.n	8007a32 <_svfiprintf_r+0x192>
 8007a50:	ab03      	add	r3, sp, #12
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	462a      	mov	r2, r5
 8007a56:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <_svfiprintf_r+0x1f4>)
 8007a58:	a904      	add	r1, sp, #16
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f3af 8000 	nop.w
 8007a60:	1c42      	adds	r2, r0, #1
 8007a62:	4606      	mov	r6, r0
 8007a64:	d1d6      	bne.n	8007a14 <_svfiprintf_r+0x174>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	065b      	lsls	r3, r3, #25
 8007a6a:	f53f af2d 	bmi.w	80078c8 <_svfiprintf_r+0x28>
 8007a6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a70:	b01d      	add	sp, #116	; 0x74
 8007a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a76:	ab03      	add	r3, sp, #12
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	462a      	mov	r2, r5
 8007a7c:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <_svfiprintf_r+0x1f4>)
 8007a7e:	a904      	add	r1, sp, #16
 8007a80:	4638      	mov	r0, r7
 8007a82:	f000 f879 	bl	8007b78 <_printf_i>
 8007a86:	e7eb      	b.n	8007a60 <_svfiprintf_r+0x1c0>
 8007a88:	08008108 	.word	0x08008108
 8007a8c:	08008112 	.word	0x08008112
 8007a90:	00000000 	.word	0x00000000
 8007a94:	080077ed 	.word	0x080077ed
 8007a98:	0800810e 	.word	0x0800810e

08007a9c <_printf_common>:
 8007a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa0:	4616      	mov	r6, r2
 8007aa2:	4699      	mov	r9, r3
 8007aa4:	688a      	ldr	r2, [r1, #8]
 8007aa6:	690b      	ldr	r3, [r1, #16]
 8007aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	bfb8      	it	lt
 8007ab0:	4613      	movlt	r3, r2
 8007ab2:	6033      	str	r3, [r6, #0]
 8007ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ab8:	4607      	mov	r7, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	b10a      	cbz	r2, 8007ac2 <_printf_common+0x26>
 8007abe:	3301      	adds	r3, #1
 8007ac0:	6033      	str	r3, [r6, #0]
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	0699      	lsls	r1, r3, #26
 8007ac6:	bf42      	ittt	mi
 8007ac8:	6833      	ldrmi	r3, [r6, #0]
 8007aca:	3302      	addmi	r3, #2
 8007acc:	6033      	strmi	r3, [r6, #0]
 8007ace:	6825      	ldr	r5, [r4, #0]
 8007ad0:	f015 0506 	ands.w	r5, r5, #6
 8007ad4:	d106      	bne.n	8007ae4 <_printf_common+0x48>
 8007ad6:	f104 0a19 	add.w	sl, r4, #25
 8007ada:	68e3      	ldr	r3, [r4, #12]
 8007adc:	6832      	ldr	r2, [r6, #0]
 8007ade:	1a9b      	subs	r3, r3, r2
 8007ae0:	42ab      	cmp	r3, r5
 8007ae2:	dc26      	bgt.n	8007b32 <_printf_common+0x96>
 8007ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ae8:	1e13      	subs	r3, r2, #0
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	bf18      	it	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	0692      	lsls	r2, r2, #26
 8007af2:	d42b      	bmi.n	8007b4c <_printf_common+0xb0>
 8007af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007af8:	4649      	mov	r1, r9
 8007afa:	4638      	mov	r0, r7
 8007afc:	47c0      	blx	r8
 8007afe:	3001      	adds	r0, #1
 8007b00:	d01e      	beq.n	8007b40 <_printf_common+0xa4>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	6922      	ldr	r2, [r4, #16]
 8007b06:	f003 0306 	and.w	r3, r3, #6
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	bf02      	ittt	eq
 8007b0e:	68e5      	ldreq	r5, [r4, #12]
 8007b10:	6833      	ldreq	r3, [r6, #0]
 8007b12:	1aed      	subeq	r5, r5, r3
 8007b14:	68a3      	ldr	r3, [r4, #8]
 8007b16:	bf0c      	ite	eq
 8007b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b1c:	2500      	movne	r5, #0
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	bfc4      	itt	gt
 8007b22:	1a9b      	subgt	r3, r3, r2
 8007b24:	18ed      	addgt	r5, r5, r3
 8007b26:	2600      	movs	r6, #0
 8007b28:	341a      	adds	r4, #26
 8007b2a:	42b5      	cmp	r5, r6
 8007b2c:	d11a      	bne.n	8007b64 <_printf_common+0xc8>
 8007b2e:	2000      	movs	r0, #0
 8007b30:	e008      	b.n	8007b44 <_printf_common+0xa8>
 8007b32:	2301      	movs	r3, #1
 8007b34:	4652      	mov	r2, sl
 8007b36:	4649      	mov	r1, r9
 8007b38:	4638      	mov	r0, r7
 8007b3a:	47c0      	blx	r8
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d103      	bne.n	8007b48 <_printf_common+0xac>
 8007b40:	f04f 30ff 	mov.w	r0, #4294967295
 8007b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b48:	3501      	adds	r5, #1
 8007b4a:	e7c6      	b.n	8007ada <_printf_common+0x3e>
 8007b4c:	18e1      	adds	r1, r4, r3
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	2030      	movs	r0, #48	; 0x30
 8007b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b56:	4422      	add	r2, r4
 8007b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b60:	3302      	adds	r3, #2
 8007b62:	e7c7      	b.n	8007af4 <_printf_common+0x58>
 8007b64:	2301      	movs	r3, #1
 8007b66:	4622      	mov	r2, r4
 8007b68:	4649      	mov	r1, r9
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	47c0      	blx	r8
 8007b6e:	3001      	adds	r0, #1
 8007b70:	d0e6      	beq.n	8007b40 <_printf_common+0xa4>
 8007b72:	3601      	adds	r6, #1
 8007b74:	e7d9      	b.n	8007b2a <_printf_common+0x8e>
	...

08007b78 <_printf_i>:
 8007b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b7c:	7e0f      	ldrb	r7, [r1, #24]
 8007b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b80:	2f78      	cmp	r7, #120	; 0x78
 8007b82:	4691      	mov	r9, r2
 8007b84:	4680      	mov	r8, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	469a      	mov	sl, r3
 8007b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b8e:	d807      	bhi.n	8007ba0 <_printf_i+0x28>
 8007b90:	2f62      	cmp	r7, #98	; 0x62
 8007b92:	d80a      	bhi.n	8007baa <_printf_i+0x32>
 8007b94:	2f00      	cmp	r7, #0
 8007b96:	f000 80d4 	beq.w	8007d42 <_printf_i+0x1ca>
 8007b9a:	2f58      	cmp	r7, #88	; 0x58
 8007b9c:	f000 80c0 	beq.w	8007d20 <_printf_i+0x1a8>
 8007ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ba8:	e03a      	b.n	8007c20 <_printf_i+0xa8>
 8007baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bae:	2b15      	cmp	r3, #21
 8007bb0:	d8f6      	bhi.n	8007ba0 <_printf_i+0x28>
 8007bb2:	a101      	add	r1, pc, #4	; (adr r1, 8007bb8 <_printf_i+0x40>)
 8007bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bb8:	08007c11 	.word	0x08007c11
 8007bbc:	08007c25 	.word	0x08007c25
 8007bc0:	08007ba1 	.word	0x08007ba1
 8007bc4:	08007ba1 	.word	0x08007ba1
 8007bc8:	08007ba1 	.word	0x08007ba1
 8007bcc:	08007ba1 	.word	0x08007ba1
 8007bd0:	08007c25 	.word	0x08007c25
 8007bd4:	08007ba1 	.word	0x08007ba1
 8007bd8:	08007ba1 	.word	0x08007ba1
 8007bdc:	08007ba1 	.word	0x08007ba1
 8007be0:	08007ba1 	.word	0x08007ba1
 8007be4:	08007d29 	.word	0x08007d29
 8007be8:	08007c51 	.word	0x08007c51
 8007bec:	08007ce3 	.word	0x08007ce3
 8007bf0:	08007ba1 	.word	0x08007ba1
 8007bf4:	08007ba1 	.word	0x08007ba1
 8007bf8:	08007d4b 	.word	0x08007d4b
 8007bfc:	08007ba1 	.word	0x08007ba1
 8007c00:	08007c51 	.word	0x08007c51
 8007c04:	08007ba1 	.word	0x08007ba1
 8007c08:	08007ba1 	.word	0x08007ba1
 8007c0c:	08007ceb 	.word	0x08007ceb
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	1d1a      	adds	r2, r3, #4
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	602a      	str	r2, [r5, #0]
 8007c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c20:	2301      	movs	r3, #1
 8007c22:	e09f      	b.n	8007d64 <_printf_i+0x1ec>
 8007c24:	6820      	ldr	r0, [r4, #0]
 8007c26:	682b      	ldr	r3, [r5, #0]
 8007c28:	0607      	lsls	r7, r0, #24
 8007c2a:	f103 0104 	add.w	r1, r3, #4
 8007c2e:	6029      	str	r1, [r5, #0]
 8007c30:	d501      	bpl.n	8007c36 <_printf_i+0xbe>
 8007c32:	681e      	ldr	r6, [r3, #0]
 8007c34:	e003      	b.n	8007c3e <_printf_i+0xc6>
 8007c36:	0646      	lsls	r6, r0, #25
 8007c38:	d5fb      	bpl.n	8007c32 <_printf_i+0xba>
 8007c3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c3e:	2e00      	cmp	r6, #0
 8007c40:	da03      	bge.n	8007c4a <_printf_i+0xd2>
 8007c42:	232d      	movs	r3, #45	; 0x2d
 8007c44:	4276      	negs	r6, r6
 8007c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4a:	485a      	ldr	r0, [pc, #360]	; (8007db4 <_printf_i+0x23c>)
 8007c4c:	230a      	movs	r3, #10
 8007c4e:	e012      	b.n	8007c76 <_printf_i+0xfe>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	6820      	ldr	r0, [r4, #0]
 8007c54:	1d19      	adds	r1, r3, #4
 8007c56:	6029      	str	r1, [r5, #0]
 8007c58:	0605      	lsls	r5, r0, #24
 8007c5a:	d501      	bpl.n	8007c60 <_printf_i+0xe8>
 8007c5c:	681e      	ldr	r6, [r3, #0]
 8007c5e:	e002      	b.n	8007c66 <_printf_i+0xee>
 8007c60:	0641      	lsls	r1, r0, #25
 8007c62:	d5fb      	bpl.n	8007c5c <_printf_i+0xe4>
 8007c64:	881e      	ldrh	r6, [r3, #0]
 8007c66:	4853      	ldr	r0, [pc, #332]	; (8007db4 <_printf_i+0x23c>)
 8007c68:	2f6f      	cmp	r7, #111	; 0x6f
 8007c6a:	bf0c      	ite	eq
 8007c6c:	2308      	moveq	r3, #8
 8007c6e:	230a      	movne	r3, #10
 8007c70:	2100      	movs	r1, #0
 8007c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c76:	6865      	ldr	r5, [r4, #4]
 8007c78:	60a5      	str	r5, [r4, #8]
 8007c7a:	2d00      	cmp	r5, #0
 8007c7c:	bfa2      	ittt	ge
 8007c7e:	6821      	ldrge	r1, [r4, #0]
 8007c80:	f021 0104 	bicge.w	r1, r1, #4
 8007c84:	6021      	strge	r1, [r4, #0]
 8007c86:	b90e      	cbnz	r6, 8007c8c <_printf_i+0x114>
 8007c88:	2d00      	cmp	r5, #0
 8007c8a:	d04b      	beq.n	8007d24 <_printf_i+0x1ac>
 8007c8c:	4615      	mov	r5, r2
 8007c8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c92:	fb03 6711 	mls	r7, r3, r1, r6
 8007c96:	5dc7      	ldrb	r7, [r0, r7]
 8007c98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c9c:	4637      	mov	r7, r6
 8007c9e:	42bb      	cmp	r3, r7
 8007ca0:	460e      	mov	r6, r1
 8007ca2:	d9f4      	bls.n	8007c8e <_printf_i+0x116>
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d10b      	bne.n	8007cc0 <_printf_i+0x148>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	07de      	lsls	r6, r3, #31
 8007cac:	d508      	bpl.n	8007cc0 <_printf_i+0x148>
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	6861      	ldr	r1, [r4, #4]
 8007cb2:	4299      	cmp	r1, r3
 8007cb4:	bfde      	ittt	le
 8007cb6:	2330      	movle	r3, #48	; 0x30
 8007cb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cc0:	1b52      	subs	r2, r2, r5
 8007cc2:	6122      	str	r2, [r4, #16]
 8007cc4:	f8cd a000 	str.w	sl, [sp]
 8007cc8:	464b      	mov	r3, r9
 8007cca:	aa03      	add	r2, sp, #12
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4640      	mov	r0, r8
 8007cd0:	f7ff fee4 	bl	8007a9c <_printf_common>
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d14a      	bne.n	8007d6e <_printf_i+0x1f6>
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	b004      	add	sp, #16
 8007cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	f043 0320 	orr.w	r3, r3, #32
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	4833      	ldr	r0, [pc, #204]	; (8007db8 <_printf_i+0x240>)
 8007cec:	2778      	movs	r7, #120	; 0x78
 8007cee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	6829      	ldr	r1, [r5, #0]
 8007cf6:	061f      	lsls	r7, r3, #24
 8007cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cfc:	d402      	bmi.n	8007d04 <_printf_i+0x18c>
 8007cfe:	065f      	lsls	r7, r3, #25
 8007d00:	bf48      	it	mi
 8007d02:	b2b6      	uxthmi	r6, r6
 8007d04:	07df      	lsls	r7, r3, #31
 8007d06:	bf48      	it	mi
 8007d08:	f043 0320 	orrmi.w	r3, r3, #32
 8007d0c:	6029      	str	r1, [r5, #0]
 8007d0e:	bf48      	it	mi
 8007d10:	6023      	strmi	r3, [r4, #0]
 8007d12:	b91e      	cbnz	r6, 8007d1c <_printf_i+0x1a4>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	f023 0320 	bic.w	r3, r3, #32
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	e7a7      	b.n	8007c70 <_printf_i+0xf8>
 8007d20:	4824      	ldr	r0, [pc, #144]	; (8007db4 <_printf_i+0x23c>)
 8007d22:	e7e4      	b.n	8007cee <_printf_i+0x176>
 8007d24:	4615      	mov	r5, r2
 8007d26:	e7bd      	b.n	8007ca4 <_printf_i+0x12c>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	6826      	ldr	r6, [r4, #0]
 8007d2c:	6961      	ldr	r1, [r4, #20]
 8007d2e:	1d18      	adds	r0, r3, #4
 8007d30:	6028      	str	r0, [r5, #0]
 8007d32:	0635      	lsls	r5, r6, #24
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	d501      	bpl.n	8007d3c <_printf_i+0x1c4>
 8007d38:	6019      	str	r1, [r3, #0]
 8007d3a:	e002      	b.n	8007d42 <_printf_i+0x1ca>
 8007d3c:	0670      	lsls	r0, r6, #25
 8007d3e:	d5fb      	bpl.n	8007d38 <_printf_i+0x1c0>
 8007d40:	8019      	strh	r1, [r3, #0]
 8007d42:	2300      	movs	r3, #0
 8007d44:	6123      	str	r3, [r4, #16]
 8007d46:	4615      	mov	r5, r2
 8007d48:	e7bc      	b.n	8007cc4 <_printf_i+0x14c>
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	1d1a      	adds	r2, r3, #4
 8007d4e:	602a      	str	r2, [r5, #0]
 8007d50:	681d      	ldr	r5, [r3, #0]
 8007d52:	6862      	ldr	r2, [r4, #4]
 8007d54:	2100      	movs	r1, #0
 8007d56:	4628      	mov	r0, r5
 8007d58:	f7f8 fa3a 	bl	80001d0 <memchr>
 8007d5c:	b108      	cbz	r0, 8007d62 <_printf_i+0x1ea>
 8007d5e:	1b40      	subs	r0, r0, r5
 8007d60:	6060      	str	r0, [r4, #4]
 8007d62:	6863      	ldr	r3, [r4, #4]
 8007d64:	6123      	str	r3, [r4, #16]
 8007d66:	2300      	movs	r3, #0
 8007d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d6c:	e7aa      	b.n	8007cc4 <_printf_i+0x14c>
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	462a      	mov	r2, r5
 8007d72:	4649      	mov	r1, r9
 8007d74:	4640      	mov	r0, r8
 8007d76:	47d0      	blx	sl
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d0ad      	beq.n	8007cd8 <_printf_i+0x160>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	079b      	lsls	r3, r3, #30
 8007d80:	d413      	bmi.n	8007daa <_printf_i+0x232>
 8007d82:	68e0      	ldr	r0, [r4, #12]
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	4298      	cmp	r0, r3
 8007d88:	bfb8      	it	lt
 8007d8a:	4618      	movlt	r0, r3
 8007d8c:	e7a6      	b.n	8007cdc <_printf_i+0x164>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4632      	mov	r2, r6
 8007d92:	4649      	mov	r1, r9
 8007d94:	4640      	mov	r0, r8
 8007d96:	47d0      	blx	sl
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d09d      	beq.n	8007cd8 <_printf_i+0x160>
 8007d9c:	3501      	adds	r5, #1
 8007d9e:	68e3      	ldr	r3, [r4, #12]
 8007da0:	9903      	ldr	r1, [sp, #12]
 8007da2:	1a5b      	subs	r3, r3, r1
 8007da4:	42ab      	cmp	r3, r5
 8007da6:	dcf2      	bgt.n	8007d8e <_printf_i+0x216>
 8007da8:	e7eb      	b.n	8007d82 <_printf_i+0x20a>
 8007daa:	2500      	movs	r5, #0
 8007dac:	f104 0619 	add.w	r6, r4, #25
 8007db0:	e7f5      	b.n	8007d9e <_printf_i+0x226>
 8007db2:	bf00      	nop
 8007db4:	08008119 	.word	0x08008119
 8007db8:	0800812a 	.word	0x0800812a

08007dbc <memmove>:
 8007dbc:	4288      	cmp	r0, r1
 8007dbe:	b510      	push	{r4, lr}
 8007dc0:	eb01 0402 	add.w	r4, r1, r2
 8007dc4:	d902      	bls.n	8007dcc <memmove+0x10>
 8007dc6:	4284      	cmp	r4, r0
 8007dc8:	4623      	mov	r3, r4
 8007dca:	d807      	bhi.n	8007ddc <memmove+0x20>
 8007dcc:	1e43      	subs	r3, r0, #1
 8007dce:	42a1      	cmp	r1, r4
 8007dd0:	d008      	beq.n	8007de4 <memmove+0x28>
 8007dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dda:	e7f8      	b.n	8007dce <memmove+0x12>
 8007ddc:	4402      	add	r2, r0
 8007dde:	4601      	mov	r1, r0
 8007de0:	428a      	cmp	r2, r1
 8007de2:	d100      	bne.n	8007de6 <memmove+0x2a>
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dee:	e7f7      	b.n	8007de0 <memmove+0x24>

08007df0 <_sbrk_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4d06      	ldr	r5, [pc, #24]	; (8007e0c <_sbrk_r+0x1c>)
 8007df4:	2300      	movs	r3, #0
 8007df6:	4604      	mov	r4, r0
 8007df8:	4608      	mov	r0, r1
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	f7f9 f9a0 	bl	8001140 <_sbrk>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_sbrk_r+0x1a>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_sbrk_r+0x1a>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	20004cb8 	.word	0x20004cb8

08007e10 <_realloc_r>:
 8007e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e14:	4680      	mov	r8, r0
 8007e16:	4614      	mov	r4, r2
 8007e18:	460e      	mov	r6, r1
 8007e1a:	b921      	cbnz	r1, 8007e26 <_realloc_r+0x16>
 8007e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e20:	4611      	mov	r1, r2
 8007e22:	f7ff bc57 	b.w	80076d4 <_malloc_r>
 8007e26:	b92a      	cbnz	r2, 8007e34 <_realloc_r+0x24>
 8007e28:	f7ff fbe8 	bl	80075fc <_free_r>
 8007e2c:	4625      	mov	r5, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e34:	f000 f81b 	bl	8007e6e <_malloc_usable_size_r>
 8007e38:	4284      	cmp	r4, r0
 8007e3a:	4607      	mov	r7, r0
 8007e3c:	d802      	bhi.n	8007e44 <_realloc_r+0x34>
 8007e3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e42:	d812      	bhi.n	8007e6a <_realloc_r+0x5a>
 8007e44:	4621      	mov	r1, r4
 8007e46:	4640      	mov	r0, r8
 8007e48:	f7ff fc44 	bl	80076d4 <_malloc_r>
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d0ed      	beq.n	8007e2e <_realloc_r+0x1e>
 8007e52:	42bc      	cmp	r4, r7
 8007e54:	4622      	mov	r2, r4
 8007e56:	4631      	mov	r1, r6
 8007e58:	bf28      	it	cs
 8007e5a:	463a      	movcs	r2, r7
 8007e5c:	f7ff fbc0 	bl	80075e0 <memcpy>
 8007e60:	4631      	mov	r1, r6
 8007e62:	4640      	mov	r0, r8
 8007e64:	f7ff fbca 	bl	80075fc <_free_r>
 8007e68:	e7e1      	b.n	8007e2e <_realloc_r+0x1e>
 8007e6a:	4635      	mov	r5, r6
 8007e6c:	e7df      	b.n	8007e2e <_realloc_r+0x1e>

08007e6e <_malloc_usable_size_r>:
 8007e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e72:	1f18      	subs	r0, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bfbc      	itt	lt
 8007e78:	580b      	ldrlt	r3, [r1, r0]
 8007e7a:	18c0      	addlt	r0, r0, r3
 8007e7c:	4770      	bx	lr
	...

08007e80 <_init>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	bf00      	nop
 8007e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e86:	bc08      	pop	{r3}
 8007e88:	469e      	mov	lr, r3
 8007e8a:	4770      	bx	lr

08007e8c <_fini>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr
